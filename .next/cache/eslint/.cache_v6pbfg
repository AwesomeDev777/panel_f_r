[{"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\404.tsx":"1","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\chart\\index.tsx":"2","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\chart\\new.tsx":"3","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\chart\\[id].tsx":"4","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\journalEntry\\index.tsx":"5","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\journalEntry\\new.tsx":"6","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\journalEntry\\[id].tsx":"7","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\transaction\\banking\\new.tsx":"8","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\transaction\\index.tsx":"9","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\transfer\\index.tsx":"10","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\transfer\\new.tsx":"11","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\transfer\\[id].tsx":"12","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\clients\\client.tsx":"13","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\clients\\contact\\index.tsx":"14","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\clients\\contact\\[id].tsx":"15","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\clients\\index.tsx":"16","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\clients\\[id].tsx":"17","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\contract\\index.tsx":"18","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\contract\\new.tsx":"19","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\contract\\[id].tsx":"20","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\index.tsx":"21","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\login.tsx":"22","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\profile.tsx":"23","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\project\\index.tsx":"24","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\project\\new.tsx":"25","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\project\\[id].tsx":"26","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\clientfield\\index.tsx":"27","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\clientfield\\new.tsx":"28","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\clientgroup\\index.tsx":"29","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\clientgroup\\new.tsx":"30","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\contract\\index.tsx":"31","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\contract\\new.tsx":"32","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\currency\\index.tsx":"33","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\currency\\new.tsx":"34","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\currency\\[id].tsx":"35","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\department\\index.tsx":"36","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\department\\new.tsx":"37","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\department\\[id].tsx":"38","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\expensecategory\\index.tsx":"39","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\expensecategory\\new.tsx":"40","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\itemfield\\index.tsx":"41","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\itemfield\\new.tsx":"42","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\itemfield\\[id].tsx":"43","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\paymentmode\\index.tsx":"44","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\paymentmode\\new.tsx":"45","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\paymentmode\\[id].tsx":"46","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\role\\index.tsx":"47","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\role\\new.tsx":"48","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\role\\[id].tsx":"49","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\staff\\index.tsx":"50","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\staff\\new.tsx":"51","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\staff\\[id].tsx":"52","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\tax\\index.tsx":"53","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\tax\\new.tsx":"54","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\tax\\[id].tsx":"55","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\warehouse\\good\\[goodId].tsx":"56","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\warehouse\\good.tsx":"57","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\warehouse\\inventory.tsx":"58","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\api\\upload\\index.js":"59","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\api\\upload\\item\\index.js":"60","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\api\\upload\\item\\remove.js":"61","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\api\\upload\\remove.js":"62","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\_app.tsx":"63","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\_document.tsx":"64","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\chart\\index.tsx":"65","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\chart\\new.tsx":"66","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\chart\\view.tsx":"67","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\journalEntry\\index.tsx":"68","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\journalEntry\\new.tsx":"69","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\journalEntry\\view.tsx":"70","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\transaction\\banking\\new.tsx":"71","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\transaction\\index.tsx":"72","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\transfer\\index.tsx":"73","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\transfer\\new.tsx":"74","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\transfer\\view.tsx":"75","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\contact\\contact.tsx":"76","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\contact\\index.tsx":"77","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\contact\\view.tsx":"78","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\index.tsx":"79","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\layout.tsx":"80","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\new.tsx":"81","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\view.tsx":"82","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\contract\\index.tsx":"83","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\contract\\new.tsx":"84","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\contract\\view.tsx":"85","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\dashboard\\widget1.tsx":"86","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\dashboard\\widget2.tsx":"87","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\dashboard\\widget3.tsx":"88","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\dashboard\\widget4.tsx":"89","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\dashboard\\widget5.tsx":"90","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\profile.tsx":"91","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\project\\index.tsx":"92","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\project\\new.tsx":"93","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\project\\view.tsx":"94","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\clientfield\\index.tsx":"95","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\clientfield\\new.tsx":"96","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\clientgroup\\index.tsx":"97","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\clientgroup\\new.tsx":"98","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\contract\\index.tsx":"99","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\contract\\new.tsx":"100","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\currency\\index.tsx":"101","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\currency\\new.tsx":"102","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\currency\\view.tsx":"103","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\department\\index.tsx":"104","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\department\\new.tsx":"105","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\department\\view.tsx":"106","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\expensecategory\\index.tsx":"107","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\expensecategory\\new.tsx":"108","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\itemfield\\index.tsx":"109","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\itemfield\\new.tsx":"110","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\itemfield\\view.tsx":"111","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\paymentmode\\index.tsx":"112","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\paymentmode\\new.tsx":"113","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\paymentmode\\view.tsx":"114","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\role\\index.tsx":"115","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\role\\new.tsx":"116","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\role\\view.tsx":"117","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\staff\\index.tsx":"118","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\staff\\new.tsx":"119","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\staff\\view.tsx":"120","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\tax\\index.tsx":"121","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\tax\\new.tsx":"122","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\tax\\view.tsx":"123","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\good\\AddGoodModal.tsx":"124","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\good\\EditGoodModal.tsx":"125","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\good\\GoodDetail.tsx":"126","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\good\\GoodsTable.tsx":"127","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\good\\index.tsx":"128","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\inventory\\list.tsx":"129","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\product\\AddProductModal.tsx":"130","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\product\\EditProductModal.tsx":"131","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\product\\index.tsx":"132","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\product\\index_old.tsx":"133","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\product\\ProductsTable.tsx":"134","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\authAdminVerifyCookie.tsx":"135","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\authContext.tsx":"136","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\authVerifyCookie.tsx":"137","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\withAdminAuth.tsx":"138","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\withAdminGuest.tsx":"139","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\withAuth.tsx":"140","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\withGuest.tsx":"141","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\firebase\\firebaseAdmin.ts":"142","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\firebase\\firebaseClient.ts":"143","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\aside\\Aside.tsx":"144","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\aside\\AsideNavigationMenu.tsx":"145","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\aside\\AsideNavigationMenuLink.tsx":"146","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\aside\\AsideNavigationMenuSection.tsx":"147","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\aside\\AsideNavigationMenuSubmenu.tsx":"148","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\floating-button\\FloatingButton.tsx":"149","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\footer\\Footer.tsx":"150","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\getLayout.ts":"151","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\Header.tsx":"152","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderAction.tsx":"153","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderActionFullscreen.tsx":"154","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderActionToggle.tsx":"155","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderAdminUser.tsx":"156","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderBreadcrumb.tsx":"157","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderChat.tsx":"158","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderNav.tsx":"159","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderNotification.tsx":"160","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderUser.tsx":"161","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\offcanvas\\agenda\\OffcanvasAgenda.tsx":"162","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\offcanvas\\setting\\OffcanvasSetting.tsx":"163","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\template\\BackgroundLayout.tsx":"164","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\template\\BlankLayout.tsx":"165","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\template\\DefaultLayout.tsx":"166","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\widget\\WidgetContacts.tsx":"167","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\widget\\WidgetOptions.tsx":"168","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\widget\\WidgetPerformance.tsx":"169","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\widget\\WidgetTimeline.tsx":"170","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\widget\\WidgetUserThumbnail.tsx":"171","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\sweetalert2\\instance.ts":"172","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\Table\\index.ts":"173","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\Table\\Table.tsx":"174","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\Table\\TableHeader.tsx":"175","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget1.tsx":"176","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget10.tsx":"177","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget11.tsx":"178","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget12.tsx":"179","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget13.tsx":"180","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget14.tsx":"181","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget15.tsx":"182","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget16.tsx":"183","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget17.tsx":"184","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget18.tsx":"185","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget19.tsx":"186","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget2.tsx":"187","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget20.tsx":"188","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget21.tsx":"189","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget22.tsx":"190","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget23.tsx":"191","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget24.tsx":"192","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget25.tsx":"193","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget26.tsx":"194","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget27.tsx":"195","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget28.tsx":"196","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget29.tsx":"197","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget3.tsx":"198","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget30.tsx":"199","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget31.tsx":"200","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget32.tsx":"201","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget33.tsx":"202","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget34.tsx":"203","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget35.tsx":"204","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget4.tsx":"205","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget5.tsx":"206","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget6.tsx":"207","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget7.tsx":"208","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget8.tsx":"209","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget9.tsx":"210","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\register.tsx":"211"},{"size":924,"mtime":1647778165957,"results":"212","hashOfConfig":"213"},{"size":519,"mtime":1685119213399,"results":"214","hashOfConfig":"213"},{"size":494,"mtime":1685119269161,"results":"215","hashOfConfig":"213"},{"size":910,"mtime":1693070237318,"results":"216","hashOfConfig":"213"},{"size":519,"mtime":1685119115235,"results":"217","hashOfConfig":"213"},{"size":514,"mtime":1685113020283,"results":"218","hashOfConfig":"213"},{"size":927,"mtime":1693070263843,"results":"219","hashOfConfig":"213"},{"size":528,"mtime":1685113154604,"results":"220","hashOfConfig":"213"},{"size":548,"mtime":1685107060175,"results":"221","hashOfConfig":"213"},{"size":486,"mtime":1685113262788,"results":"222","hashOfConfig":"213"},{"size":502,"mtime":1685113299436,"results":"223","hashOfConfig":"213"},{"size":918,"mtime":1693070263843,"results":"224","hashOfConfig":"213"},{"size":520,"mtime":1690324803010,"results":"225","hashOfConfig":"213"},{"size":570,"mtime":1685630165594,"results":"226","hashOfConfig":"213"},{"size":951,"mtime":1693070264319,"results":"227","hashOfConfig":"213"},{"size":545,"mtime":1685112775301,"results":"228","hashOfConfig":"213"},{"size":2364,"mtime":1690324439010,"results":"229","hashOfConfig":"213"},{"size":551,"mtime":1685112858676,"results":"230","hashOfConfig":"213"},{"size":464,"mtime":1685112881100,"results":"231","hashOfConfig":"213"},{"size":880,"mtime":1693070264271,"results":"232","hashOfConfig":"213"},{"size":985,"mtime":1693066582481,"results":"233","hashOfConfig":"213"},{"size":5010,"mtime":1693074348274,"results":"234","hashOfConfig":"213"},{"size":867,"mtime":1693070263347,"results":"235","hashOfConfig":"213"},{"size":554,"mtime":1685112948522,"results":"236","hashOfConfig":"213"},{"size":461,"mtime":1685112939036,"results":"237","hashOfConfig":"213"},{"size":877,"mtime":1693070263883,"results":"238","hashOfConfig":"213"},{"size":607,"mtime":1685618535855,"results":"239","hashOfConfig":"213"},{"size":489,"mtime":1685618569012,"results":"240","hashOfConfig":"213"},{"size":607,"mtime":1685112075957,"results":"241","hashOfConfig":"213"},{"size":490,"mtime":1685112157422,"results":"242","hashOfConfig":"213"},{"size":608,"mtime":1685112247183,"results":"243","hashOfConfig":"213"},{"size":485,"mtime":1685112288619,"results":"244","hashOfConfig":"213"},{"size":579,"mtime":1685112334805,"results":"245","hashOfConfig":"213"},{"size":480,"mtime":1685112373635,"results":"246","hashOfConfig":"213"},{"size":896,"mtime":1693070263885,"results":"247","hashOfConfig":"213"},{"size":597,"mtime":1685112572427,"results":"248","hashOfConfig":"213"},{"size":486,"mtime":1685112528684,"results":"249","hashOfConfig":"213"},{"size":901,"mtime":1693070264228,"results":"250","hashOfConfig":"213"},{"size":643,"mtime":1685544719431,"results":"251","hashOfConfig":"213"},{"size":502,"mtime":1685544814352,"results":"252","hashOfConfig":"213"},{"size":589,"mtime":1685432243523,"results":"253","hashOfConfig":"213"},{"size":483,"mtime":1685432174476,"results":"254","hashOfConfig":"213"},{"size":899,"mtime":1693070264191,"results":"255","hashOfConfig":"213"},{"size":607,"mtime":1685545123496,"results":"256","hashOfConfig":"213"},{"size":490,"mtime":1685546590119,"results":"257","hashOfConfig":"213"},{"size":906,"mtime":1693070264144,"results":"258","hashOfConfig":"213"},{"size":543,"mtime":1685112606221,"results":"259","hashOfConfig":"213"},{"size":468,"mtime":1685112633334,"results":"260","hashOfConfig":"213"},{"size":884,"mtime":1693070264101,"results":"261","hashOfConfig":"213"},{"size":552,"mtime":1685112691862,"results":"262","hashOfConfig":"213"},{"size":471,"mtime":1685112718093,"results":"263","hashOfConfig":"213"},{"size":887,"mtime":1693070264059,"results":"264","hashOfConfig":"213"},{"size":534,"mtime":1685436778233,"results":"265","hashOfConfig":"213"},{"size":465,"mtime":1685436805785,"results":"266","hashOfConfig":"213"},{"size":881,"mtime":1693070263912,"results":"267","hashOfConfig":"213"},{"size":766,"mtime":1692904530543,"results":"268","hashOfConfig":"213"},{"size":819,"mtime":1692910368449,"results":"269","hashOfConfig":"213"},{"size":1178,"mtime":1692860071736,"results":"270","hashOfConfig":"213"},{"size":1083,"mtime":1685758325072,"results":"271","hashOfConfig":"213"},{"size":1080,"mtime":1687924635436,"results":"272","hashOfConfig":"213"},{"size":816,"mtime":1687924637098,"results":"273","hashOfConfig":"213"},{"size":819,"mtime":1685758315440,"results":"274","hashOfConfig":"213"},{"size":1524,"mtime":1685243217584,"results":"275","hashOfConfig":"213"},{"size":1281,"mtime":1645610748130,"results":"276","hashOfConfig":"213"},{"size":8003,"mtime":1688016317021,"results":"277","hashOfConfig":"213"},{"size":7433,"mtime":1688020766932,"results":"278","hashOfConfig":"213"},{"size":8202,"mtime":1688020328992,"results":"279","hashOfConfig":"213"},{"size":6892,"mtime":1693070291433,"results":"280","hashOfConfig":"213"},{"size":3719,"mtime":1688020881372,"results":"281","hashOfConfig":"213"},{"size":4200,"mtime":1688021223109,"results":"282","hashOfConfig":"213"},{"size":5015,"mtime":1688021951411,"results":"283","hashOfConfig":"213"},{"size":10993,"mtime":1693070095060,"results":"284","hashOfConfig":"213"},{"size":6942,"mtime":1693070319043,"results":"285","hashOfConfig":"213"},{"size":4596,"mtime":1688022257587,"results":"286","hashOfConfig":"213"},{"size":4943,"mtime":1688022439268,"results":"287","hashOfConfig":"213"},{"size":21211,"mtime":1688024285672,"results":"288","hashOfConfig":"213"},{"size":8765,"mtime":1688024351949,"results":"289","hashOfConfig":"213"},{"size":6679,"mtime":1688024463343,"results":"290","hashOfConfig":"213"},{"size":8834,"mtime":1690318426068,"results":"291","hashOfConfig":"213"},{"size":1124,"mtime":1690334173935,"results":"292","hashOfConfig":"213"},{"size":22287,"mtime":1690319213654,"results":"293","hashOfConfig":"213"},{"size":25107,"mtime":1690319537451,"results":"294","hashOfConfig":"213"},{"size":13281,"mtime":1692915790313,"results":"295","hashOfConfig":"213"},{"size":6819,"mtime":1688026151626,"results":"296","hashOfConfig":"213"},{"size":9029,"mtime":1688031582959,"results":"297","hashOfConfig":"213"},{"size":3205,"mtime":1692929359110,"results":"298","hashOfConfig":"213"},{"size":9142,"mtime":1690319994515,"results":"299","hashOfConfig":"213"},{"size":2293,"mtime":1692915790338,"results":"300","hashOfConfig":"213"},{"size":2930,"mtime":1692915728135,"results":"301","hashOfConfig":"213"},{"size":2743,"mtime":1685186370481,"results":"302","hashOfConfig":"213"},{"size":17291,"mtime":1690318220034,"results":"303","hashOfConfig":"213"},{"size":7256,"mtime":1688026512746,"results":"304","hashOfConfig":"213"},{"size":14789,"mtime":1688027239569,"results":"305","hashOfConfig":"213"},{"size":16478,"mtime":1688027337864,"results":"306","hashOfConfig":"213"},{"size":6900,"mtime":1693070344541,"results":"307","hashOfConfig":"213"},{"size":2563,"mtime":1688029517276,"results":"308","hashOfConfig":"213"},{"size":6028,"mtime":1693070357582,"results":"309","hashOfConfig":"213"},{"size":2574,"mtime":1688029615418,"results":"310","hashOfConfig":"213"},{"size":6022,"mtime":1693070371216,"results":"311","hashOfConfig":"213"},{"size":2578,"mtime":1688029698587,"results":"312","hashOfConfig":"213"},{"size":7416,"mtime":1693070388886,"results":"313","hashOfConfig":"213"},{"size":5418,"mtime":1688029858749,"results":"314","hashOfConfig":"213"},{"size":6394,"mtime":1688030053817,"results":"315","hashOfConfig":"213"},{"size":6575,"mtime":1693070389100,"results":"316","hashOfConfig":"213"},{"size":3592,"mtime":1688030183843,"results":"317","hashOfConfig":"213"},{"size":4076,"mtime":1688030252449,"results":"318","hashOfConfig":"213"},{"size":6337,"mtime":1693070389266,"results":"319","hashOfConfig":"213"},{"size":3137,"mtime":1688030354606,"results":"320","hashOfConfig":"213"},{"size":7360,"mtime":1693070389189,"results":"321","hashOfConfig":"213"},{"size":3040,"mtime":1688030456880,"results":"322","hashOfConfig":"213"},{"size":3546,"mtime":1688030532673,"results":"323","hashOfConfig":"213"},{"size":7233,"mtime":1693070389443,"results":"324","hashOfConfig":"213"},{"size":5695,"mtime":1688030650031,"results":"325","hashOfConfig":"213"},{"size":6610,"mtime":1688030737240,"results":"326","hashOfConfig":"213"},{"size":6270,"mtime":1693070389349,"results":"327","hashOfConfig":"213"},{"size":6454,"mtime":1688033073595,"results":"328","hashOfConfig":"213"},{"size":6152,"mtime":1688038227718,"results":"329","hashOfConfig":"213"},{"size":9430,"mtime":1688038352271,"results":"330","hashOfConfig":"213"},{"size":16287,"mtime":1690317440732,"results":"331","hashOfConfig":"213"},{"size":16314,"mtime":1690317641386,"results":"332","hashOfConfig":"213"},{"size":6591,"mtime":1693070389109,"results":"333","hashOfConfig":"213"},{"size":3051,"mtime":1690313424364,"results":"334","hashOfConfig":"213"},{"size":3874,"mtime":1690313684008,"results":"335","hashOfConfig":"213"},{"size":5670,"mtime":1692909715122,"results":"336","hashOfConfig":"213"},{"size":7885,"mtime":1692909760706,"results":"337","hashOfConfig":"213"},{"size":5991,"mtime":1692909933019,"results":"338","hashOfConfig":"213"},{"size":7807,"mtime":1692909956542,"results":"339","hashOfConfig":"213"},{"size":4914,"mtime":1692910365047,"results":"340","hashOfConfig":"213"},{"size":11990,"mtime":1692909972133,"results":"341","hashOfConfig":"213"},{"size":3420,"mtime":1692909988500,"results":"342","hashOfConfig":"213"},{"size":5933,"mtime":1692910028273,"results":"343","hashOfConfig":"213"},{"size":5135,"mtime":1692910080678,"results":"344","hashOfConfig":"213"},{"size":25043,"mtime":1692929359111,"results":"345","hashOfConfig":"213"},{"size":12604,"mtime":1692910098348,"results":"346","hashOfConfig":"213"},{"size":709,"mtime":1693075611044,"results":"347","hashOfConfig":"213"},{"size":1628,"mtime":1692929359111,"results":"348","hashOfConfig":"213"},{"size":743,"mtime":1684511057710,"results":"349","hashOfConfig":"213"},{"size":1343,"mtime":1693058736693,"results":"350","hashOfConfig":"213"},{"size":1411,"mtime":1693058871683,"results":"351","hashOfConfig":"213"},{"size":1308,"mtime":1693059018832,"results":"352","hashOfConfig":"213"},{"size":1373,"mtime":1693059219660,"results":"353","hashOfConfig":"213"},{"size":404,"mtime":1647103289114,"results":"354","hashOfConfig":"213"},{"size":354,"mtime":1684065340017,"results":"355","hashOfConfig":"213"},{"size":2213,"mtime":1650133043129,"results":"356","hashOfConfig":"213"},{"size":5874,"mtime":1685537324307,"results":"357","hashOfConfig":"213"},{"size":1070,"mtime":1650097569362,"results":"358","hashOfConfig":"213"},{"size":564,"mtime":1692929359112,"results":"359","hashOfConfig":"213"},{"size":566,"mtime":1692929359112,"results":"360","hashOfConfig":"213"},{"size":993,"mtime":1649776733696,"results":"361","hashOfConfig":"213"},{"size":976,"mtime":1650097289072,"results":"362","hashOfConfig":"213"},{"size":746,"mtime":1646130757051,"results":"363","hashOfConfig":"213"},{"size":4017,"mtime":1687744673281,"results":"364","hashOfConfig":"213"},{"size":353,"mtime":1650261486725,"results":"365","hashOfConfig":"213"},{"size":1576,"mtime":1650261526875,"results":"366","hashOfConfig":"213"},{"size":676,"mtime":1650261505072,"results":"367","hashOfConfig":"213"},{"size":5144,"mtime":1690322517729,"results":"368","hashOfConfig":"213"},{"size":1133,"mtime":1650260287202,"results":"369","hashOfConfig":"213"},{"size":3776,"mtime":1650554537408,"results":"370","hashOfConfig":"213"},{"size":2549,"mtime":1684657141981,"results":"371","hashOfConfig":"213"},{"size":3942,"mtime":1650260549406,"results":"372","hashOfConfig":"213"},{"size":3829,"mtime":1690322135321,"results":"373","hashOfConfig":"213"},{"size":3807,"mtime":1650554537407,"results":"374","hashOfConfig":"213"},{"size":3023,"mtime":1646130757769,"results":"375","hashOfConfig":"213"},{"size":548,"mtime":1692929359113,"results":"376","hashOfConfig":"213"},{"size":515,"mtime":1692929359113,"results":"377","hashOfConfig":"213"},{"size":2291,"mtime":1650132336168,"results":"378","hashOfConfig":"213"},{"size":2208,"mtime":1646130757995,"results":"379","hashOfConfig":"213"},{"size":1367,"mtime":1646130758034,"results":"380","hashOfConfig":"213"},{"size":1399,"mtime":1646130758082,"results":"381","hashOfConfig":"213"},{"size":1156,"mtime":1646130758123,"results":"382","hashOfConfig":"213"},{"size":890,"mtime":1647078120706,"results":"383","hashOfConfig":"213"},{"size":533,"mtime":1646130758172,"results":"384","hashOfConfig":"213"},{"size":36,"mtime":1692665524023,"results":"385","hashOfConfig":"213"},{"size":110,"mtime":1692665521607,"results":"386","hashOfConfig":"213"},{"size":128,"mtime":1692666320009,"results":"387","hashOfConfig":"213"},{"size":4461,"mtime":1646130758258,"results":"388","hashOfConfig":"213"},{"size":5224,"mtime":1693067030736,"results":"389","hashOfConfig":"213"},{"size":1223,"mtime":1646130758383,"results":"390","hashOfConfig":"213"},{"size":2075,"mtime":1646130758449,"results":"391","hashOfConfig":"213"},{"size":2506,"mtime":1650554537406,"results":"392","hashOfConfig":"213"},{"size":3367,"mtime":1646130758575,"results":"393","hashOfConfig":"213"},{"size":2992,"mtime":1650554537405,"results":"394","hashOfConfig":"213"},{"size":1293,"mtime":1649571879500,"results":"395","hashOfConfig":"213"},{"size":1606,"mtime":1646130758746,"results":"396","hashOfConfig":"213"},{"size":1032,"mtime":1646130758783,"results":"397","hashOfConfig":"213"},{"size":1543,"mtime":1646130758823,"results":"398","hashOfConfig":"213"},{"size":1805,"mtime":1646130758865,"results":"399","hashOfConfig":"213"},{"size":2480,"mtime":1646130758958,"results":"400","hashOfConfig":"213"},{"size":1701,"mtime":1646130759026,"results":"401","hashOfConfig":"213"},{"size":4152,"mtime":1692915790438,"results":"402","hashOfConfig":"213"},{"size":3985,"mtime":1692915790443,"results":"403","hashOfConfig":"213"},{"size":6417,"mtime":1692915790443,"results":"404","hashOfConfig":"213"},{"size":3448,"mtime":1649776662431,"results":"405","hashOfConfig":"213"},{"size":3072,"mtime":1692915790443,"results":"406","hashOfConfig":"213"},{"size":4275,"mtime":1692915790595,"results":"407","hashOfConfig":"213"},{"size":2685,"mtime":1693070455599,"results":"408","hashOfConfig":"213"},{"size":2442,"mtime":1693070462420,"results":"409","hashOfConfig":"213"},{"size":2984,"mtime":1646130759805,"results":"410","hashOfConfig":"213"},{"size":2147,"mtime":1692915790463,"results":"411","hashOfConfig":"213"},{"size":1822,"mtime":1692915790535,"results":"412","hashOfConfig":"213"},{"size":1688,"mtime":1692915790494,"results":"413","hashOfConfig":"213"},{"size":1627,"mtime":1649571888137,"results":"414","hashOfConfig":"213"},{"size":2431,"mtime":1693070468069,"results":"415","hashOfConfig":"213"},{"size":1688,"mtime":1649966392681,"results":"416","hashOfConfig":"213"},{"size":3896,"mtime":1650554537400,"results":"417","hashOfConfig":"213"},{"size":4716,"mtime":1650554537400,"results":"418","hashOfConfig":"213"},{"size":2060,"mtime":1650554537400,"results":"419","hashOfConfig":"213"},{"size":2042,"mtime":1685147238467,"results":"420","hashOfConfig":"213"},{"size":1490,"mtime":1646130760313,"results":"421","hashOfConfig":"213"},{"size":2289,"mtime":1649775536454,"results":"422","hashOfConfig":"213"},{"size":6708,"mtime":1693074596273,"results":"423","hashOfConfig":"213"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1n1zvnb",{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458"},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"515","messages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543"},{"filePath":"544","messages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549"},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559"},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562"},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"568"},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586"},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"589"},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"592"},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595"},{"filePath":"596","messages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"598"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601"},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604"},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607"},{"filePath":"608","messages":"609","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"613"},{"filePath":"614","messages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616"},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"629"},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"632"},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"635"},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"638"},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"641"},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"651"},{"filePath":"652","messages":"653","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656"},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"659"},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665"},{"filePath":"666","messages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"673"},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"678"},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683"},{"filePath":"684","messages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686"},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"691"},{"filePath":"692","messages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"694"},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"697"},{"filePath":"698","messages":"699","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"700"},{"filePath":"701","messages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703"},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"706"},{"filePath":"707","messages":"708","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"709"},{"filePath":"710","messages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"712"},{"filePath":"713","messages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"717"},{"filePath":"718","messages":"719","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"720","messages":"721","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"722"},{"filePath":"723","messages":"724","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"725"},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728"},{"filePath":"729","messages":"730","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"731"},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"734"},{"filePath":"735","messages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"737","messages":"738","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"739"},{"filePath":"740","messages":"741","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"742"},{"filePath":"743","messages":"744","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745"},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748"},{"filePath":"749","messages":"750","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"753"},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"758","messages":"759","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"764","messages":"765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"770","messages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"772","messages":"773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"784","messages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"786","messages":"787","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"788","messages":"789","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"792","messages":"793","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"794"},{"filePath":"795","messages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"797","messages":"798","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"799","messages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"803","messages":"804","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"805","messages":"806","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"807","messages":"808","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"809","messages":"810","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"811","messages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"813","messages":"814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"815","messages":"816","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"817","messages":"818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"819","messages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"821","messages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"823","messages":"824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"825","messages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"829","messages":"830","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"831","messages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"837","messages":"838","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"839","messages":"840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"845","messages":"846","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"847","messages":"848","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"849","messages":"850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"851","messages":"852","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"855","messages":"856","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"857","messages":"858","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"861","messages":"862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"863","messages":"864","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"865","messages":"866","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"867","messages":"868","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"869","messages":"870","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"871","messages":"872","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"873","messages":"874","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"875","messages":"876","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"877","messages":"878","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"879","messages":"880","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"881","messages":"882","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"883","messages":"884","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"885","messages":"886","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"887","messages":"888","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"889","messages":"890","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"891","messages":"892","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"893","messages":"894","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"895","messages":"896","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"897","messages":"898","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"899","messages":"900","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"901","messages":"902","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"903","messages":"904","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\404.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\chart\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\chart\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\chart\\[id].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\journalEntry\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\journalEntry\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\journalEntry\\[id].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\transaction\\banking\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\transaction\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\transfer\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\transfer\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\accounting\\transfer\\[id].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\clients\\client.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\clients\\contact\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\clients\\contact\\[id].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\clients\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\clients\\[id].tsx",["905","906","907"],"import React, { ReactElement } from 'react'\r\nimport { Row, Col } from '@blueupcode/components'\r\nimport View from 'components/admin/client/view'\r\nimport Layout from 'components/admin/client/layout'\r\nimport Contact from 'components/admin/client/contact/contact'\r\nimport type { ExtendedNextPage } from '@blueupcode/components/types'\r\nimport { useRouter } from 'next/router'\r\nimport { parseCookies } from 'nookies'\r\nimport axios from 'axios'\r\nimport { Admin_Client_GetOne } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst ViewPage: ExtendedNextPage = () => {\r\n\tconst cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n\tconst router = useRouter()\r\n\tconst [id, setId] = React.useState<String>()\r\n    const [layout, setLayout] = React.useState<String>(\"profile\")\r\n\tconst [view, setView] = React.useState<ReactElement>()\r\n\tconst [company, setCompany] = React.useState('')\r\n\r\n\tconst [profile, setProfile] = React.useState<ReactElement>()\r\n\tconst [contact, setContact] = React.useState<ReactElement>()\r\n\t\r\n\tconst backLayout = (layout: String) => {\r\n\t\tsetLayout(layout);\r\n\t}\r\n\t\r\n\tReact.useEffect(() => {\r\n\t\tif(router.query == undefined || isEmpty(router.query) == true) {return;}\r\n\t\telse{\t\t\t\r\n\t\t\tlet query = router.query.id\r\n\t\t\tsetId(String(query))\r\n\t\t\taxios.get(Admin_Client_GetOne + `/${query}`, {headers})\r\n\t\t\t\t.then(res => {\r\n\t\t\t\t\tsetCompany(res.data.company)\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\tconsole.log(err)\r\n\t\t\t\t})\r\n\t\t\tsetProfile(<View id = {query}/>)\r\n\t\t\tsetContact(<Contact id = {query}/>)\r\n\t\t}\r\n\t},[router.query]);\r\n\r\n\tconst LayoutComponent = () => {\r\n\t\tif(id !== undefined)\r\n\t\t{\r\n\t\t\tconst layoutProps = {id, layout, company, backLayout} \r\n\r\n\t\t\treturn (<Layout layoutProps = {layoutProps}/>)\r\n\t\t}\r\n\t\treturn (<p></p>)\r\n\t}\r\n\r\n\tReact.useEffect(() => {\r\n\t\tif(router.query !== undefined){\r\n\t\t\tif(layout == \"profile\")\r\n\t\t\t{\r\n\t\t\t\tsetView(profile)\r\n\t\t\t}\r\n\t\t\tif(layout == \"contact\")\r\n\t\t\t{\r\n\t\t\t\tsetView(contact)\r\n\t\t\t}\r\n\t\t}\r\n    }, [layout])\t\r\n\r\n\tReact.useEffect(()=> {\r\n\t\tif(id == undefined) {return;}\r\n\t\telse{\t\t\t\r\n\t\t\tsetView(profile)\r\n\t\t}\r\n\t}, [id])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Row>\r\n\t\t\t\t<Col md={3}>\r\n\t\t\t\t\t<LayoutComponent />\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col md={9}>\r\n\t\t\t\t\t{view}\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nViewPage.pageTitle = 'View Client'\r\nViewPage.activeLink = 'admin/client/'\r\n\r\nexport default ViewPage\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\contract\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\contract\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\contract\\[id].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\login.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\profile.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\project\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\project\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\project\\[id].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\clientfield\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\clientfield\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\clientgroup\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\clientgroup\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\contract\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\contract\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\currency\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\currency\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\currency\\[id].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\department\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\department\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\department\\[id].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\expensecategory\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\expensecategory\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\itemfield\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\itemfield\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\itemfield\\[id].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\paymentmode\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\paymentmode\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\paymentmode\\[id].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\role\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\role\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\role\\[id].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\staff\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\staff\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\staff\\[id].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\tax\\index.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\tax\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\setting\\tax\\[id].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\warehouse\\good\\[goodId].tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\warehouse\\good.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\warehouse\\inventory.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\api\\upload\\index.js",["908"],"import { IncomingForm } from 'formidable'\r\nimport { promises as fs } from 'fs'\r\n\r\nvar mv = require('mv');\r\n\r\n\r\nexport const config = {\r\n    api: {\r\n       bodyParser: false,\r\n    }\r\n};\r\n \r\nexport default async (req, res) => {\r\n    \r\n    const data = await new Promise((resolve, reject) => {\r\n       const form = new IncomingForm()\r\n        form.parse(req, (err, fields, files) => {\r\n            const type = files.file.mimetype;\r\n            if (err) return reject(err)\r\n\r\n            if(type.indexOf(\"image\") !== -1)\r\n            {\r\n                var newFilename = files.file.newFilename.concat(\"\", files.file.originalFilename.slice(files.file.originalFilename.lastIndexOf(\".\")));\r\n                var oldPath = files.file.filepath;\r\n                var newPath = `./public/uploads/profile_images/${newFilename}`;\r\n                mv(oldPath, newPath, function(err) {\r\n                });\r\n                res.status(200).json({filename: newFilename})\r\n            }else{\r\n                res.status(200).json({error: \"Not Image file\"})\r\n            }\r\n        })\r\n    })\r\n    \r\n}","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\api\\upload\\item\\index.js",["909"],"import { IncomingForm } from 'formidable'\r\nimport { promises as fs } from 'fs'\r\n\r\nvar mv = require('mv');\r\n\r\n\r\nexport const config = {\r\n    api: {\r\n       bodyParser: false,\r\n    }\r\n};\r\n \r\nexport default async (req, res) => {\r\n    \r\n    const data = await new Promise((resolve, reject) => {\r\n       const form = new IncomingForm()\r\n        form.parse(req, (err, fields, files) => {\r\n            const type = files.file.mimetype;\r\n            if (err) return reject(err)\r\n\r\n            if(type.indexOf(\"image\") !== -1)\r\n            {\r\n                var newFilename = files.file.newFilename.concat(\"\", files.file.originalFilename.slice(files.file.originalFilename.lastIndexOf(\".\")));\r\n                var oldPath = files.file.filepath;\r\n                var newPath = `./public/uploads/item_images/${newFilename}`;\r\n                mv(oldPath, newPath, function(err) {\r\n                });\r\n                res.status(200).json({filename: newFilename})\r\n            }else{\r\n                res.status(200).json({error: \"Not Image file\"})\r\n            }\r\n        })\r\n    })\r\n    \r\n}","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\api\\upload\\item\\remove.js",["910"],"import { IncomingForm } from 'formidable'\r\nimport { promises as fs } from 'fs'\r\n\r\nvar mv = require('mv');\r\n\r\n\r\nexport const config = {\r\n    api: {\r\n       bodyParser: false,\r\n    }\r\n};\r\n \r\nexport default async (req, res) => {\r\n    \r\n    const data = await new Promise((resolve, reject) => {\r\n        const form = new IncomingForm()\r\n        form.parse(req, (err, fields, files) => {\r\n            var removePath = `./public/uploads/item_images/${fields.text}`;\r\n            if (err) return reject(err)          \r\n            fs.unlink(removePath, (err) => {\r\n                if(err){\r\n                    console.log(err)            \r\n                    res.status(200).json({error: \"Error exists\"})\r\n                }\r\n            })  \r\n            res.status(200).json({success: true})\r\n        })\r\n    })\r\n    \r\n}","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\api\\upload\\remove.js",["911"],"import { IncomingForm } from 'formidable'\r\nimport { promises as fs } from 'fs'\r\n\r\nvar mv = require('mv');\r\n\r\n\r\nexport const config = {\r\n    api: {\r\n       bodyParser: false,\r\n    }\r\n};\r\n \r\nexport default async (req, res) => {\r\n    \r\n    const data = await new Promise((resolve, reject) => {\r\n        const form = new IncomingForm()\r\n        form.parse(req, (err, fields, files) => {\r\n            var removePath = `./public/uploads/profile_images/${fields.text}`;\r\n            if (err) return reject(err)          \r\n            fs.unlink(removePath, (err) => {\r\n                if(err){\r\n                    console.log(err)            \r\n                    res.status(200).json({error: \"Error exists\"})\r\n                }\r\n            })  \r\n            res.status(200).json({success: true})\r\n        })\r\n    })\r\n    \r\n}","F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\_app.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\_document.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\chart\\index.tsx",["912","913"],"import React from 'react'\r\nimport { Portlet, Table, Form, Avatar, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Accounting_Chart_Active, Admin_Accounting_Chart_Delete, Admin_Accounting_Chart_GetAll} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst ChartAccountComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [size, setSize] = React.useState(10)\r\n    const [accounts, setAccounts] = React.useState([])\r\n    // const [search_staff, setSearch_staff] = React.useState('')\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Accounting_Chart_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setAccounts(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Accounting_Chart_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'That staff has been deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const change = async (e: React.ChangeEvent<HTMLInputElement>, id: any) => {\r\n        const active = {active : e.target.checked}\r\n        await axios.put(Admin_Accounting_Chart_Active + `/${id}`, active, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const handle_parent = (data: { name: any; }) => {\r\n        if(!isEmpty(data)){return data.name} \r\n        return \"\"\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={2}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/accounting/chart/new')}> New One </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='size_id' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={7}></Col>\r\n                    <Col md={2}>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Parent Account</th>\r\n                            <th scope=\"col\">Type</th>\r\n                            <th scope=\"col\">Detail Type</th>\r\n                            <th scope=\"col\">Primary Balance</th>\r\n                            <th scope=\"col\">Bank Balance</th>\r\n                            <th scope=\"col\">Active</th>\r\n                            <th scope=\"col\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            accounts.map((account: any) => (\r\n                                <tr key={account._id}>\r\n                                    <td>\r\n                                        {account.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        {handle_parent(account.parent_account)}\r\n                                    </td>\r\n                                    <td>\r\n                                        {account.account_type}\r\n                                    </td>\r\n                                    <td>\r\n                                        {account.account_type_detail}\r\n                                    </td>\r\n                                    <td>\r\n                                        {account.balance}\r\n                                    </td>\r\n                                    <td>\r\n                                        {account.bank_balance}\r\n                                    </td>\r\n                                    <td>\r\n                                        <Form.Switch id={account._id} onChange={(e) => change(e, account._id)}  defaultChecked={account.active} />\r\n                                    </td>\r\n                                    <td>\r\n                                        <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/accounting/chart/[id]', query: {id: account._id}})} pill size='sm'>\r\n                                            view\r\n                                        </Button>\r\n                                        <Swal7 id = {account._id}/>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ChartAccountComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\chart\\new.tsx",["914"],"import { Col, Portlet, Nav, Row, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport Select from 'react-select'\r\nimport { Admin_Accounting_Chart_ADD, Admin_Accounting_Chart_GetAll} from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst NewOne = () => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [account_type, setAccount_type] = React.useState('')\r\n    const [account_type_detail, setAccount_type_detail] = React.useState('')\r\n    const [name, setName] = React.useState('')\r\n    const [description, setDescription] = React.useState('')\r\n    const [parent_account, setParent_account] = React.useState()\r\n    const [balance, setBalance] = React.useState(0)\r\n    const [balance_as_of, setBalance_as_of] = React.useState<Date>()\r\n\r\n    const [newOne, setNewOne] = React.useState({})\r\n    \r\n    interface Errors {\r\n        account_type: string,\r\n        account_type_detail : string,\r\n        account: string,\r\n        name: string\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({account: '', account_type: '', account_type_detail: '', name: ''})\r\n    \r\n    interface Account {\r\n        value: string,\r\n        label : string\r\n    }\r\n    const [accounts, setAccounts] = React.useState<Account[]>([])\r\n\r\n    const [selectedOptions, setSelectedOptions] = React.useState();\r\n\r\n    const danger = {color: 'red'}\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Accounting_Chart_GetAll + `/1/0`, {headers})\r\n        .then(res => {\r\n            let account = []\r\n            for(let i = 0; i < res.data.all.length; i++)\r\n            {\r\n                account.push({value: res.data.all[i]._id, label: res.data.all[i].name})\r\n            }\r\n            setAccounts(account)\r\n        })\r\n        .catch(err => {\r\n            let error: Errors = {\r\n                account: '',\r\n                account_type: '',\r\n                account_type_detail: '',\r\n                name: ''\r\n            }\r\n            !isEmpty(err.response.data.account) ? error.account = err.response.data.account : ''\r\n            setErrors(error)\r\n        })\r\n    }, [])\r\n    \r\n    React.useEffect(() => {\r\n        setNewOne({account_type,account_type_detail,name,description,balance,balance_as_of,parent_account})\r\n    }, [account_type,account_type_detail,name,description,balance,balance_as_of,parent_account])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success'\r\n        })\r\n    }\r\n\r\n    function handleSelect(data: any) {\r\n        setParent_account(data.value)\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.post(Admin_Accounting_Chart_ADD, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({account: '', account_type: '', account_type_detail: '', name: ''})\r\n            })\r\n            .catch(err => {\r\n                let error: Errors = {\r\n                    account_type: '',\r\n                    account_type_detail: '',\r\n                    account: '',\r\n                    name: ''\r\n                }\r\n                console.log(err)\r\n                !isEmpty(err.response.data.account_type) ? error.account_type = err.response.data.account_type : ''\r\n                !isEmpty(err.response.data.account_type_detail)? error.account_type_detail = err.response.data.account_type_detail : ''\r\n                !isEmpty(err.response.data.name)? error.name = err.response.data.name : ''\r\n                setErrors(error)\r\n            })\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <h4>New Account</h4>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <div className=\"d-grid gap-3\">\r\n                            <Form.Group controlId=\"accounttypeID\">\r\n                                <Form.Label>* Account type</Form.Label>\r\n                                <Form.Control onChange={(e) => setAccount_type(e.target.value)} type=\"text\" size = 'lg'/>\r\n                                <p style={danger}>{errors.account_type}</p>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"accounttypedetailID\">\r\n                                <Form.Label>* Account type detail</Form.Label>\r\n                                <Form.Control onChange={(e) => setAccount_type_detail(e.target.value)} type=\"text\"  size = 'lg'/>\r\n                                <p style={danger}>{errors.account_type_detail}</p>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"nameID\">\r\n                                <Form.Label>* Name</Form.Label>\r\n                                <Form.Control onChange={(e) => setName(e.target.value)} type=\"text\"  size = 'lg'/>\r\n                                <p style={danger}>{errors.name}</p>\r\n                            </Form.Group>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Form.Group controlId=\"balanceID\">\r\n                                        <Form.Label> Balance</Form.Label>\r\n                                        <Form.Control onChange={(e) => setBalance(parseInt(e.target.value))} type=\"number\"  size = 'lg'/>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Form.Group controlId=\"balanceasofID\">\r\n                                        <Form.Label> as of</Form.Label>\r\n                                        <Form.Control onChange={(e) => setBalance_as_of(new Date(e.target.value))} type=\"date\"  size = 'lg'/>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                            <div className=\"dropdown-container\">\r\n                                <Select\r\n                                    options={accounts}\r\n                                    placeholder=\"Select Parent Account\"\r\n                                    value={selectedOptions}\r\n                                    onChange={handleSelect}\r\n                                    isSearchable={true}\r\n                                    instanceId=\"unique-account-id\"\r\n                                />\r\n                            </div>\r\n                            <Form.Group controlId=\"descriptionID\">\r\n                                <Form.Label>* Description</Form.Label>\r\n                                <Form.Control onChange={(e) => setDescription(e.target.value)} as=\"textarea\" rows={3}/>\r\n                            </Form.Group>\r\n                        </div>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer bordered align=\"end\">\r\n                        <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default NewOne\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\chart\\view.tsx",["915","916"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport Select from 'react-select'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Accounting_Chart_GetOne, Admin_Accounting_Chart_GetAll, Admin_Accounting_Chart_Edit} from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const id = props.id\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const [newOne, setNewOne]= React.useState({})\r\n    const danger = {color : \"red\"}\r\n    \r\n    const [account_type, setAccount_type] = React.useState('')\r\n    const [account_type_detail, setAccount_type_detail] = React.useState('')\r\n    const [name, setName] = React.useState('')\r\n    const [description, setDescription] = React.useState('')\r\n    const [parent_account, setParent_account] = React.useState()\r\n    const [balance, setBalance] = React.useState(0)\r\n    const [balance_as_of, setBalance_as_of] = React.useState<Date>()\r\n    \r\n    interface Errors {\r\n        account_type: string,\r\n        account_type_detail : string,\r\n        account: string,\r\n        name: string\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({account: '', account_type: '', account_type_detail: '', name: ''})\r\n    \r\n    interface Account {\r\n        value: string,\r\n        label : string\r\n    }\r\n    const [accounts, setAccounts] = React.useState<Account[]>([])\r\n\r\n    const [selectedOptions, setSelectedOptions] = React.useState();\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Accounting_Chart_GetOne + `/${id}`, {headers})\r\n            .then(res => {\r\n                setName(res.data.name)\r\n                setAccount_type(res.data.account_type)\r\n                setParent_account(res.data.parent_account)\r\n                setAccount_type_detail(res.data.account_type_detail)\r\n                setBalance_as_of(res.data.balance_as_of)\r\n                setBalance(res.data.balance)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }, [])\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Accounting_Chart_GetAll + `/1/0`, {headers})\r\n        .then(res => {\r\n            let account = []\r\n            for(let i = 0; i < res.data.all.length; i++)\r\n            {\r\n                account.push({value: res.data.all[i]._id, label: res.data.all[i].name})\r\n            }\r\n            setAccounts(account)\r\n        })\r\n        .catch(err => {\r\n            let error: Errors = {\r\n                account: '',\r\n                account_type: '',\r\n                account_type_detail: '',\r\n                name: ''\r\n            }\r\n            !isEmpty(err.response.data.account) ? error.account = err.response.data.account : ''\r\n            setErrors(error)\r\n        })\r\n    }, [])\r\n    \r\n    React.useEffect(() => {\r\n        setNewOne({account_type,account_type_detail,name,description,balance,balance_as_of,parent_account})\r\n    }, [account_type,account_type_detail,name,description,balance,balance_as_of,parent_account])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success'\r\n        })\r\n    }\r\n\r\n    function handleSelect(data: any) {\r\n        setParent_account(data.value)\r\n    }\r\n\r\n    function handleValue(data: any) {\r\n        if(isNaN(data)){return 0}\r\n        return data\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        await axios.put(Admin_Accounting_Chart_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({account: '', account_type: '', account_type_detail: '', name: ''})\r\n            })\r\n            .catch(err => {\r\n                let error: Errors = {\r\n                    account_type: '',\r\n                    account_type_detail: '',\r\n                    account: '',\r\n                    name: ''\r\n                }\r\n                console.log(err)\r\n                !isEmpty(err.response.data.account_type) ? error.account_type = err.response.data.account_type : ''\r\n                !isEmpty(err.response.data.account_type_detail)? error.account_type_detail = err.response.data.account_type_detail : ''\r\n                !isEmpty(err.response.data.name)? error.name = err.response.data.name : ''\r\n                setErrors(error)\r\n            })\r\n    }\r\n\r\n    const handleBalance_as_of = (data: any) => {\r\n        const temp = String(data).slice(0, 9)\r\n        return temp\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Body>\r\n                        <div className=\"d-grid gap-3\">\r\n                            <Form.Group controlId=\"accounttypeID\">\r\n                                <Form.Label>* Account type</Form.Label>\r\n                                <Form.Control onChange={(e) => setAccount_type(e.target.value)} defaultValue={account_type} type=\"text\" size = 'lg'/>\r\n                                <p style={danger}>{errors.account_type}</p>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"accounttypedetailID\">\r\n                                <Form.Label>* Account type detail</Form.Label>\r\n                                <Form.Control onChange={(e) => setAccount_type_detail(e.target.value)} defaultValue={account_type_detail} type=\"text\"  size = 'lg'/>\r\n                                <p style={danger}>{errors.account_type_detail}</p>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"nameID\">\r\n                                <Form.Label>* Name</Form.Label>\r\n                                <Form.Control onChange={(e) => setName(e.target.value)} defaultValue={name} type=\"text\" size = 'lg'/>\r\n                            </Form.Group>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Form.Group controlId=\"balanceID\">\r\n                                        <Form.Label> Balance</Form.Label>\r\n                                        <Form.Control onChange={(e) => setBalance(parseInt(e.target.value))} value={handleValue(balance)} type=\"Number\"  size = 'lg'/>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Form.Group controlId=\"balanceasofID\">\r\n                                        <Form.Label> as of : {handleBalance_as_of(balance_as_of)}</Form.Label>\r\n                                        <Form.Control onChange={(e) => setBalance_as_of(new Date(e.target.value))} type=\"date\"  size = 'lg'/>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                            <div className=\"dropdown-container\">\r\n                                <Select\r\n                                    options={accounts}\r\n                                    placeholder=\"Select Parent Account\"\r\n                                    value={selectedOptions}\r\n                                    onChange={handleSelect}\r\n                                    isSearchable={true}\r\n                                    instanceId=\"unique-account-id\"\r\n                                />\r\n                            </div>\r\n                            <Form.Group controlId=\"descriptionID\">\r\n                                <Form.Label>* Description</Form.Label>\r\n                                <Form.Control onChange={(e) => setDescription(e.target.value)} defaultValue={description} as=\"textarea\" rows={3}/>\r\n                            </Form.Group>\r\n                        </div>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer bordered align=\"end\">\r\n                        <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\journalEntry\\index.tsx",["917","918"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Accounting_JournalEntry_GetAll, Admin_Accounting_JournalEntry_Delete} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst GetAllComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [journalEntries, setJournalEntries] = React.useState([])\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(1)\r\n\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Accounting_JournalEntry_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setJournalEntries(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Accounting_JournalEntry_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/accounting/journalEntry/new')}> New One </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={6}></Col>\r\n                    <Col md={2}>\r\n                        {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                            {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                            {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                        {/* </FloatingLabel> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">* Journal date</th>\r\n                            <th scope=\"col\">* Number-Description</th>\r\n                            <th scope=\"col\">Amount</th>\r\n                            <th scope=\"col\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            journalEntries.map((journalEntry: any) => (\r\n                                <tr key={journalEntry._id}>\r\n                                    <td>\r\n                                        {journalEntry.journal_date}\r\n                                    </td>\r\n                                    <td>\r\n                                        {journalEntry.number} {journalEntry.description}\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            {journalEntry.amount}\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/accounting/journalEntry/[id]', query: {id: journalEntry._id}})} pill size='sm'>\r\n                                            view\r\n                                        </Button>\r\n                                        <Swal7 id = {journalEntry._id}/>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetAllComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\journalEntry\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\journalEntry\\view.tsx",["919"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport {Admin_Accounting_JournalEntry_GetOne, Admin_Accounting_JournalEntry_Edit} from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    interface Errors {\r\n        journal_entries: any,\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({journal_entries: ''})\r\n    const [newOne, setNewOne]= React.useState({})\r\n\r\n    const [number, setNumber] = React.useState('')\r\n    const [journal_date, setJournal_date] = React.useState<Date>()\r\n    const [amount, setAmount] = React.useState(0)\r\n    const [description, setDescription] = React.useState('')\r\n\r\n    const danger = {color : \"red\"}\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Accounting_JournalEntry_GetOne + `/${id}`, {headers})\r\n            .then(res => {\r\n                setNumber(res.data.number)\r\n                setJournal_date(res.data.journal_date)\r\n                setAmount(res.data.amount)\r\n                setDescription(res.data.description)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setNewOne({number, journal_date, amount, description})\r\n    }, [number, journal_date, amount, description])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.put(Admin_Accounting_JournalEntry_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const handlejournal_date = (data: any) => {\r\n        const temp = String(data).slice(0, 9)\r\n        return temp\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <h4>* New One</h4>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <Form.Group controlId=\"numberID\">\r\n                            <Form.Label>* Number</Form.Label>\r\n                            <Form.Control onChange={(e) => setNumber(e.target.value)} defaultValue={number} type=\"text\" size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"journalDateID\">\r\n                            <Form.Label>* Journal Date : {handlejournal_date(journal_date)}</Form.Label>\r\n                            <Form.Control onChange={(e) => setJournal_date(new Date(e.target.value))} type=\"date\" size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"amountID\">\r\n                            <Form.Label>* Amount</Form.Label>\r\n                            <Form.Control onChange={(e) => setAmount(parseInt(e.target.value))} value={amount} type=\"Number\" size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"descriptionID\">\r\n                            <Form.Label>* Description</Form.Label>\r\n                            <Form.Control onChange={(e) => setDescription(e.target.value)} defaultValue={description} type=\"text\" size = 'lg'/>\r\n                        </Form.Group>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\transaction\\banking\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\transaction\\index.tsx",["920","921"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button, Accordion } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Accounting_Transaction_Bank_GetAll, Admin_Accounting_Transaction_Bank_Delete} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBank } from '@fortawesome/free-solid-svg-icons';\r\nimport { faSalesforce } from '@fortawesome/free-brands-svg-icons';\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst GetAllComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(1)\r\n\r\n    const [deleteBank, setDeleteBank] = React.useState()\r\n    const [deleteBankSucess, setDeleteBankSucess] = React.useState(0.001)\r\n\r\n    const [banks, setBanks] = React.useState([])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Accounting_Transaction_Bank_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setBanks(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deleteBankSucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteBank))\r\n        {\r\n            axios.delete(Admin_Accounting_Transaction_Bank_Delete + `/${deleteBank}`, {headers})\r\n                .then(res => {\r\n                    setDeleteBankSucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteBank])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const SwalBank = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteBank(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col>\r\n                <Accordion defaultActiveKey=\"0\">\r\n                    <Accordion.Item eventKey=\"0\">\r\n                        <Accordion.Header icon={() => <FontAwesomeIcon icon={faBank} />}>\r\n                            Banking\r\n                        </Accordion.Header>\r\n                        <Accordion.Body>\r\n                            <Portlet>\r\n                                <Portlet.Body className=\"pb-0\">\r\n                                    <Row>\r\n                                        <Col md={3}>\r\n                                            <Button variant='primary' onClick={() => router.push('/admin/accounting/transaction/banking/new')}> New </Button>\r\n                                        </Col>\r\n                                        <Col md={1}>\r\n                                            <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                                                <option value=\"10\">10</option>\r\n                                                <option value=\"25\">25</option>\r\n                                                <option value=\"50\">50</option>\r\n                                                <option value=\"100\">100</option>\r\n                                                <option value=\"0\">All</option>\r\n                                            </Form.Select>\r\n                                        </Col>\r\n                                        <Col md={6}></Col>\r\n                                        <Col md={2}>\r\n                                            {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                                                {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                                                {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                                            {/* </FloatingLabel> */}\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            <p></p>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {/* BEGIN Table */}\r\n                                    <Table responsive striped hover>\r\n                                        <thead className=\"table-primary\">\r\n                                            <tr>\r\n                                                <th scope=\"col\">Date</th>\r\n                                                <th scope=\"col\">Withdrawals</th>\r\n                                                <th scope=\"col\">Deposits</th>\r\n                                                <th scope=\"col\">Payee</th>\r\n                                                <th scope=\"col\">Description</th>\r\n                                                <th scope=\"col\">Status</th>\r\n                                                <th scope=\"col\">Mapping</th>\r\n                                                <th scope=\"col\">Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {\r\n                                                banks.map((bank: any) => (\r\n                                                    <tr key={bank._id}>\r\n                                                        <td>\r\n                                                            {bank.date}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {bank.withdrawals}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {bank.deposits}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {bank.payee}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {bank.description}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {bank.status}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {bank.mapping}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {/* <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/accounting/transaction/banking/[id]', query: {id: bank._id}})} pill size='sm'>\r\n                                                                view\r\n                                                            </Button> */}\r\n                                                            <SwalBank id = {bank._id}/>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                ))\r\n                                            }\r\n                                        </tbody>\r\n                                    </Table>\r\n                                    {/* END Table */}\r\n                                </Portlet.Body>\r\n                                <Portlet.Footer>\r\n                                    <Row>\r\n                                        <Col md={9}>\r\n                                        </Col>\r\n                                        <Col md={3}>    \r\n                                            <Pagination pagination = {pagination}/>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Portlet.Footer>\r\n                            </Portlet>\r\n                        </Accordion.Body>\r\n                    </Accordion.Item>\r\n                    <Accordion.Item eventKey=\"1\">\r\n                        <Accordion.Header icon={() => <FontAwesomeIcon icon={faSalesforce} />}>\r\n                            sales\r\n                        </Accordion.Header>\r\n                        <Accordion.Body>\r\n                            <strong>Lorem ipsum dolor sit amet</strong>, consectetur adipiscing elit, sed do eiusmod tempor\r\n                            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\r\n                            ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\r\n                            voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\r\n                            proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n                        </Accordion.Body>\r\n                    </Accordion.Item>\r\n                </Accordion>            \r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetAllComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\transfer\\index.tsx",["922","923"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Accounting_Transfer_GetAll, Admin_Accounting_Transfer_Delete} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst GetAllComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [transfers, setTransfers] = React.useState([])\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(1)\r\n\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Accounting_Transfer_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setTransfers(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Accounting_Transfer_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/accounting/transfer/new')}> New One </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={6}></Col>\r\n                    <Col md={2}>\r\n                        {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                            {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                            {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                        {/* </FloatingLabel> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\"> Transfer funds from</th>\r\n                            <th scope=\"col\"> Transfer funds to</th>\r\n                            <th scope=\"col\"> Transfer amount</th>\r\n                            <th scope=\"col\"> Date</th>\r\n                            <th scope=\"col\"> Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            transfers.map((transfer: any) => (\r\n                                <tr key={transfer._id}>\r\n                                    <td>\r\n                                        {transfer.transfer_funds_from}\r\n                                    </td>\r\n                                    <td>\r\n                                        {transfer.transfer_funds_to}\r\n                                    </td>\r\n                                    <td>\r\n                                        {transfer.transfer_amount}\r\n                                    </td>\r\n                                    <td>\r\n                                        {transfer.date}\r\n                                    </td>\r\n                                    <td>\r\n                                        <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/accounting/transfer/[id]', query: {id: transfer._id}})} pill size='sm'>\r\n                                                view\r\n                                            </Button>\r\n                                        <Swal7 id = {transfer._id}/>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetAllComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\transfer\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\accounting\\transfer\\view.tsx",["924"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { desc } from 'react-dom-factories'\r\nimport {Admin_Accounting_Transfer_GetOne, Admin_Accounting_Transfer_Edit} from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    interface Errors {\r\n        transfer_funds_from: any,\r\n        transfer_funds_to: any\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({transfer_funds_from: '', transfer_funds_to: ''})\r\n    const [newOne, setNewOne]= React.useState({})\r\n\r\n    const [transfer_funds_from, setTransfer_funds_from] = React.useState('')\r\n    const [transfer_funds_to, setTransfer_funds_to] = React.useState('')\r\n    const [transfer_amount, setTransfer_amount] = React.useState(0)\r\n    const [date, setDate] = React.useState<Date>()\r\n    const [description, setDescription] = React.useState('')\r\n\r\n    const danger = {color : \"red\"}\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Accounting_Transfer_GetOne + `/${id}`, {headers})\r\n            .then(res => {\r\n                setTransfer_funds_from(res.data.transfer_funds_from)\r\n                setTransfer_funds_to(res.data.transfer_funds_to)\r\n                setTransfer_amount(res.data.transfer_amount)\r\n                setDate(res.data.date)\r\n                setDescription(res.data.description)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setNewOne({transfer_funds_from, transfer_funds_to, transfer_amount, date, description})\r\n    }, [transfer_funds_from, transfer_funds_to, transfer_amount, date, description])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.put(Admin_Accounting_Transfer_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({transfer_funds_from: '', transfer_funds_to: ''})\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n    \r\n    const handleDate = (data: any) => {\r\n        const temp = String(data).slice(0, 9)\r\n        return temp\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Body>\r\n                        <Form.Group controlId=\"transferfundsfromID\">\r\n                            <Form.Label>* Transfer funds from</Form.Label>\r\n                            <Form.Control onChange={(e) => setTransfer_funds_from(e.target.value)} defaultValue={transfer_funds_from} type=\"text\" size = 'lg'/>\r\n                            <p style={danger}>{errors.transfer_funds_from}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"transferfundstoID\">\r\n                            <Form.Label>* Transfer funds to</Form.Label>\r\n                            <Form.Control onChange={(e) => setTransfer_funds_to(e.target.value)} defaultValue={transfer_funds_to} type=\"text\" size = 'lg'/>\r\n                            <p style={danger}>{errors.transfer_funds_to}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"amountID\">\r\n                            <Form.Label>* Transfer Amount</Form.Label>\r\n                            <Form.Control onChange={(e) => setTransfer_amount(parseInt(e.target.value))} value={transfer_amount} type=\"Number\" size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"dateID\">\r\n                            <Form.Label>* Date : {handleDate(date)}</Form.Label>\r\n                            <Form.Control onChange={(e) => setDate(new Date(e.target.value))}  type=\"date\" size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"descriptionID\">\r\n                            <Form.Label>* Description</Form.Label>\r\n                            <Form.Control onChange={(e) => setDescription(e.target.value)} defaultValue={description} as=\"textarea\" rows={3}/>\r\n                        </Form.Group>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\contact\\contact.tsx",["925","926","927"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup, ListGroup, Modal} from '@blueupcode/components'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport axios from 'axios'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport Pagination from 'utils/Pagination'\r\nimport React from 'react'\r\nimport { Eye} from 'react-feather'\r\nimport { Admin_Contact_ADD, Admin_Contact_Active, Admin_Contact_Delete, Admin_Contact_Edit, Admin_Contact_GetOne, Admin_Contact_GetSome } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst Layout = (props: any) => {\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    const client = id\r\n    interface Errors {\r\n        email: any,\r\n        password: any,\r\n        firstname: any,\r\n        lastname: any,\r\n        phonenumber: any,\r\n        contact: any\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({email: '',password: '',firstname: '',lastname: '',phonenumber: '', contact: ''})\r\n    const danger = {color: 'red'}\r\n\r\n    const [contacts, setContacts] = React.useState([])\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n    const [addsuccess, setAddsuccess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Contact_GetSome + `/${activeLinkNumber}/${size}/${id}`, {headers})\r\n            .then(res => {\r\n                setContacts(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess, addsuccess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Contact_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n\r\n    const changeActive = async (e: any, id: any) => {\r\n        const active = {active : e.target.checked}\r\n        await axios.put(Admin_Contact_Active + `/${id}`, active, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const NewContact = () => {\r\n        const [show, setShow] = React.useState(false)\r\n\r\n        const [email, setEmail] = React.useState('')\r\n        const [firstname, setFirstname] = React.useState('')\r\n        const [lastname, setLastname] = React.useState('')\r\n        const [phonenumber, setPhonenumber] = React.useState('')\r\n        const [direction, setDirection] = React.useState('none')\r\n        const [password, setPassword] = React.useState('')\r\n        const [isprimary, setIsprimary] = React.useState(false)\r\n        const [newOne, setNewOne] = React.useState({})\r\n        \r\n        const [passwordtype, setPasswordtype] = React.useState('password')\r\n        const [eye, setEye] = React.useState(true)\r\n        \r\n        const handleHide = () => setShow(false)\r\n        const handleShow = () => setShow(true)\r\n\r\n        React.useEffect(() => {\r\n            setNewOne({email,firstname,lastname,phonenumber,client,isprimary,direction,password})\r\n        }, [email,firstname,lastname,phonenumber,direction,isprimary,password])\r\n        \r\n        React.useEffect(() => {\r\n            if (eye) {setPasswordtype('password') }\r\n            else {setPasswordtype('text')}\r\n        }, [eye])\r\n        \r\n\r\n        const handleADD = async () => {\r\n            await axios.post(Admin_Contact_ADD, newOne, {headers})\r\n                .then(res => {\r\n                    successAlert()\r\n                    setErrors({email: '',password: '',firstname: '',lastname: '',phonenumber: '', contact: ''})\r\n                    setAddsuccess(Math.random())\r\n                })\r\n                .catch(err => {\r\n                    let error : Errors = {email: '',password: '',firstname: '',lastname: '',phonenumber: '', contact: ''}\r\n                    !isEmpty(err.response.data.email) ? error.email = err.response.data.email : ''\r\n                    !isEmpty(err.response.data.password)? error.password = err.response.data.password : ''\r\n                    !isEmpty(err.response.data.firstname) ? error.firstname = err.response.data.firstname : ''\r\n                    !isEmpty(err.response.data.lastname) ? error.lastname = err.response.data.lastname : ''\r\n                    !isEmpty(err.response.data.phonenumber) ? error.phonenumber = err.response.data.phonenumber : ''\r\n                    setErrors(error)\r\n                })\r\n        }\r\n\r\n        const change = (e: any) => {\r\n            setIsprimary(e.target.checked) \r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Button variant=\"primary\" onClick={handleShow}>\r\n                    + New Contact\r\n                </Button>\r\n                {/* BEGIN Modal */}\r\n                <Modal scrollable show={show} onHide={handleHide}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>New Contact</Modal.Title>\r\n                        <Button icon variant=\"label-danger\" onClick={handleHide}>\r\n                            <FontAwesomeIcon icon={faTimes} />\r\n                        </Button>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form.Group controlId=\"emailID\">\r\n                            <Form.Label>*Email Address</Form.Label>\r\n                            <Form.Control onChange={(e) => setEmail(e.target.value)} type=\"email\" size = 'lg'/>\r\n                            <p style={danger}>{errors.email}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"firstnameID\">\r\n                            <Form.Label>*First Name</Form.Label>\r\n                            <Form.Control onChange={(e) => setFirstname(e.target.value)} type=\"text\"  size = 'lg'/>\r\n                            <p style={danger}>{errors.firstname}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"lastnameID\">\r\n                            <Form.Label>*Last Name</Form.Label>\r\n                            <Form.Control onChange={(e) => setLastname(e.target.value)} type=\"text\"  size = 'lg'/>\r\n                            <p style={danger}>{errors.lastname}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"phonenumberID\">\r\n                            <Form.Label>*Phone Number</Form.Label>\r\n                            <Form.Control onChange={(e) => setPhonenumber(e.target.value)} type=\"text\" size = 'lg'/>\r\n                        </Form.Group>\r\n                        <p></p>\r\n                        <Form.Group controlId=\"directionID\">\r\n                            <Form.Label>*Direction</Form.Label>\r\n                            <Form.Select onChange={(e) => setDirection(e.target.value)} defaultValue=\"none\" size=\"lg\">\r\n                                <option value=\"none\">System Default</option>\r\n                                <option value=\"ltr\">LTR</option>\r\n                                <option value=\"rtl\">RTL</option>\r\n                            </Form.Select>\r\n                        </Form.Group>\r\n                        <p></p>\r\n                        <Form.Group controlId=\"passwordID\">\r\n                            <Form.Label>*Password</Form.Label>\r\n                            <InputGroup>\r\n                                <Form.Control type={passwordtype} onChange={(e) => setPassword(e.target.value)} size = 'lg'/>\r\n                                <Button variant=\"outline-info\" onClick={()=> setEye(!eye)} size = 'lg' icon>\r\n                                    <Eye />\r\n                                </Button>\r\n                            </InputGroup>\r\n                            <p style={danger}>{errors.password}</p>\r\n                        </Form.Group>\r\n                        <Form.Check \r\n                            type=\"checkbox\" \r\n                            label= \"Primary Contact\"\r\n                            defaultChecked={isprimary}\r\n                            onChange={(e) => change(e)}\r\n                        />\r\n                    </Modal.Body>\r\n                    <Modal.Footer>                    \r\n                        <Button onClick={handleADD} type='submit' variant=\"primary\">Submit</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                {/* END Modal */}\r\n            </>\r\n        )\r\n    }\r\n    const ViewContact = (props: any) => {\r\n        let id = props.id\r\n\r\n        let [show, setShow] = React.useState(false)\r\n        \r\n        let [email, setEmail] = React.useState('')\r\n        let [firstname, setFirstname] = React.useState('')\r\n        let [lastname, setLastname] = React.useState('')\r\n        let [phonenumber, setPhonenumber] = React.useState('')\r\n        let [direction, setDirection] = React.useState('none')\r\n        // let [password, setPassword] = React.useState('')\r\n        let [isprimary, setIsprimary] = React.useState(false)\r\n        let [newOne, setNewOne] = React.useState({})\r\n        \r\n        // let [passwordtype, setPasswordtype] = React.useState('password')\r\n        // let [eye, setEye] = React.useState(true)\r\n        \r\n        const handleHide = () => setShow(false)\r\n        const handleShow = () => setShow(true)\r\n        \r\n        React.useEffect(() => {\r\n            let isMounted = true;\r\n            async function fetchData() {\r\n                axios.get(Admin_Contact_GetOne + `/${id}`, {headers})\r\n                .then(res => {\r\n                    setEmail(res.data.email)\r\n                    setFirstname(res.data.firstname)\r\n                    setLastname(res.data.lastname)\r\n                    setPhonenumber(res.data.phonenumber)\r\n                    setDirection(res.data.direction)\r\n                    setIsprimary(res.data.isprimary)\r\n                })\r\n                .catch(err => {\r\n                    let error : Errors = {email: '',password: '',firstname: '',lastname: '',phonenumber: '', contact: ''}\r\n                    if(err.response !== undefined){                        \r\n                        error.contact = err.response.data.contact\r\n                        setErrors(error);\r\n                    }\r\n                })\r\n            }\r\n        \r\n            fetchData();\r\n        \r\n            // Cleanup function\r\n            return () => {\r\n                isMounted = false;\r\n            };\r\n        }, [])\r\n\r\n        React.useEffect(() => {\r\n            setNewOne({email,firstname,lastname,phonenumber,client,isprimary,direction})\r\n        }, [email,firstname,lastname,phonenumber,direction,isprimary])\r\n        \r\n        // React.useEffect(() => {\r\n        //     if (eye) {setPasswordtype('password') }\r\n        //     else {setPasswordtype('text')}\r\n        // }, [eye])\r\n\r\n        const handleEdit = async () => {\r\n            await axios.put(Admin_Contact_Edit + `/${id}`, newOne, {headers})\r\n                .then(res => {\r\n                    successAlert()\r\n                    setErrors({email: '',password: '',firstname: '',lastname: '',phonenumber: '', contact: ''})\r\n                    setAddsuccess(Math.random())\r\n                })\r\n                .catch(err => {\r\n                    let error : Errors = {email: '',password: '',firstname: '',lastname: '',phonenumber: '', contact: ''}\r\n                    !isEmpty(err.response.data.email) ? error.email = err.response.data.email : ''\r\n                    // !isEmpty(err.response.data.password)? error.password = err.response.data.password : ''\r\n                    !isEmpty(err.response.data.firstname) ? error.firstname = err.response.data.firstname : ''\r\n                    !isEmpty(err.response.data.lastname) ? error.lastname = err.response.data.lastname : ''\r\n                    !isEmpty(err.response.data.phonenumber) ? error.phonenumber = err.response.data.phonenumber : ''\r\n                    setErrors(error)\r\n                })\r\n        }\r\n\r\n        const change = (e: any) => {\r\n            setIsprimary(e.target.checked) \r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Button variant=\"text-info\" onClick={handleShow}>\r\n                    View\r\n                </Button>\r\n                {/* BEGIN Modal */}\r\n                <Modal scrollable show={show} onHide={handleHide}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>{id}</Modal.Title>\r\n                        <Button icon variant=\"label-danger\" onClick={handleHide}>\r\n                            <FontAwesomeIcon icon={faTimes} />\r\n                        </Button>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form.Group controlId=\"emailID\">\r\n                            <Form.Label>*Email Address</Form.Label>\r\n                            <Form.Control onChange={(e) => setEmail(e.target.value)} defaultValue={email} type=\"email\" size = 'lg'/>\r\n                            <p style={danger}>{errors.email}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"firstnameID\">\r\n                            <Form.Label>*First Name</Form.Label>\r\n                            <Form.Control onChange={(e) => setFirstname(e.target.value)} defaultValue={firstname} type=\"text\"  size = 'lg'/>\r\n                            <p style={danger}>{errors.firstname}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"lastnameID\">\r\n                            <Form.Label>*Last Name</Form.Label>\r\n                            <Form.Control onChange={(e) => setLastname(e.target.value)} defaultValue={lastname} type=\"text\"  size = 'lg'/>\r\n                            <p style={danger}>{errors.lastname}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"phonenumberID\">\r\n                            <Form.Label>*Phone Number</Form.Label>\r\n                            <Form.Control onChange={(e) => setPhonenumber(e.target.value)} defaultValue={phonenumber} type=\"text\" size = 'lg'/>\r\n                        </Form.Group>\r\n                        <p></p>\r\n                        <Form.Group controlId=\"directionID\">\r\n                            <Form.Label>*Direction</Form.Label>\r\n                            <Form.Select onChange={(e) => setDirection(e.target.value)} defaultValue=\"none\" size=\"lg\">\r\n                                <option value=\"none\">System Default</option>\r\n                                <option value=\"ltr\">LTR</option>\r\n                                <option value=\"rtl\">RTL</option>\r\n                            </Form.Select>\r\n                        </Form.Group>\r\n                        <p></p>\r\n                        {/* <Form.Group controlId=\"passwordID\">\r\n                            <Form.Label>*Password</Form.Label>\r\n                            <InputGroup>\r\n                                <Form.Control type={passwordtype} onChange={() => setPassword(passwordID.value)} size = 'lg'/>\r\n                                <Button variant=\"outline-info\" onClick={()=> setEye(!eye)} size = 'lg' icon>\r\n                                    <Eye />\r\n                                </Button>\r\n                            </InputGroup>\r\n                            <p style={danger}>{errors.password}</p>\r\n                        </Form.Group> */}\r\n                        <Form.Check \r\n                            type=\"checkbox\" \r\n                            label= \"Primary Contact\"\r\n                            defaultChecked={isprimary}\r\n                            onChange={(e) => change(e)}\r\n                        />\r\n                    </Modal.Body>\r\n                    <Modal.Footer>                    \r\n                        <Button onClick={handleEdit} type='submit' variant=\"primary\">Submit</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                {/* END Modal */}\r\n            </>\r\n        )\r\n    }\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Header>\r\n                <Portlet.Addon>        \r\n                    <NewContact />\r\n                </Portlet.Addon>\r\n            </Portlet.Header>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={2}>\r\n                        <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={8}></Col>\r\n                    <Col md={2}>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">Full Name</th>\r\n                            <th scope=\"col\">Email</th>\r\n                            <th scope=\"col\">Phone</th>\r\n                            <th scope=\"col\">Active</th>\r\n                            <th scope='col'>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            contacts.map((contact: any) => (\r\n                                <tr key={contact._id}>\r\n                                    <td>\r\n                                        {contact.firstname}{contact.lastname}\r\n                                    </td>\r\n                                    <td>\r\n                                        {contact.email}\r\n                                    </td>\r\n                                    <td>\r\n                                        {contact.phonenumber}\r\n                                    </td>\r\n                                    <td>\r\n                                        <Form.Switch id={contact._id} onChange={(e) => changeActive(e, contact._id)}  defaultChecked={contact.active} />\r\n                                    </td>\r\n                                    <td>\r\n                                        <ViewContact id = {contact._id} />\r\n                                        <Swal7 id = {contact._id}/>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\nexport default Layout\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\contact\\index.tsx",["928","929"],"import React from 'react'\r\nimport { Portlet, Table, Form, FloatingLabel, Avatar, Row, Col ,  Button } from '@blueupcode/components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport * as SolidIcon from '@fortawesome/free-solid-svg-icons'\r\nimport axios from 'axios'\r\nimport { faUser } from '@fortawesome/free-regular-svg-icons'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Contact_GetAll, Admin_Contact_Delete, Admin_Contact_Active} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst ContactComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [size, setSize] = React.useState(10)\r\n    const [contacts, setContacts] = React.useState([])\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n    const [deleteone, setDeleteone] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n    const [search, setSearch] = React.useState('')\r\n    const [sort, setSort] = React.useState(1)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Contact_GetAll + `/${activeLinkNumber}/${size}/search:${search}/sort:${sort}`, {headers})\r\n            .then(res => {\r\n                setContacts(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, search, activeLinkNumber, sort, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteone))\r\n        {\r\n            axios.delete(Admin_Contact_Delete + `/${deleteone}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteone])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteone(id.id)\r\n                        swal.fire('Deleted!', 'That staff has been deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const change = async (e: any, id: any) => {\r\n        const active = {active : e.target.checked}\r\n        await axios.put(Admin_Contact_Active + `/${id}`, active, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const handleclient = (data: any) => {\r\n        if(data !== null) {\r\n            return data.company\r\n        }\r\n        return ''\r\n    }\r\n    const handleLastLogin = (data: any) => {\r\n        if(data !== undefined) {\r\n            return data\r\n        }\r\n        return 'Never'\r\n    }\r\n\r\n    const handleSort = () => {\r\n        if(sort == -1){setSort(1)}\r\n        else{setSort(-1)}\r\n    }\r\n\r\n    const FontSort = (props: any) => {\r\n        if(props.icon == 1){return (<FontAwesomeIcon  icon={SolidIcon.faAngleUp}/>)}\r\n        else{return (<FontAwesomeIcon  icon={SolidIcon.faAngleDown}/>)}\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={1}>\r\n                        <Form.Select id='size_id' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={9}></Col>\r\n                    <Col md={2}>\r\n                        <FloatingLabel controlId=\"search_id\"  label=\"Search\">\r\n                            <Form.Control type=\"text\" onChange={(e) => setSearch(e.target.value)} placeholder=\"name\" size='lg'/>\r\n                        </FloatingLabel>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\" onClick={handleSort}>Full Name <FontSort icon = {sort}/></th>\r\n                            <th scope=\"col\">Email</th>\r\n                            <th scope=\"col\">Company</th>\r\n                            <th scope=\"col\">Phone</th>\r\n                            <th scope=\"col\">Last Login</th>\r\n                            <th scope=\"col\">Active</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            contacts.map((contact: any) => (\r\n                                <tr key={contact._id}>\r\n                                    <td>                                     \r\n                                        <Avatar display>\r\n                                            <FontAwesomeIcon icon={faUser} />\r\n                                        </Avatar>\r\n                                        {contact.firstname + ' ' + contact.lastname}\r\n                                        <div>\r\n                                            <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/clients/contact/[id]', query: {id: contact._id}})} pill size='sm'>\r\n                                                view\r\n                                            </Button>\r\n                                            <Swal7 id = {contact._id}/>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        {contact.email}\r\n                                    </td>\r\n                                    <td>\r\n                                        {handleclient(contact.client)}\r\n                                    </td>\r\n                                    <td>\r\n                                        {contact.phonenumber}\r\n                                    </td>\r\n                                    <td>\r\n                                        {handleLastLogin(contact.last_login)}\r\n                                    </td>\r\n                                    <td>\r\n                                        <Form.Switch id={contact._id} onChange={(e) => change(e, contact._id)}  defaultChecked={contact.active} />\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ContactComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\contact\\view.tsx",["930"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Eye } from 'react-feather'\r\nimport { Admin_Contact_Edit, Admin_Contact_GetOne } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    interface Errors {\r\n        email: any,\r\n        password: any,\r\n        firstname: any,\r\n        lastname: any,\r\n        phonenumber: any,\r\n        contact: any\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({email: '',password: '',firstname: '',lastname: '',phonenumber: '', contact: ''})\r\n    \r\n    const danger = {color: 'red'}\r\n    \r\n    let [email, setEmail] = React.useState('')\r\n    let [firstname, setFirstname] = React.useState('')\r\n    let [lastname, setLastname] = React.useState('')\r\n    let [phonenumber, setPhonenumber] = React.useState('')\r\n    let [direction, setDirection] = React.useState('none')\r\n    let [password, setPassword] = React.useState('')\r\n    let [isprimary, setIsprimary] = React.useState(false)\r\n    let [newOne, setNewOne] = React.useState({})\r\n    \r\n    let [passwordtype, setPasswordtype] = React.useState('password')\r\n    let [eye, setEye] = React.useState(true)\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Contact_GetOne + `/${id}`, {headers})\r\n            .then(res => {\r\n                setEmail(res.data.email)\r\n                setFirstname(res.data.firstname)\r\n                setLastname(res.data.lastname)\r\n                setPhonenumber(res.data.phonenumber)\r\n                setDirection(res.data.direction)\r\n                setIsprimary(res.data.isprimary)\r\n            })\r\n            .catch(err => {\r\n                let error : Errors = {email: '',password: '',firstname: '',lastname: '',phonenumber: '', contact: ''}\r\n                error.contact = err.response.data.contact\r\n                setErrors(error);\r\n            })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setNewOne({email,firstname,lastname,phonenumber,isprimary,direction})\r\n    }, [email,firstname,lastname,phonenumber,direction,isprimary])\r\n    \r\n    React.useEffect(() => {\r\n        if (eye) {setPasswordtype('password') }\r\n        else {setPasswordtype('text')}\r\n    }, [eye])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n\r\n    const handleEdit = async () => {\r\n        await axios.put(Admin_Contact_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({email: '',password: '',firstname: '',lastname: '',phonenumber: '', contact: ''})\r\n            })\r\n            .catch(err => {\r\n                let error : Errors = {email: '',password: '',firstname: '',lastname: '',phonenumber: '', contact: ''}\r\n                !isEmpty(err.response.data.email) ? error.email = err.response.data.email : ''\r\n                !isEmpty(err.response.data.password)? error.password = err.response.data.password : ''\r\n                !isEmpty(err.response.data.firstname) ? error.firstname = err.response.data.firstname : ''\r\n                !isEmpty(err.response.data.lastname) ? error.lastname = err.response.data.lastname : ''\r\n                !isEmpty(err.response.data.phonenumber) ? error.phonenumber = err.response.data.phonenumber : ''\r\n                setErrors(error)\r\n            })\r\n    }\r\n\r\n    const change = (e: any) => {\r\n        setIsprimary(e.target.checked) \r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body>            \r\n                <Form.Group controlId=\"emailID\">\r\n                    <Form.Label>*Email Address</Form.Label>\r\n                    <Form.Control onChange={(e) => setEmail(e.target.value)} defaultValue={email} type=\"email\" size = 'lg'/>\r\n                    <p style={danger}>{errors.email}</p>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"firstnameID\">\r\n                    <Form.Label>*First Name</Form.Label>\r\n                    <Form.Control onChange={(e) => setFirstname(e.target.value)} defaultValue={firstname} type=\"text\"  size = 'lg'/>\r\n                    <p style={danger}>{errors.firstname}</p>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"lastnameID\">\r\n                    <Form.Label>*Last Name</Form.Label>\r\n                    <Form.Control onChange={(e) => setLastname(e.target.value)} defaultValue={lastname} type=\"text\"  size = 'lg'/>\r\n                    <p style={danger}>{errors.lastname}</p>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"phonenumberID\">\r\n                    <Form.Label>*Phone Number</Form.Label>\r\n                    <Form.Control onChange={(e) => setPhonenumber(e.target.value)} defaultValue={phonenumber} type=\"text\" size = 'lg'/>\r\n                </Form.Group>\r\n                <p></p>\r\n                <Form.Group controlId=\"directionID\">\r\n                    <Form.Label>*Direction</Form.Label>\r\n                    <Form.Select onChange={(e) => setDirection(e.target.value)} defaultValue=\"none\" size=\"lg\">\r\n                        <option value=\"none\">System Default</option>\r\n                        <option value=\"ltr\">LTR</option>\r\n                        <option value=\"rtl\">RTL</option>\r\n                    </Form.Select>\r\n                </Form.Group>\r\n                <p></p>\r\n                <Form.Group controlId=\"passwordID\">\r\n                    <Form.Label>*Password</Form.Label>\r\n                    <InputGroup>\r\n                        <Form.Control type={passwordtype} onChange={(e) => setPassword(e.target.value)} size = 'lg'/>\r\n                        <Button variant=\"outline-info\" onClick={()=> setEye(!eye)} size = 'lg' icon>\r\n                            <Eye />\r\n                        </Button>\r\n                    </InputGroup>\r\n                    <p style={danger}>{errors.password}</p>\r\n                </Form.Group>\r\n                <Form.Check \r\n                    type=\"checkbox\" \r\n                    label= \"Primary Contact\"\r\n                    defaultChecked={isprimary}\r\n                    onChange={(e) => change(e)}\r\n                />\r\n            </Portlet.Body>\r\n            <Portlet.Header>\r\n                <Button onClick={handleEdit} type='submit' variant=\"primary\">Submit</Button>\r\n            </Portlet.Header>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\index.tsx",["931","932"],"import React from 'react'\r\nimport { Portlet, Table, Form, Avatar, Row, Col ,  Button, FloatingLabel } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Client_GetAll, Admin_Client_Delete, Admin_Client_Active} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as SolidIcon from '@fortawesome/free-solid-svg-icons'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst AllclientComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [size, setSize] = React.useState(10)\r\n    const [clients, setClients] = React.useState([])\r\n    // const [search_client, setSearch_client] = React.useState('')\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n    const [deleteclient, setDeleteclient] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n    const [search, setSearch] = React.useState('')\r\n    const [sort, setSort] = React.useState(1)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Client_GetAll + `/${activeLinkNumber}/${size}/search:${search}/sort:${sort}`, {headers})\r\n            .then(res => {\r\n                setClients(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, search, activeLinkNumber, sort, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteclient))\r\n        {\r\n            axios.delete(Admin_Client_Delete + `/${deleteclient}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteclient])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteclient(id.id)\r\n                        swal.fire('Deleted!', 'That Client has been deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n\r\n    const change = async (e: any, id: any) => {\r\n        const active = {active : e.target.checked}\r\n        await axios.put(Admin_Client_Active + `/${id}`, active, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const handleSort = () => {\r\n        if(sort == -1){setSort(1)}\r\n        else{setSort(-1)}\r\n    }\r\n\r\n    const FontSort = (props: any) => {\r\n        if(props.icon == 1){return (<FontAwesomeIcon  icon={SolidIcon.faAngleUp}/>)}\r\n        else{return (<FontAwesomeIcon  icon={SolidIcon.faAngleDown}/>)}\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Header>\r\n                <Portlet.Addon>\r\n                    <Button variant='primary' onClick={() => router.push('/admin/clients/client')}> Create Client </Button>\r\n                    <Button variant='text-primary' onClick={() => router.push('/admin/clients/contact')}> Contacts </Button>\r\n                </Portlet.Addon>\r\n            </Portlet.Header>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={1}>\r\n                        <Form.Select id='size_id' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={9}></Col>\r\n                    <Col md={2}>\r\n                        <FloatingLabel controlId=\"search_id\"  label=\"Search\">\r\n                            <Form.Control type=\"text\" onChange={(e) => setSearch(e.target.value)} placeholder=\"name\" size='lg'/>\r\n                        </FloatingLabel>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\" onClick={handleSort}>Company <FontSort icon = {sort}/></th>\r\n                            <th scope=\"col\">Contact</th>\r\n                            <th scope=\"col\">Email</th>\r\n                            <th scope=\"col\">Phone</th>\r\n                            <th scope=\"col\">Groups</th>\r\n                            <th scope=\"col\">Date Created</th>\r\n                            <th scope=\"col\">Active</th>\r\n                            <th scope=\"col\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            clients.map((client: any) => (\r\n                                <tr key={client._id}>\r\n                                    <td>\r\n                                        {client.company}\r\n                                    </td>\r\n                                    <td>\r\n                                        {/* {client.website} */}\r\n                                    </td>\r\n                                    <td>\r\n                                        {/* {client.website} */}\r\n                                    </td>\r\n                                    <td>\r\n                                        {client.phonenumber}\r\n                                    </td>\r\n                                    <td>\r\n                                        {client.groups.toString()}\r\n                                    </td>\r\n                                    <td>\r\n                                        {client.created_at}\r\n                                    </td>\r\n                                    <td>\r\n                                        <Form.Switch id={client._id} onChange={(e) => change(e, client._id)}  defaultChecked={client.active} />\r\n                                    </td>\r\n                                    <td>\r\n                                        <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/clients/[id]', query: {id: client._id}})} pill size='sm'>\r\n                                            view / Edit\r\n                                        </Button>\r\n                                        <Swal7 id = {client._id}/>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AllclientComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\layout.tsx",["933"],"import { Portlet, ListGroup} from '@blueupcode/components'\r\nimport React from 'react'\r\n\r\nconst Layout = (props: any) => {\r\n\r\n    const [company, setCompany] = React.useState(props.layoutProps.company)\r\n    const [layout, setLayout] = React.useState(props.layoutProps.layout)\r\n    \r\n    React.useEffect(() => {\r\n        props.layoutProps.backLayout(layout)\r\n    }, [layout])\r\n\r\n    const handleClick = (data: String) => {\r\n        setLayout(data)\r\n    }\r\n\r\n    return(\r\n        <Portlet noMargin>\r\n            <Portlet.Header>\r\n                <Portlet.Title>{company}</Portlet.Title>\r\n            </Portlet.Header>\r\n            <Portlet.Body>\r\n                {/* BEGIN List Group */}\r\n                <ListGroup>\r\n                    <ListGroup.Item as=\"button\" id=\"profile\" onClick={() => handleClick(\"profile\")} >Profile</ListGroup.Item>\r\n                    <ListGroup.Item as=\"button\" id=\"contract\" onClick={() => handleClick(\"contact\")} >Contact</ListGroup.Item>\r\n                </ListGroup>\r\n                {/* END List Group */}\r\n            </Portlet.Body>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\nexport default Layout\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\new.tsx",["934","935","936","937"],"import { Col, Portlet, Nav, Row, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Client_ADD, Admin_Client_Field_GetAll, Admin_Client_Group_GetAll, Admin_Currency_GetAll } from 'utils/adminUrl'\r\nimport countries from 'utils/country'\r\n\r\nconst NewOne = () => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    \r\n    const [newOne, setNewOne] = React.useState({})\r\n\r\n    const [company, setCompany] = React.useState('')\r\n    const [phonenumber, setPhonenumber] = React.useState('')\r\n    const [website, setWebsite] = React.useState('')\r\n    const [country, setCountry] = React.useState('')\r\n    const [city, setCity] = React.useState('')\r\n    const [default_language, setDefault_language] = React.useState('none')\r\n    const [state, setState] = React.useState('')\r\n    const [zip, setZip] = React.useState('')\r\n    const [address, setAddress] = React.useState('')\r\n    const [default_currency, setDefault_currency] = React.useState('')\r\n    const [groups, setGroups] = React.useState<String[]>([])\r\n    const [billing_street, setBilling_street] = React.useState('')\r\n    const [billing_city, setBilling_city] = React.useState('')\r\n    const [billing_state, setBilling_state] = React.useState('')\r\n    const [billing_zip, setBilling_zip] = React.useState('')\r\n    const [billing_country, setBilling_country] = React.useState('')\r\n    const [shipping_street, setShipping_street] = React.useState('')\r\n    const [shipping_city, setShipping_city] = React.useState('')\r\n    const [shipping_state, setShipping_state] = React.useState('')\r\n    const [shipping_zip, setShipping_zip] = React.useState('')\r\n    const [shipping_country, setShipping_country] = React.useState('')\r\n    interface Fieldvalues {\r\n        field: any,\r\n        value: any\r\n    }\r\n    const [fieldvalues, setFieldvalues] = React.useState<Fieldvalues[]>([])\r\n    const [changefieldvalues, setChangefieldvalues] = React.useState(0.001)\r\n\r\n\r\n    const [currencies, setCurrencies] = React.useState([])\r\n    const [allGroups, setAllGroups] = React.useState([])\r\n    const [fields, setFields] = React.useState([])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Currency_GetAll + `/1/0`, {headers})\r\n            .then(res => {\r\n                setCurrencies(res.data.all)\r\n                setDefault_currency(res.data.all[0]._id)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Client_Group_GetAll + `/1/0`, {headers})\r\n        .then(res => {\r\n            setAllGroups(res.data.all)\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Client_Field_GetAll + `/1/0`, {headers})\r\n            .then(res => {\r\n                setFields(res.data.all)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n    \r\n    React.useEffect(() => {\r\n        setNewOne({company, phonenumber, billing_street, billing_city, billing_state, billing_zip, billing_country, shipping_street, shipping_city, shipping_state, shipping_zip, shipping_country, website, default_currency, country, city, default_language, groups, state, zip, fieldvalues, address})\r\n    }, [company, phonenumber, billing_street, billing_city, billing_state, billing_zip, billing_country, shipping_street, shipping_city, shipping_state, shipping_zip, shipping_country, website, country, city, default_currency, default_language, state, zip, groups.length, changefieldvalues, address])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n\r\n    const change = (e: any) => {\r\n        let group = groups\r\n        if(group.indexOf(e.target.name) > -1) { group.splice(group.indexOf(e.target.name), 1) }\r\n        else{group.push(e.target.name)}\r\n        setGroups(group) \r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.post(Admin_Client_ADD, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const handleValues = (e: any) => {\r\n        const copy = fieldvalues\r\n        const length = fieldvalues.length + 1\r\n        const bool = []\r\n        for(let i = 0; i < length; i ++){\r\n            if(copy[i] === undefined && i == 0)\r\n            {\r\n                bool.push(\"pushed\")\r\n                copy.push({field: e.target.name, value: e.target.value})\r\n            }else{\r\n                if (copy[i] !== undefined)\r\n                {\r\n                    if(copy[i].field == e.target.name)\r\n                    {\r\n                        copy[i].value = e.target.value\r\n                        bool.push(\"changed\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(bool.length == 0){\r\n            copy.push({field: e.target.name, value: e.target.value})\r\n        }\r\n        setFieldvalues(copy)\r\n        setChangefieldvalues(Math.random())\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"12\">\r\n                <Tab.Container defaultActiveKey=\"customerdetails\">\r\n                    <Portlet>\r\n                        <Portlet.Header bordered>\r\n                            <Portlet.Addon>\r\n                                {/* BEGIN Nav */}\r\n                                <Nav variant=\"lines\" portlet>\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey=\"customerdetails\">Customer Details</Nav.Link>\r\n                                    </Nav.Item>\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey=\"customfields\">Custom Field</Nav.Link>\r\n                                    </Nav.Item>\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey=\"billingshipping\">Billing & Shipping</Nav.Link>\r\n                                    </Nav.Item>\r\n                                </Nav>\r\n                                {/* END Nav */}\r\n                            </Portlet.Addon>\r\n                        </Portlet.Header>\r\n                        <Portlet.Body>\r\n                            {/* BEGIN Tabs */}\r\n                            <Tab.Content>\r\n                                <Tab.Pane eventKey=\"customerdetails\">\r\n                                    <Portlet>\r\n                                        <Portlet.Body>\r\n                                            <Row>\r\n                                                <Col md=\"2\">\r\n                                                </Col>\r\n                                                <Col md=\"8\">\r\n                                                    <div className=\"d-grid gap-3\">\r\n                                                        <Form.Group controlId=\"companyID\">\r\n                                                            <Form.Label>*Company</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setCompany(e.target.value)} type=\"text\" size = 'lg'/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"phonenumberID\">\r\n                                                            <Form.Label>*Phone Number</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setPhonenumber(e.target.value)} type=\"text\" size = 'lg'/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"websiteID\">\r\n                                                            <Form.Label>*Website</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setWebsite(e.target.value)}  type=\"text\"  size = 'lg'/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"groupsID\">\r\n                                                            <p>* Groups</p>\r\n                                                            {\r\n                                                                allGroups.map((allGroup: any) => (\r\n                                                                    <Form.Check \r\n                                                                        type=\"checkbox\" \r\n                                                                        key={allGroup._id} \r\n                                                                        id = {allGroup._id} \r\n                                                                        name = {allGroup.name} \r\n                                                                        label={allGroup.name} \r\n                                                                        onChange={(e) => change(e)}\r\n                                                                    />\r\n                                                                ))\r\n                                                            }\r\n                                                        </Form.Group>\r\n                                                        <Row>\r\n                                                            <Col>\r\n                                                                <Form.Group controlId=\"currencyID\">\r\n                                                                    <Form.Label>*Currency</Form.Label>\r\n                                                                    <Form.Select onChange={(e) => setDefault_currency(e.target.value)} size=\"lg\">\r\n                                                                        {\r\n                                                                            currencies.map((currencyValue: any) =>(\r\n                                                                                <option key={currencyValue._id} value={currencyValue._id}>{currencyValue.name}{currencyValue.symbol}</option>\r\n                                                                            ))\r\n                                                                        }\r\n                                                                    </Form.Select>\r\n                                                                </Form.Group>\r\n                                                            </Col>\r\n                                                            <Col>\r\n                                                            <Form.Group controlId=\"defaultlangID\">\r\n                                                                <Form.Label>*Default Language</Form.Label>\r\n                                                                <Form.Select onChange={(e) => setDefault_language(e.target.value)} defaultValue=\"none\" size=\"lg\">\r\n                                                                    <option value=\"none\">System Default</option>\r\n                                                                    <option value=\"English\">English</option>\r\n                                                                    <option value=\"Germany\">Germany</option>\r\n                                                                </Form.Select>\r\n                                                            </Form.Group>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <Form.Group controlId=\"addressID\">\r\n                                                            <Form.Label>*Address</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setAddress(e.target.value)} as=\"textarea\" rows={3}/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"cityID\">\r\n                                                            <Form.Label>*City</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setCity(e.target.value)}  type=\"text\"  size = 'lg'/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"stateID\">\r\n                                                            <Form.Label>*State</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setState(e.target.value)}  type=\"text\"  size = 'lg'/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"zipID\">\r\n                                                            <Form.Label>*Zip Code</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setZip(e.target.value)}  type=\"text\"  size = 'lg'/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"countryID\">\r\n                                                            <Form.Label>*Country</Form.Label>\r\n                                                            <Form.Select onChange={(e) => setCountry(e.target.value)}  size=\"lg\">\r\n                                                                {\r\n                                                                    countries.map((country) => (\r\n                                                                        <option key={country.code} value={country.name}>{country.name}</option>\r\n                                                                    ))\r\n                                                                }\r\n                                                            </Form.Select>\r\n                                                        </Form.Group>\r\n                                                    </div>\r\n                                                </Col>\r\n                                                <Col md=\"2\">\r\n                                                    \r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Portlet.Body>\r\n                                    </Portlet>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"customfields\">\r\n                                    <Portlet>\r\n                                        <Portlet.Body>\r\n                                            <Row>\r\n                                                <Col md=\"2\">\r\n                                                </Col>\r\n                                                <Col md=\"8\">\r\n                                                    <div className=\"d-grid gap-3\">\r\n                                                    {\r\n                                                        fields.map((field: any) => (\r\n                                                            <Form.Group key={field._id} controlId={field._id}>\r\n                                                                <Form.Label>{field.name}</Form.Label>\r\n                                                                <Form.Control name={field._id} onChange={(e) => handleValues(e)}  type=\"text\" size = 'lg'/>\r\n                                                            </Form.Group>   \r\n                                                        ))\r\n                                                    }\r\n                                                    </div>\r\n                                                </Col>\r\n                                                <Col md=\"2\">\r\n                                                    \r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Portlet.Body>\r\n                                    </Portlet>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"billingshipping\">\r\n                                    <Row>\r\n                                        <Col md=\"1\">\r\n                                        </Col>\r\n                                        <Col md=\"5\">\r\n                                            <h5>*Billing Address</h5>\r\n                                            <Form.Group controlId=\"bistreetID\">\r\n                                                <Form.Label>*Street</Form.Label>\r\n                                                <Form.Control onChange={(e) => setBilling_street(e.target.value)} as=\"textarea\" rows={3}/>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"bicityID\">\r\n                                                <Form.Label>*city</Form.Label>\r\n                                                <Form.Control onChange={(e) => setBilling_city(e.target.value)} type='text' size = 'lg'/>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"bistateID\">\r\n                                                <Form.Label>*State</Form.Label>\r\n                                                <Form.Control onChange={(e) => setBilling_state(e.target.value)} type='text' size = 'lg'/>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"bizipcodeID\">\r\n                                                <Form.Label>*Zip Code</Form.Label>\r\n                                                <Form.Control onChange={(e) => setBilling_zip(e.target.value)} type='text' size = 'lg'/>\r\n                                            </Form.Group>             \r\n                                            <Form.Group controlId=\"bicountryID\">\r\n                                                <Form.Label>*Country</Form.Label>\r\n                                                <Form.Select onChange={(e) => setBilling_country(e.target.value)}  size=\"lg\">\r\n                                                    {\r\n                                                        countries.map((country) => (\r\n                                                            <option key={country.code} value={country.name}>{country.name}</option>\r\n                                                        ))\r\n                                                    }\r\n                                                </Form.Select>\r\n                                            </Form.Group>   \r\n                                        </Col>\r\n                                        <Col md=\"5\">\r\n                                            <h5>*Shipping Address</h5>\r\n                                            <Form.Group controlId=\"shstreetID\">\r\n                                                <Form.Label>*Street</Form.Label>\r\n                                                <Form.Control onChange={(e) => setShipping_street(e.target.value)} as=\"textarea\" rows={3}/>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"shcityID\">\r\n                                                <Form.Label>*city</Form.Label>\r\n                                                <Form.Control onChange={(e) => setShipping_city(e.target.value)} type='text' size = 'lg'/>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"shstateID\">\r\n                                                <Form.Label>*State</Form.Label>\r\n                                                <Form.Control onChange={(e) => setShipping_state(e.target.value)} type='text' size = 'lg'/>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"shzipcodeID\">\r\n                                                <Form.Label>*Zip Code</Form.Label>\r\n                                                <Form.Control onChange={(e) => setShipping_zip(e.target.value)} type='text' size = 'lg'/>\r\n                                            </Form.Group>             \r\n                                            <Form.Group controlId=\"shcountryID\">\r\n                                                <Form.Label>*Country</Form.Label>\r\n                                                <Form.Select onChange={(e) => setShipping_country(e.target.value)}  size=\"lg\">\r\n                                                    {\r\n                                                        countries.map((country) => (\r\n                                                            <option key={country.code} value={country.name}>{country.name}</option>\r\n                                                        ))\r\n                                                    }\r\n                                                </Form.Select>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col md=\"1\">\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Tab.Pane>\r\n                            </Tab.Content>\r\n                            {/* END Tabs */}\r\n                        </Portlet.Body>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet>\r\n                </Tab.Container>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default NewOne\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\client\\view.tsx",["938","939","940","941","942"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Client_GetOne, Admin_Client_Edit, Admin_Currency_GetAll, Admin_Client_Group_GetAll, Admin_Client_Field_GetAll } from 'utils/adminUrl'\r\nimport countries from 'utils/country'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    interface Errors {\r\n        client: any\r\n    }\r\n    const [errors, setErrors] = React.useState({client: ''})\r\n    const [newOne, setNewOne]= React.useState({})\r\n    \r\n    const [company, setCompany] = React.useState('')\r\n    const [phonenumber, setPhonenumber] = React.useState('')\r\n    const [website, setWebsite] = React.useState('')\r\n    const [country, setCountry] = React.useState('')\r\n    const [city, setCity] = React.useState('')\r\n    const [default_language, setDefault_language] = React.useState('')\r\n    const [state, setState] = React.useState('')\r\n    const [zip, setZip] = React.useState('')\r\n    const [address, setAddress] = React.useState('')\r\n    const [default_currency, setDefault_currency] = React.useState('')\r\n    const [groups, setGroups] = React.useState<String[]>([])\r\n    const [billing_street, setBilling_street] = React.useState('')\r\n    const [billing_city, setBilling_city] = React.useState('')\r\n    const [billing_state, setBilling_state] = React.useState('')\r\n    const [billing_zip, setBilling_zip] = React.useState('')\r\n    const [billing_country, setBilling_country] = React.useState('')\r\n    const [shipping_street, setShipping_street] = React.useState('')\r\n    const [shipping_city, setShipping_city] = React.useState('')\r\n    const [shipping_state, setShipping_state] = React.useState('')\r\n    const [shipping_zip, setShipping_zip] = React.useState('')\r\n    const [shipping_country, setShipping_country] = React.useState('')\r\n    interface Fieldvalues {\r\n        field: any,\r\n        value: any\r\n    }\r\n    const [fieldvalues, setFieldvalues] = React.useState<Fieldvalues[]>([])\r\n    const [changefieldvalues, setChangefieldvalues] = React.useState(0.001)\r\n\r\n\r\n    const [currencies, setCurrencies] = React.useState([])\r\n    const [allGroups, setAllGroups] = React.useState([])\r\n    const [fields, setFields] = React.useState([])\r\n\r\n    const danger = {color : \"red\"}\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Client_GetOne + `/${id}`, {headers})\r\n            .then(res => {\r\n                setCompany(res.data.company)\r\n                setPhonenumber(res.data.phonenumber)\r\n                setWebsite(res.data.website)\r\n                setCountry(res.data.country)\r\n                setCity(res.data.city)\r\n                setDefault_language(res.data.default_language)\r\n                setState(res.data.state)\r\n                setZip(res.data.zip)\r\n                setAddress(res.data.address)\r\n                setGroups(res.data.groups)\r\n                setFieldvalues(res.data.fieldvalues)\r\n                setDefault_currency(res.data.default_currency)\r\n                setBilling_street(res.data.billing_street)\r\n                setBilling_city(res.data.billing_city)\r\n                setBilling_state(res.data.billing_state)\r\n                setBilling_zip(res.data.billing_zip)\r\n                setBilling_country(res.data.billing_country)\r\n                setShipping_street(res.data.shipping_street)\r\n                setShipping_city(res.data.shipping_city)\r\n                setShipping_state(res.data.shipping_state)\r\n                setShipping_zip(res.data.shipping_zip)\r\n                setShipping_country(res.data.shipping_country)\r\n            })\r\n            .catch(err => {\r\n                let error = {client: ''}\r\n                error.client = err.response.data.client\r\n                setErrors(error);\r\n            })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Currency_GetAll + `/1/0`, {headers})\r\n            .then(res => {\r\n                setCurrencies(res.data.all)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Client_Group_GetAll + `/1/0`, {headers})\r\n        .then(res => {\r\n            setAllGroups(res.data.all)\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Client_Field_GetAll + `/1/0`, {headers})\r\n            .then(res => {\r\n                setFields(res.data.all)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setNewOne({company, phonenumber, billing_street, billing_city, billing_state, billing_zip, billing_country, shipping_street, shipping_city, shipping_state, shipping_zip, shipping_country, website, default_currency, country, city, default_language, groups, state, zip, fieldvalues, address})\r\n    }, [company, phonenumber, billing_street, billing_city, billing_state, billing_zip, billing_country, shipping_street, shipping_city, shipping_state, shipping_zip, shipping_country, website, country, city, default_currency, default_language, state, zip, groups.length, changefieldvalues, address])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n\r\n    const change = (e: any) => {\r\n        let group = groups\r\n        if(group.indexOf(e.target.name) > -1) { group.splice(group.indexOf(e.target.name), 1) }\r\n        else{group.push(e.target.name)}\r\n        setGroups(group) \r\n    }\r\n\r\n    const onCheck = (e: any) => {\r\n        let group = groups\r\n        if(group.indexOf(e) > -1) { return true }\r\n        return false\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        await axios.put(Admin_Client_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({client: ''})\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const handleValues = (e: any) => {\r\n        const copy = fieldvalues\r\n        const length = fieldvalues.length + 1\r\n        const bool = []\r\n        for(let i = 0; i < length; i ++){\r\n            if(copy[i] === undefined && i == 0)\r\n            {\r\n                bool.push(\"pushed\")\r\n                copy.push({field: e.target.name, value: e.target.value})\r\n            }else{\r\n                if (copy[i] !== undefined)\r\n                {\r\n                    if(copy[i].field == e.target.name)\r\n                    {\r\n                        copy[i].value = e.target.value\r\n                        bool.push(\"changed\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(bool.length == 0){\r\n            copy.push({field: e.target.name, value: e.target.value})\r\n        }\r\n        setFieldvalues(copy)\r\n        setChangefieldvalues(Math.random())\r\n    }\r\n\r\n    const handleDefault = (id: any) => {\r\n        for(let i = 0; i < fieldvalues.length; i ++)\r\n        {\r\n            if(fieldvalues[i].field == id){\r\n                return fieldvalues[i].value\r\n            }\r\n        }\r\n        return ''\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"12\">\r\n                <Tab.Container defaultActiveKey=\"customerdetails\">\r\n                    <Portlet>\r\n                        <Portlet.Header bordered>\r\n                            <Portlet.Addon>\r\n                                {/* BEGIN Nav */}\r\n                                <Nav variant=\"lines\" portlet>\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey=\"customerdetails\">Customer Details</Nav.Link>\r\n                                    </Nav.Item>\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey=\"customfields\">Custom Field</Nav.Link>\r\n                                    </Nav.Item>\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey=\"billingshipping\">Billing & Shipping</Nav.Link>\r\n                                    </Nav.Item>\r\n                                </Nav>\r\n                                {/* END Nav */}\r\n                            </Portlet.Addon>\r\n                        </Portlet.Header>\r\n                        <Portlet.Body>\r\n                            {/* BEGIN Tabs */}\r\n                            <Tab.Content>\r\n                                <Tab.Pane eventKey=\"customerdetails\">\r\n                                    <Portlet>\r\n                                        <Portlet.Body>\r\n                                            <Row>\r\n                                                <Col md=\"2\">\r\n                                                </Col>\r\n                                                <Col md=\"8\">\r\n                                                    <div className=\"d-grid gap-3\">\r\n                                                        <Form.Group controlId=\"companyID\">\r\n                                                            <Form.Label>*Company</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setCompany(e.target.value)} defaultValue={company} type=\"text\" size = 'lg'/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"phonenumberID\">\r\n                                                            <Form.Label>*Phone Number</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setPhonenumber(e.target.value)} defaultValue={phonenumber} type=\"text\" size = 'lg'/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"websiteID\">\r\n                                                            <Form.Label>*Website</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setWebsite(e.target.value)} defaultValue={website} type=\"text\"  size = 'lg'/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"groupsID\">\r\n                                                            <p>* Groups</p>\r\n                                                            {\r\n                                                                allGroups.map((allGroup: any) => (\r\n                                                                    <Form.Check \r\n                                                                        type=\"checkbox\" \r\n                                                                        key={allGroup._id} \r\n                                                                        id = {allGroup._id} \r\n                                                                        name = {allGroup.name} \r\n                                                                        label={allGroup.name} \r\n                                                                        defaultChecked = {onCheck(allGroup._id)}\r\n                                                                        onChange={(e) => change(e)}\r\n                                                                    />\r\n                                                                ))\r\n                                                            }\r\n                                                        </Form.Group>\r\n                                                        <Row>\r\n                                                            <Col>\r\n                                                                <Form.Group controlId=\"currencyID\">\r\n                                                                    <Form.Label>*Currency</Form.Label>\r\n                                                                    <Form.Select onChange={(e) => setDefault_currency(e.target.value)} defaultValue={default_currency} size=\"lg\">\r\n                                                                        {\r\n                                                                            currencies.map((currencyValue: any) =>(\r\n                                                                                <option key={currencyValue._id} value={currencyValue._id}>{currencyValue.name}{currencyValue.symbol}</option>\r\n                                                                            ))\r\n                                                                        }\r\n                                                                    </Form.Select>\r\n                                                                </Form.Group>\r\n                                                            </Col>\r\n                                                            <Col>\r\n                                                            <Form.Group controlId=\"defaultlangID\">\r\n                                                                <Form.Label>*Default Language</Form.Label>\r\n                                                                <Form.Select onChange={(e) => setDefault_language(e.target.value)} defaultValue={default_language} size=\"lg\">\r\n                                                                    <option value=\"none\">System Default</option>\r\n                                                                    <option value=\"English\">English</option>\r\n                                                                    <option value=\"Germany\">Germany</option>\r\n                                                                </Form.Select>\r\n                                                            </Form.Group>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <Form.Group controlId=\"addressID\">\r\n                                                            <Form.Label>*Address</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setAddress(e.target.value)} defaultValue={address} as=\"textarea\" rows={3}/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"cityID\">\r\n                                                            <Form.Label>*City</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setCity(e.target.value)} defaultValue={city} type=\"text\"  size = 'lg'/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"stateID\">\r\n                                                            <Form.Label>*State</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setState(e.target.value)} defaultValue={state} type=\"text\"  size = 'lg'/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"zipID\">\r\n                                                            <Form.Label>*Zip Code</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setZip(e.target.value)} defaultValue={zip} type=\"text\"  size = 'lg'/>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"countryID\">\r\n                                                            <Form.Label>*Country</Form.Label>\r\n                                                            <Form.Select onChange={(e) => setCountry(e.target.value)} defaultValue={country} size=\"lg\">\r\n                                                                {\r\n                                                                    countries.map((countryValue) => (\r\n                                                                        <option key={countryValue.code} value={countryValue.name}>{countryValue.name}</option>\r\n                                                                    ))\r\n                                                                }\r\n                                                            </Form.Select>\r\n                                                        </Form.Group>\r\n                                                    </div>\r\n                                                </Col>\r\n                                                <Col md=\"2\">\r\n                                                    \r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Portlet.Body>\r\n                                    </Portlet>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"customfields\">\r\n                                    <Portlet>\r\n                                        <Portlet.Body>\r\n                                            <Row>\r\n                                                <Col md=\"2\">\r\n                                                </Col>\r\n                                                <Col md=\"8\">\r\n                                                    <div className=\"d-grid gap-3\">\r\n                                                    {\r\n                                                        fields.map((field: any) => (\r\n                                                            <Form.Group key={field._id} controlId={field._id}>\r\n                                                                <Form.Label>{field.name}</Form.Label>\r\n                                                                <Form.Control name={field._id} onChange={(e) => handleValues(e)} defaultValue={handleDefault(field._id)} type=\"text\" size = 'lg'/>\r\n                                                            </Form.Group>   \r\n                                                        ))\r\n                                                    }\r\n                                                    </div>\r\n                                                </Col>\r\n                                                <Col md=\"2\">\r\n                                                    \r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Portlet.Body>\r\n                                    </Portlet>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"billingshipping\">\r\n                                    <Row>\r\n                                        <Col md=\"1\">\r\n                                        </Col>\r\n                                        <Col md=\"5\">\r\n                                            <h5>*Billing Address</h5>\r\n                                            <Form.Group controlId=\"bistreetID\">\r\n                                                <Form.Label>*Street</Form.Label>\r\n                                                <Form.Control onChange={(e) => setBilling_street(e.target.value)} defaultValue={billing_street} as=\"textarea\" rows={3}/>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"bicityID\">\r\n                                                <Form.Label>*city</Form.Label>\r\n                                                <Form.Control onChange={(e) => setBilling_city(e.target.value)} defaultValue={billing_city} type='text' size = 'lg'/>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"bistateID\">\r\n                                                <Form.Label>*State</Form.Label>\r\n                                                <Form.Control onChange={(e) => setBilling_state(e.target.value)} defaultValue={billing_state} type='text' size = 'lg'/>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"bizipcodeID\">\r\n                                                <Form.Label>*Zip Code</Form.Label>\r\n                                                <Form.Control onChange={(e) => setBilling_zip(e.target.value)} defaultValue={billing_zip} type='text' size = 'lg'/>\r\n                                            </Form.Group>             \r\n                                            <Form.Group controlId=\"bicountryID\">\r\n                                                <Form.Label>*Country</Form.Label>\r\n                                                <Form.Select onChange={(e) => setBilling_country(e.target.value)} defaultValue={billing_country} size=\"lg\">\r\n                                                    {\r\n                                                        countries.map((country) => (\r\n                                                            <option key={country.code} value={country.name}>{country.name}</option>\r\n                                                        ))\r\n                                                    }\r\n                                                </Form.Select>\r\n                                            </Form.Group>   \r\n                                        </Col>\r\n                                        <Col md=\"5\">\r\n                                            <h5>*Shipping Address</h5>\r\n                                            <Form.Group controlId=\"shstreetID\">\r\n                                                <Form.Label>*Street</Form.Label>\r\n                                                <Form.Control onChange={(e) => setShipping_street(e.target.value)} defaultValue={shipping_street} as=\"textarea\" rows={3}/>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"shcityID\">\r\n                                                <Form.Label>*city</Form.Label>\r\n                                                <Form.Control onChange={(e) => setShipping_city(e.target.value)} defaultValue={shipping_city} type='text' size = 'lg'/>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"shstateID\">\r\n                                                <Form.Label>*State</Form.Label>\r\n                                                <Form.Control onChange={(e) => setShipping_state(e.target.value)} defaultValue={shipping_state} type='text' size = 'lg'/>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"shzipcodeID\">\r\n                                                <Form.Label>*Zip Code</Form.Label>\r\n                                                <Form.Control onChange={(e) => setShipping_zip(e.target.value)} defaultValue={shipping_zip} type='text' size = 'lg'/>\r\n                                            </Form.Group>             \r\n                                            <Form.Group controlId=\"shcountryID\">\r\n                                                <Form.Label>*Country</Form.Label>\r\n                                                <Form.Select onChange={(e) => setShipping_country(e.target.value)} defaultValue={shipping_country} size=\"lg\">\r\n                                                    {\r\n                                                        countries.map((country) => (\r\n                                                            <option key={country.code} value={country.name}>{country.name}</option>\r\n                                                        ))\r\n                                                    }\r\n                                                </Form.Select>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col md=\"1\">\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Tab.Pane>\r\n                            </Tab.Content>\r\n                            {/* END Tabs */}\r\n                        </Portlet.Body>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet>\r\n                </Tab.Container>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\contract\\index.tsx",["943","944","945","946"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button, useTheme } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Contract_GetAll, Admin_Contract_Delete, Admin_Contract_Type_GetAll} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nimport { ApexOptions } from 'apexcharts';\r\n// import Chart from '@blueupcode/apexcharts';\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst ContractComponent = () => {\r\n    const { resolvedTheme: theme } = useTheme()\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [size, setSize] = React.useState(10)\r\n    \r\n    const [contracts, setContracts] = React.useState([])\r\n    \r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n    const [deletecontract, setDeletecontract] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    const [contract_type_names, setContract_type_names] = React.useState([''])\r\n    const [contract_type_ids, setContract_type_ids] = React.useState([''])\r\n    const [contract_type_values, setContract_type_values] = React.useState([0])\r\n    const [contract_type_nums, setContract_type_nums] = React.useState([0])\r\n    const [contract_type_ids_length, setContract_type_ids_length] = React.useState(0)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Contract_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setContracts(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Contract_Type_GetAll + `/1/0`, {headers})\r\n            .then(res => {\r\n                let con_id = []\r\n                let con_name = []\r\n                let con_value = []\r\n                let con_num = []\r\n                for(let i =0; i < res.data.all.length; i++){\r\n                    con_id.push(res.data.all[i]._id)\r\n                    con_name.push(res.data.all[i].name)\r\n                    con_num[i] = 0\r\n                    con_value[i] = 0\r\n                }\r\n                setContract_type_ids(con_id)\r\n                setContract_type_names(con_name)\r\n                setContract_type_values(con_value)\r\n                setContract_type_nums(con_num)\r\n                setContract_type_ids_length(1)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if(!isEmpty(deletecontract))\r\n        {\r\n            axios.delete(Admin_Contract_Delete + `/${deletecontract}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deletecontract])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeletecontract(id.id)\r\n                        swal.fire('Deleted!', 'That Contract has been deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    interface ChartGeneralProps {\r\n        mode: 'light' | 'dark'\r\n        series: ApexAxisChartSeries | ApexNonAxisChartSeries\r\n    }\r\n\r\n    const handleDate = (data: any) => {\r\n        const temp = String(data).slice(0, 9)\r\n        return temp\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if(contract_type_ids.length != 0){\r\n            for(let i = 0; i < contract_type_ids.length; i++){\r\n                contracts.map((contract: any)=>{\r\n                    if(contract.contract_type !== null){\r\n                        if(contract_type_ids[i] == contract.contract_type._id)\r\n                        {\r\n                            contract_type_values[i] += contract.contract_value\r\n                            contract_type_nums[i] += 1\r\n                        }   \r\n                    }\r\n                })\r\n            }\r\n        } else{\r\n            setContract_type_values([])\r\n        }\r\n    }, [contracts.length, contract_type_ids_length,])\r\n\r\n    \r\n    const handleproject = (data: any) => {\r\n        if(data !== undefined) {\r\n            return data.name\r\n        }\r\n        return ''\r\n    }\r\n    const handleclient = (data: any) => {\r\n        if(data !== null) {\r\n            return data.company\r\n        }\r\n        return ''\r\n    }\r\n    const handletype = (data: any) => {\r\n        if(data !== null) {\r\n            return data.name\r\n        }\r\n        return ''\r\n    }\r\n    const Chart4 = (props: ChartGeneralProps) => {\r\n        const [options, setOptions] = React.useState<ApexOptions>({\r\n            theme: {\r\n                mode: props.mode,\r\n                palette: 'palette1',\r\n            },\r\n            chart: {\r\n                background: 'transparent',\r\n            },\r\n            plotOptions: {\r\n                bar: {\r\n                    horizontal: true,\r\n                },\r\n            },\r\n            dataLabels: {\r\n                enabled: false,\r\n            },\r\n            xaxis: {\r\n                categories: []\r\n            },\r\n        })\r\n\r\n    \r\n        React.useEffect(() => {\r\n            setOptions((prevOptions) => ({\r\n                ...prevOptions,\r\n                mode: props.mode,\r\n                xaxis: { 'categories' : contract_type_names},\r\n                palette: 'palette1',\r\n            }))\r\n        }, [props.mode])\r\n\r\n        return <div />\r\n    \r\n        // return <></> // <Chart type=\"bar\" width=\"100%\" height={350} options={options} series={props.series} />\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={2}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/contract/new')}> New Contract </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='size_id' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={7}></Col>\r\n                    <Col md={2}>\r\n                        {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                            {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                            {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                        {/* </FloatingLabel> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>    \r\n                    <Col>\r\n                        <Portlet>\r\n                            <Portlet.Header bordered>\r\n                                <Portlet.Title>Contracts by Type</Portlet.Title>\r\n                            </Portlet.Header>\r\n                            <Portlet.Body>\r\n                                <Chart4\r\n                                    mode={theme as ChartGeneralProps['mode']}\r\n                                    series={[\r\n                                        {\r\n                                            data: contract_type_nums,\r\n                                        },\r\n                                    ]}\r\n                                />\r\n                            </Portlet.Body>\r\n                        </Portlet>\r\n                    </Col>\r\n                    <Col>\r\n                        <Portlet>\r\n                            <Portlet.Header bordered>\r\n                                <Portlet.Title>Contracts Value by Type</Portlet.Title>\r\n                            </Portlet.Header>\r\n                            <Portlet.Body>\r\n                                <Chart4\r\n                                    mode={theme as ChartGeneralProps['mode']}\r\n                                    series={[\r\n                                        {\r\n                                            data: contract_type_values,\r\n                                        },\r\n                                    ]}\r\n                                />\r\n                            </Portlet.Body>\r\n                        </Portlet>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">Subject</th>\r\n                            <th scope=\"col\">Client</th>\r\n                            <th scope=\"col\">Type</th>\r\n                            <th scope=\"col\">Value</th>\r\n                            <th scope=\"col\">Start Date</th>\r\n                            <th scope=\"col\">End Date</th>\r\n                            <th scope=\"col\">Project</th>\r\n                            <th scope=\"col\">Signature</th>\r\n                            <th scope=\"col\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            contracts.map((contract: any) => (\r\n                                <tr key={contract._id}>\r\n                                    <td>\r\n                                        {contract.subject}\r\n                                    </td>\r\n                                    <td>\r\n                                        {handleclient(contract.client)}\r\n                                    </td>\r\n                                    <td>\r\n                                        {handletype(contract.contract_type)}\r\n                                    </td>\r\n                                    <td>\r\n                                        {contract.contract_value}\r\n                                    </td>\r\n                                    <td>\r\n                                        {handleDate(contract.datestart)}\r\n                                    </td>\r\n                                    <td>\r\n                                        {handleDate(contract.dateend)}\r\n                                    </td>\r\n                                    <td>\r\n                                        {handleproject(contract.project)}\r\n                                    </td>\r\n                                    <td>\r\n                                        {contract.signature}\r\n                                    </td>\r\n                                    <td>\r\n                                        <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/contract/[id]', query: {id: contract._id}})} pill size='sm'>\r\n                                            view / Edit\r\n                                        </Button>\r\n                                        <Swal7 id = {contract._id}/>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ContractComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\contract\\new.tsx",["947","948"],"import { Col, Portlet, Nav, Row, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Client_Get, Admin_Contract_ADD, Admin_Contract_Type_GetAll } from 'utils/adminUrl'\r\n\r\nconst NewOne = () => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [client, setClient] = React.useState('')\r\n    const [subject, setSubject] = React.useState('')\r\n    const [contract_value, setContract_value] = React.useState(0)\r\n    const [contract_type, setContract_type] = React.useState('')\r\n    const [datestart, setDatestart] = React.useState<Date>()\r\n    const [dateend, setDateend] = React.useState<Date>()\r\n    const [description, setDescription] = React.useState('')\r\n\r\n    const [newOne, setNewOne] = React.useState({})\r\n\r\n    const [clients, setClients] = React.useState([])\r\n    const [contract_types, setContract_types] = React.useState([])\r\n    \r\n    React.useEffect(() => {\r\n        setNewOne({client, subject, contract_type, contract_value, datestart, dateend, description})\r\n    }, [client, subject, contract_type, contract_value, datestart, dateend, description])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success',\r\n        })\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Client_Get, {headers})\r\n            .then(res => {\r\n                setClient(res.data.data[0]._id)\r\n                setClients(res.data.data)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Contract_Type_GetAll + `/1/0`, {headers})\r\n            .then(res => {\r\n                setContract_types(res.data.all)\r\n                setContract_type(res.data.all[0]._id)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.post(Admin_Contract_ADD, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <h4>* Contract Information</h4>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <Row>\r\n                            <Col>\r\n                                <div className=\"d-grid gap-3\">\r\n                                    <Form.Group controlId=\"clientID\">\r\n                                        <Form.Label>*Client</Form.Label>\r\n                                        <Form.Select onChange={(e) => setClient(e.target.value)} size=\"lg\">\r\n                                            {\r\n                                                clients.map((client_value: any) => (\r\n                                                    <option key={client_value._id} value={client_value._id}>{client_value.company}</option>\r\n                                                ))\r\n                                            }\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"subjectID\">\r\n                                        <Form.Label>*Subject</Form.Label>\r\n                                        <Form.Control onChange={(e) => setSubject(e.target.value)} type=\"text\" size = 'lg'/>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"contractvalueID\">\r\n                                        <Form.Label>*Contract value</Form.Label>\r\n                                        <Form.Control onChange={(e) => setContract_value(parseInt(e.target.value))}  type=\"Number\"  size = 'lg'/>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"contracttypeID\">\r\n                                        <Form.Label>*Contract type</Form.Label>\r\n                                        <Form.Select onChange={(e) => setContract_type(e.target.value)} size=\"lg\">\r\n                                            {\r\n                                                contract_types.map((contract_type_value: any)=> (\r\n                                                    <option key={contract_type_value._id} value={contract_type_value._id}>{contract_type_value.name}</option>\r\n                                                ))\r\n                                            }\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Form.Group controlId=\"startdateID\">\r\n                                                <Form.Label>*Start Date</Form.Label>\r\n                                                <Form.Control onChange={(e) => setDatestart(new Date(e.target.value))}  type=\"date\"  size = 'lg'/>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Form.Group controlId=\"enddateID\">\r\n                                                <Form.Label>*End Date</Form.Label>\r\n                                                <Form.Control onChange={(e) => setDateend(new Date(e.target.value))}  type=\"date\"  size = 'lg'/>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Form.Group controlId=\"descriptionID\">\r\n                                        <Form.Label>*Description</Form.Label>\r\n                                        <Form.Control onChange={(e) => setDescription(e.target.value)} as=\"textarea\" rows={3}/>\r\n                                    </Form.Group>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        {/* END Tabs */}\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer bordered align=\"end\">\r\n                        <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default NewOne\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\contract\\view.tsx",["949","950","951","952"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Contract_GetOne, Admin_Contract_Edit, Admin_Client_GetAll, Admin_Contract_Type_GetAll, Admin_Project_GetAll, Admin_Client_Get } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    const [errors, setErrors] = React.useState({})\r\n    const [newOne, setNewOne]= React.useState({})\r\n    \r\n    const [client, setClient] = React.useState('')\r\n    const [subject, setSubject] = React.useState('')\r\n    const [contract_value, setContract_value] = React.useState(0)\r\n    const [contract_type, setContract_type] = React.useState('')\r\n    const [datestart, setDatestart] = React.useState<Date>()\r\n    const [dateend, setDateend] = React.useState<Date>()\r\n    const [description, setDescription] = React.useState('')\r\n    const [project, setProject] = React.useState('')\r\n\r\n    const [clients, setClients] = React.useState([])\r\n    const [projects, setProjects] = React.useState([])\r\n    const [contract_types, setContract_types] = React.useState([])\r\n\r\n    const danger = {color : \"red\"}\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Contract_GetOne + `/${id}`, {headers})\r\n            .then(res => {\r\n                setClient(res.data.client)\r\n                setSubject(res.data.subject)\r\n                setContract_value(res.data.contract_value)\r\n                setContract_type(res.data.contract_type)\r\n                setDatestart(res.data.datestart)\r\n                setDateend(res.data.dateend)\r\n                setDescription(res.data.description)\r\n                // setProject(res.data.project)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Client_Get, {headers})\r\n            .then(res => {\r\n                setClients(res.data.data)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Project_GetAll + `/1/0`, {headers})\r\n            .then(res => {\r\n                setProjects(res.data.all)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Contract_Type_GetAll + `/1/0`, {headers})\r\n            .then(res => {\r\n                setContract_types(res.data.all)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setNewOne({client, subject, contract_type, contract_value, datestart, dateend, project, description})\r\n    }, [client, subject, contract_type, contract_value, datestart, dateend, project, description])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.put(Admin_Contract_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({})\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n    const handleDate = (data: any) => {\r\n        const temp = String(data).slice(0, 9)\r\n        return temp\r\n    }\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <h4>* Contract Information</h4>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <Row>\r\n                            <Col>\r\n                                <div className=\"d-grid gap-3\">\r\n                                    <Form.Group controlId=\"clientID\">\r\n                                        <Form.Label>*Client</Form.Label>\r\n                                        <Form.Select onChange={(e) => setClient(e.target.value)}  size=\"lg\">\r\n                                            {\r\n                                                clients.map((client_value: any) => (\r\n                                                    <option key={client_value._id} value={client_value._id}>{client_value.company}</option>\r\n                                                ))\r\n                                            }\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"subjectID\">\r\n                                        <Form.Label>*Subject</Form.Label>\r\n                                        <Form.Control onChange={(e) => setSubject(e.target.value)} defaultValue={subject} type=\"text\" size = 'lg'/>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"contractvalueID\">\r\n                                        <Form.Label>*Contract value</Form.Label>\r\n                                        <Form.Control onChange={(e) => setContract_value(parseInt(e.target.value))} value={contract_value} type=\"Number\"  size = 'lg'/>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"contracttypeID\">\r\n                                        <Form.Label>*Contract type</Form.Label>\r\n                                        <Form.Select onChange={(e) => setContract_type(e.target.value)} size=\"lg\">\r\n                                            {\r\n                                                contract_types.map((contract_type_value: any)=> (\r\n                                                    <option key={contract_type_value._id} value={contract_type_value._id}>{contract_type_value.name}</option>\r\n                                                ))\r\n                                            }\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"projectID\">\r\n                                        <Form.Label>*Project</Form.Label>\r\n                                        <Form.Select onChange={(e) => setProject(e.target.value)} size=\"lg\">\r\n                                            <option value={''}></option>\r\n                                            {\r\n                                                projects.map((projectone: any)=> (\r\n                                                    <option key={projectone._id} value={projectone._id}>{projectone.name}</option>\r\n                                                ))\r\n                                            }\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Form.Group controlId=\"startdateID\">\r\n                                                <Form.Label>*Start Date : {handleDate(datestart)}</Form.Label>\r\n                                                <Form.Control onChange={(e) => setDatestart(new Date(e.target.value))} type=\"date\"  size = 'lg'/>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Form.Group controlId=\"enddateID\">\r\n                                                <Form.Label>*End Date : {handleDate(dateend)}</Form.Label>\r\n                                                <Form.Control onChange={(e) => setDateend(new Date(e.target.value))}  type=\"date\"  size = 'lg'/>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Form.Group controlId=\"descriptionID\">\r\n                                        <Form.Label>*Description</Form.Label>\r\n                                        <Form.Control onChange={(e) => setDescription(e.target.value)} defaultValue={description} as=\"textarea\" rows={3}/>\r\n                                    </Form.Group>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        {/* END Tabs */}\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer bordered align=\"end\">\r\n                        <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\dashboard\\widget1.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\dashboard\\widget2.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\dashboard\\widget3.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\dashboard\\widget4.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\dashboard\\widget5.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\profile.tsx",["953","954","955"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport Image from 'next/image'\r\nimport { Admin_Staff_GetOne, Admin_Staff_Edit, Admin_Department_GetAll, Admin_Staff_Profile_Image, Admin_Staff_Password } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    interface Errors {\r\n        staff: any,\r\n        department: any,\r\n        email: any,\r\n        firstname: any,\r\n        lastname: any,\r\n        oldpassword: any,\r\n        confirmpassword: any,\r\n        newpassword: any,\r\n        image: any\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({staff: '', image: '', department: '', email: '', firstname: '', lastname: '', oldpassword: '', confirmpassword: '', newpassword: ''})\r\n    const [newOne, setNewOne]= React.useState({})\r\n    const [password, setPassword]= React.useState({})\r\n    \r\n    const [email, setEmail] = React.useState('')\r\n    const [firstname, setFirstname] = React.useState('')\r\n    const [lastname, setLastname] = React.useState('')\r\n    const [hourly_rate, setHourly_rate] = React.useState(0)\r\n    const [phonenumber, setPhonenumber] = React.useState('')\r\n    const [facebook, setFacebook] = React.useState('')\r\n    const [linkedin, setLinkedin] = React.useState('')\r\n    const [skype, setSkype] = React.useState('')\r\n    const [default_language, setDefault_language] = React.useState('none')\r\n    const [email_signature, setEmail_signature] = React.useState('')\r\n    const [direction, setDirection] = React.useState('none')\r\n    const [departments, setDepartments] = React.useState<String[]>([])\r\n    const [profile_image, setProfile_image] = React.useState('')\r\n    const [alldepartments, setAllDepartments] = React.useState([])\r\n    \r\n    \r\n    const [oldpassword, setOldPassword] = React.useState('')\r\n    const [newpassword, setNewPassword] = React.useState('')\r\n    const [confirmpassword, setConfirmPassword] = React.useState('')\r\n\r\n    const danger = {color : \"red\"}\r\n    \r\n    const [image, setImage] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Staff_GetOne + `/${id}`, {headers})\r\n            .then(res => {\r\n                setEmail(res.data.email)\r\n                setFirstname(res.data.firstname)\r\n                setLastname(res.data.lastname)\r\n                setHourly_rate(res.data.hourly_rate)\r\n                setPhonenumber(res.data.phonenumber)\r\n                setFacebook(res.data.facebook)\r\n                setLinkedin(res.data.linkedin)\r\n                setSkype(res.data.skype)\r\n                setDefault_language(res.data.default_language)\r\n                setEmail_signature(res.data.email_signature)\r\n                setDirection(res.data.direction)\r\n                setDepartments(res.data.departments)\r\n                setProfile_image(res.data.profile_image)\r\n            })\r\n            .catch(err => {\r\n                let error = {staff: '', image: '', department: '', email: '', firstname: '', lastname: '', oldpassword: '', confirmpassword: '', newpassword: ''}\r\n                error.staff = err.response.data.staff\r\n                setErrors(error);\r\n            })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Department_GetAll + `/1/0`, {headers})\r\n        .then(res => {\r\n            setAllDepartments(res.data.all)\r\n        })\r\n        .catch(err => {\r\n            let error = {staff: '', image: '', department: '', email: '', firstname: '', lastname: '', oldpassword: '', confirmpassword: '', newpassword: ''}\r\n            !isEmpty(err.response.data.department) ? error.department = err.response.data.department : ''\r\n            setErrors(error)\r\n        })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setNewOne({email,firstname,lastname,hourly_rate,phonenumber,facebook,linkedin,skype,default_language,email_signature,direction,departments})\r\n    }, [email,firstname,lastname,hourly_rate,phonenumber,facebook,linkedin,skype,default_language,email_signature,direction,departments.length])\r\n\r\n    React.useEffect(() => {\r\n        setPassword({oldpassword, confirmpassword, newpassword})\r\n    }, [oldpassword, confirmpassword, newpassword])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const errorAlert = () => {\r\n        toast.fire({\r\n            icon: 'error',\r\n            title: 'Error exists. Maybe not Image file'\r\n        })\r\n    }\r\n\r\n    const onCheck = (e: any) => {\r\n        let department = departments\r\n        if(department.indexOf(e) > -1) { return true }\r\n        return false\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.put(Admin_Staff_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({staff: '', image: '', department: '', email: '', firstname: '', lastname: '', oldpassword: '', confirmpassword: '', newpassword: ''})\r\n            })\r\n            .catch(err => {\r\n                let error = {staff: '', image: '', department: '', email: '', firstname: '', lastname: '', oldpassword: '', confirmpassword: '', newpassword: ''}\r\n                !isEmpty(err.response.data.email) ? error.email = err.response.data.email : ''\r\n                !isEmpty(err.response.data.firstname) ? error.firstname = err.response.data.firstname : ''\r\n                !isEmpty(err.response.data.lastname) ? error.lastname = err.response.data.lastname : ''\r\n                setErrors(error)\r\n            })\r\n    }\r\n\r\n    const changePassword = async () => {\r\n        await axios.put(Admin_Staff_Password + `/${id}`, password, {headers})\r\n                .then(res => {\r\n                    successAlert()\r\n                    setErrors({staff: '', image: '', department: '', email: '', firstname: '', lastname: '', oldpassword: '', confirmpassword: '', newpassword: ''})\r\n                })\r\n                .catch(err => {\r\n                    let error = {staff: '', image: '', department: '', email: '', firstname: '', lastname: '', oldpassword: '', confirmpassword: '', newpassword: ''}\r\n                    console.log(err.response.data)\r\n                    !isEmpty(err.response.data.oldpassword) ? error.oldpassword = err.response.data.oldpassword : ''\r\n                    !isEmpty(err.response.data.confirmpassword) ? error.confirmpassword = err.response.data.confirmpassword : ''\r\n                    !isEmpty(err.response.data.newpassword) ? error.newpassword = err.response.data.newpassword : ''\r\n                    setErrors(error)\r\n                })\r\n    }\r\n\r\n    const DisplayImage = () => {\r\n        const src = '/uploads/profile_images/' + profile_image\r\n        if(profile_image === undefined || isEmpty(profile_image)){\r\n            return (<p>Profile Image does not exsist</p>)\r\n        } else{\r\n            return (\r\n                <Image src={src} width={100} height={100} alt=\"Avatar image\" />\r\n            )\r\n        }\r\n    }\r\n\r\n    const uploadToClient = async (e: any) => {\r\n        if (e.target.files && e.target.files[0]) {\r\n            const i = e.target.files[0]\r\n            const body = new FormData()\r\n            body.append(\"file\", i)  \r\n            await fetch(\"/api/upload\", {\r\n                method: \"POST\",\r\n                body\r\n            }).then(res => res.json())\r\n            .then(async data=>{ \r\n                if(!isEmpty(data.error) || isEmpty(data.filename))\r\n                {\r\n                    errorAlert()\r\n                } else{\r\n                    if(!isEmpty(profile_image))\r\n                    {\r\n                        let body = new FormData()\r\n                        body.append(\"text\", profile_image)\r\n                        const response = await fetch(\"/api/upload/remove\", {\r\n                            method: \"POST\",\r\n                            body\r\n                        })\r\n                    }\r\n                    setProfile_image(data.filename) \r\n                    handleImage(data.filename) \r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleImage = async (data: any) => {\r\n        if(data !== null && data !== ''){\r\n            await axios.put(Admin_Staff_Profile_Image + `/${id}`, {profile_image: data}, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                let error = {staff: '', image: '', department: '', email: '', firstname: '', lastname: '', oldpassword: '', confirmpassword: '', newpassword: ''}\r\n                !isEmpty(err.response.data.image) ? error.image = err.response.data.image : ''\r\n                setErrors(error)\r\n            })\r\n        }else{\r\n            errorAlert()\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <h4>{firstname + \" \" + lastname}</h4>\r\n                            <p style={danger}>{errors.staff}</p>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <DisplayImage />\r\n                        <Form.Group controlId=\"formFile\">\r\n                            <Form.Label></Form.Label>\r\n                            <Form.Control type=\"file\" onChange={(e) => uploadToClient(e)}/>\r\n                        </Form.Group>            \r\n                        <Form.Group controlId=\"emailID\">\r\n                            <Form.Label>*Email Address</Form.Label>\r\n                            <Form.Control onChange={(e) => setEmail(e.target.value)} defaultValue={email} type=\"email\" size = 'lg'/>\r\n                            <p style={danger}>{errors.email}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"firstnameID\">\r\n                            <Form.Label>*First Name</Form.Label>\r\n                            <Form.Control onChange={(e) => setFirstname(e.target.value)} defaultValue={firstname} type=\"text\"  size = 'lg'/>\r\n                            <p style={danger}>{errors.firstname}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"lastnameID\">\r\n                            <Form.Label>*Last Name</Form.Label>\r\n                            <Form.Control onChange={(e) => setLastname(e.target.value)} defaultValue={lastname} type=\"text\"  size = 'lg'/>\r\n                            <p style={danger}>{errors.lastname}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"hourlyrateID\">\r\n                            <Form.Label>*Hourly Rate</Form.Label>\r\n                            <Form.Control onChange={(e) => setHourly_rate(parseInt(e.target.value))} defaultValue={hourly_rate} type=\"number\"  size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"phonenumberID\">\r\n                            <Form.Label>*Phone Number</Form.Label>\r\n                            <Form.Control onChange={(e) => setPhonenumber(e.target.value)} defaultValue={phonenumber} type=\"text\" size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"facebookID\">\r\n                            <Form.Label>*Facebook</Form.Label>\r\n                            <Form.Control onChange={(e) => setFacebook(e.target.value)} defaultValue={facebook}  type=\"text\"  size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"linkedinID\">\r\n                            <Form.Label>*Linkedin</Form.Label>\r\n                            <Form.Control onChange={(e) => setLinkedin(e.target.value)} defaultValue={linkedin} type=\"text\"  size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"skypeID\">\r\n                            <Form.Label>*Skype</Form.Label>\r\n                            <Form.Control onChange={(e) => setSkype(e.target.value)} defaultValue={skype} type=\"text\"  size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"defaultlangID\">\r\n                            <Form.Label>*Default Language</Form.Label>\r\n                            <Form.Select onChange={(e) => setDefault_language(e.target.value)} value={default_language} size=\"lg\">\r\n                                <option value=\"none\" >System Default</option>\r\n                                <option value=\"English\" >English</option>\r\n                                <option value=\"Germany\" >Germany</option>\r\n                            </Form.Select>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"emailsignatureID\">\r\n                            <Form.Label>*Email Signature</Form.Label>\r\n                            <Form.Control onChange={(e) => setEmail_signature(e.target.value)} as=\"textarea\" rows={3}/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"directionID\">\r\n                            <Form.Label>*Direction</Form.Label>\r\n                            <Form.Select onChange={(e) => setDirection(e.target.value)} value={direction} size=\"lg\">\r\n                                <option value=\"none\" >System Default</option>\r\n                                <option value=\"ltr\" >LTR</option>\r\n                                <option value=\"rtl\" >RTL</option>\r\n                            </Form.Select>\r\n                        </Form.Group>\r\n                        <p></p>\r\n                        <Form.Group controlId=\"memberdepartments\">\r\n                            {\r\n                                alldepartments.map((department: any) => (\r\n                                    <Form.Check \r\n                                        type=\"checkbox\" \r\n                                        key={department._id} \r\n                                        id = {department._id} \r\n                                        name = {department._id} \r\n                                        label={department.name}\r\n                                        defaultChecked = {onCheck(department._id)}\r\n                                        disabled\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </Form.Group>\r\n                        <p></p>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col><Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <h4>Change your password</h4>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <Form.Group controlId=\"oldpasswordID\">\r\n                            <Form.Label>*Old Password</Form.Label>\r\n                            <InputGroup>\r\n                                <Form.Control type=\"password\" onChange={(e) => setOldPassword(e.target.value)} size = 'lg'/>\r\n                            </InputGroup>\r\n                            <p style={danger}>{errors.oldpassword}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"newpasswordID\">\r\n                            <Form.Label>*New Password</Form.Label>\r\n                            <InputGroup>\r\n                                <Form.Control type=\"password\" onChange={(e) => setNewPassword(e.target.value)} size = 'lg'/>\r\n                            </InputGroup>\r\n                            <p style={danger}>{errors.newpassword}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"confirmpasswordID\">\r\n                            <Form.Label>*Confirm Password</Form.Label>\r\n                            <InputGroup>\r\n                                <Form.Control type=\"password\" onChange={(e) => setConfirmPassword(e.target.value)} size = 'lg'/>\r\n                            </InputGroup>\r\n                            <p style={danger}>{errors.confirmpassword}</p>\r\n                        </Form.Group>\r\n                        \r\n                    </Portlet.Body>\r\n                    <Portlet.Footer>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={changePassword} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n\r\n\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\project\\index.tsx",["956","957"],"import React from 'react'\r\nimport { Portlet, Table, Form, Avatar, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Project_GetAll, Admin_Project_Delete} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst ProjectComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [size, setSize] = React.useState(10)\r\n    const [projects, setProjects] = React.useState([])\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n    const [deleteproject, setDeleteproject] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Project_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setProjects(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteproject))\r\n        {\r\n            axios.delete(Admin_Project_Delete + `/${deleteproject}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteproject])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteproject(id.id)\r\n                        swal.fire('Deleted!', 'That Project has been deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    const staffs = (data: any) => {\r\n        let staff = []\r\n        for (let i = 0; i < data.length; i++)\r\n        {\r\n            staff.push(data[i].firstname)\r\n        }\r\n        return staff.toString()\r\n    }\r\n    \r\n    const handleclient = (data: any) => {\r\n        if(data !== null) {\r\n            return data.company\r\n        }\r\n        return ''\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={2}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/project/new')}> New Project </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='size_id' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={7}></Col>\r\n                    <Col md={2}>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">Project Name</th>\r\n                            <th scope=\"col\">Client</th>\r\n                            <th scope=\"col\">Start Date</th>\r\n                            <th scope=\"col\">Deadline</th>\r\n                            <th scope=\"col\">Staffs</th>\r\n                            <th scope=\"col\">Status</th>\r\n                            <th scope=\"col\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            projects.map((project: any) => (\r\n                                <tr key={project._id}>\r\n                                    <td>\r\n                                        {project.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        {handleclient(project.client)}\r\n                                    </td>\r\n                                    <td>\r\n                                        {project.start_date}\r\n                                    </td>\r\n                                    <td>\r\n                                        {project.deadline}\r\n                                    </td>\r\n                                    <td>\r\n                                        {staffs(project.staffs)}\r\n                                    </td>\r\n                                    <td>\r\n                                        {project.status}\r\n                                    </td>\r\n                                    <td>\r\n                                        <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/project/[id]', query: {id: project._id}})} pill size='sm'>\r\n                                            view / Edit\r\n                                        </Button>\r\n                                        <Swal7 id = {project._id}/>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ProjectComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\project\\new.tsx",["958","959","960"],"import { Col, Portlet, Nav, Row, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport Select from 'react-select'\r\nimport axios from 'axios'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Client_Get, Admin_Project_ADD, Admin_Staff_GetAll } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst NewOne = () => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const [newOne, setNewOne] = React.useState({})\r\n    \r\n    interface Errors {\r\n        name: string,\r\n        status : string,\r\n        billing_type: string,\r\n        start_date: string\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({name: '', status: '', billing_type: '', start_date: ''})\r\n\r\n    const danger = {color: 'red'}\r\n\r\n    const [name, setName] = React.useState('')\r\n    const [client, setClient] = React.useState('')\r\n    const [billing_type, setBilling_type] = React.useState('')\r\n    const [status, setStatus] = React.useState('')\r\n    const [project_cost, setProject_cost] = React.useState(1)\r\n    const [estimated_hours, setEstimated_hours] = React.useState(0)\r\n    const [staffs, setStaffs] = React.useState([''])\r\n    const [start_date, setStart_date] = React.useState<Date>()\r\n    const [deadline, setDeadline] = React.useState<Date>()\r\n    const [description, setDescription] = React.useState('')\r\n    \r\n    interface Clients {\r\n        value: string,\r\n        label : string\r\n    }\r\n    const [clients, setClients] = React.useState<Clients[]>([])\r\n    interface StaffsAll {\r\n        value: string,\r\n        label : string\r\n    }\r\n    const [staffsAll, setStaffsAll] = React.useState<StaffsAll[]>([])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Client_Get, {headers})\r\n            .then(res => {\r\n                let temp = []\r\n                for(let i = 0; i < res.data.data.length; i++)\r\n                {\r\n                    temp.push({value: res.data.data[i]._id, label: res.data.data[i].company})\r\n                }\r\n                setClients(temp) \r\n                setClient(res.data.data[0]._id)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Staff_GetAll + `/1/0/search:/sort:1`, {headers})\r\n            .then(res => {\r\n                let temp = []\r\n                for(let i = 0; i < res.data.all.length; i++)\r\n                {\r\n                    temp.push({value: res.data.all[i]._id, label: res.data.all[i].firstname})\r\n                }\r\n                setStaffsAll(temp)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n    \r\n    React.useEffect(() => {\r\n        setNewOne({name, client, start_date, deadline, billing_type, status, project_cost, estimated_hours, staffs, description})\r\n    }, [name, client, start_date, deadline, billing_type, status, project_cost, estimated_hours, staffs.length, description])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.post(Admin_Project_ADD, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({name: '', status: '', billing_type: '', start_date: ''})\r\n            })\r\n            .catch(err => {\r\n                let error : Errors= {name: '', status: '', billing_type: '', start_date: ''}\r\n                !isEmpty(err.response.data.name) ? error.name = err.response.data.name : ''\r\n                !isEmpty(err.response.data.status)? error.status = err.response.data.status : ''\r\n                !isEmpty(err.response.data.billing_type) ? error.billing_type = err.response.data.billing_type : ''\r\n                !isEmpty(err.response.data.start_date) ? error.start_date = err.response.data.start_date : ''\r\n                setErrors(error)\r\n            })\r\n    }\r\n\r\n    function selectStaff(data: any) {\r\n        let temp = []\r\n        for(let i = 0; i < data.length; i++){\r\n            temp.push(data[i].value)\r\n        }\r\n        setStaffs(temp)\r\n    }\r\n\r\n    function selectClient(data: any) {\r\n        setClient(data.value)\r\n    }\r\n\r\n    const handleDate = (data: any) => {\r\n        const temp = String(data).slice(0, 9)\r\n        return temp\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"2\"></Col>\r\n            <Col md = \"8\">\r\n                <Tab.Container defaultActiveKey=\"project\">\r\n                    <Portlet>\r\n                        <Portlet.Header bordered>\r\n                            <Portlet.Addon>\r\n                                {/* BEGIN Nav */}\r\n                                <Nav variant=\"lines\" portlet>\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey=\"project\">* Project</Nav.Link>\r\n                                    </Nav.Item>\r\n                                </Nav>\r\n                            </Portlet.Addon>\r\n                            <Portlet.Addon>\r\n                                <Nav variant=\"lines\" portlet>\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey=\"projectsetting\">* Project Settings</Nav.Link>\r\n                                    </Nav.Item>\r\n                                </Nav>\r\n                                {/* END Nav */}\r\n                            </Portlet.Addon>\r\n                        </Portlet.Header>\r\n                        <Portlet.Body>\r\n                            {/* BEGIN Tabs */}\r\n                            <Tab.Content>\r\n                                <Tab.Pane eventKey=\"project\">\r\n                                    <Portlet>\r\n                                        <Portlet.Body>\r\n                                            <Row>\r\n                                                <Col md=\"2\">\r\n                                                </Col>\r\n                                                <Col md=\"8\">\r\n                                                    <div className=\"d-grid gap-3\">\r\n                                                        <Form.Group controlId=\"nameID\">\r\n                                                            <Form.Label>*Project Name</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setName(e.target.value)} type=\"text\" size = 'lg'/>\r\n                                                            <p style={danger}>{errors.name}</p>\r\n                                                        </Form.Group>\r\n                                                        <div className=\"dropdown-container\">\r\n                                                            <Select\r\n                                                                options={clients}\r\n                                                                placeholder=\"Select Client\"\r\n                                                                onChange={selectClient}\r\n                                                                isSearchable={true}\r\n                                                                instanceId=\"unique-client-id\"\r\n                                                            />\r\n                                                        </div>\r\n                                                        <Form.Group controlId=\"billingtypeID\">\r\n                                                            <Form.Label>*Billing type</Form.Label>\r\n                                                            <Form.Select onChange={(e) => setBilling_type(e.target.value)} size=\"lg\">\r\n                                                                <option value=\"Fixed Rate\">Fixed Rate</option>\r\n                                                                <option value=\"Project Hours\">Project Hours</option>\r\n                                                                <option value=\"Task Hours\">Task Hours</option>  \r\n                                                            </Form.Select>\r\n                                                            <p style={danger}>{errors.billing_type}</p>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"statusID\">\r\n                                                            <Form.Label>*Status</Form.Label>\r\n                                                            <Form.Select onChange={(e) => setStatus(e.target.value)} size=\"lg\">\r\n                                                                <option value=\"Not Started\">Not Started</option>\r\n                                                                <option value=\"In Progress\">In Progress</option>\r\n                                                                <option value=\"On Hold\">On Hold</option>  \r\n                                                                <option value=\"Cancelled\">Cancelled</option>\r\n                                                                <option value=\"Finished\">Finished</option>\r\n                                                            </Form.Select>\r\n                                                            <p style={danger}>{errors.status}</p>\r\n                                                        </Form.Group>\r\n                                                        <Row>\r\n                                                            <Col>\r\n                                                                <Form.Group controlId=\"totalrateID\">\r\n                                                                    <Form.Label>*Total Rate</Form.Label>\r\n                                                                    <Form.Control onChange={(e) => setProject_cost(parseInt(e.target.value))}  type=\"Number\" size = 'lg'/>\r\n                                                                </Form.Group>\r\n                                                            </Col>\r\n                                                            <Col>\r\n                                                                <Form.Group controlId=\"estimatedhoursID\">\r\n                                                                    <Form.Label>*Estimated Hours</Form.Label>\r\n                                                                    <Form.Control onChange={(e) => setEstimated_hours(parseInt(e.target.value))}  type=\"Number\" size = 'lg'/>\r\n                                                                </Form.Group>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <Row>\r\n                                                            <Col>\r\n                                                                <Form.Group controlId=\"startdateID\">\r\n                                                                    <Form.Label>*Start Date</Form.Label>\r\n                                                                    <Form.Control onChange={(e) => setStart_date(new Date(e.target.value))}  type=\"date\"  size = 'lg'/>\r\n                                                                </Form.Group>\r\n                                                                <p style={danger}>{errors.start_date}</p>\r\n                                                            </Col>\r\n                                                            <Col>\r\n                                                                <Form.Group controlId=\"deadlineID\">\r\n                                                                    <Form.Label>*Deadline</Form.Label>\r\n                                                                    <Form.Control onChange={(e) => setDeadline(new Date(e.target.value))}  type=\"date\"  size = 'lg'/>\r\n                                                                </Form.Group>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <div className=\"dropdown-container\">\r\n                                                            <Select\r\n                                                                options={staffsAll}\r\n                                                                placeholder=\"Select Staff\"\r\n                                                                onChange={selectStaff}\r\n                                                                isSearchable={true}\r\n                                                                instanceId=\"unique-staff-id\"\r\n                                                                isMulti\r\n                                                            />\r\n                                                        </div>\r\n                                                        <Form.Group controlId=\"descriptionID\">\r\n                                                            <Form.Label>*Description</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setDescription(e.target.value)} as=\"textarea\" rows={3}/>\r\n                                                        </Form.Group>\r\n                                                    </div>\r\n                                                </Col>\r\n                                                <Col md=\"2\">\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Portlet.Body>\r\n                                    </Portlet>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"projectsetting\">\r\n                                    <Portlet>\r\n                                        <Portlet.Body>\r\n                                            <p>Have not yet</p>\r\n                                        </Portlet.Body>\r\n                                    </Portlet>\r\n                                </Tab.Pane>\r\n                            </Tab.Content>\r\n                            {/* END Tabs */}\r\n                        </Portlet.Body>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet>\r\n                </Tab.Container>\r\n            </Col>\r\n            <Col md = \"2\"></Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default NewOne\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\project\\view.tsx",["961","962","963","964"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport Select from 'react-select'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Project_GetOne, Admin_Project_Edit, Admin_Staff_GetAll, Admin_Client_Get} from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const id = props.id\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    interface Errors {\r\n        name: string,\r\n        status : string,\r\n        billing_type: string,\r\n        start_date: string\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({name: '', status: '', billing_type: '', start_date: ''})\r\n    const [newOne, setNewOne]= React.useState({})\r\n    const danger = {color : \"red\"}\r\n    \r\n    const [name, setName] = React.useState('')\r\n    const [client, setClient] = React.useState('')\r\n    const [billing_type, setBilling_type] = React.useState('')\r\n    const [status, setStatus] = React.useState('')\r\n    const [project_cost, setProject_cost] = React.useState(1)\r\n    const [estimated_hours, setEstimated_hours] = React.useState(0)\r\n    const [staffs, setStaffs] = React.useState([''])\r\n    const [start_date, setStart_date] = React.useState<Date>()\r\n    const [deadline, setDeadline] = React.useState<Date>()\r\n    const [description, setDescription] = React.useState('')\r\n\r\n    const [clientCompany, setClientCompany] = React.useState('')\r\n    interface Clients {\r\n        value: string,\r\n        label : string\r\n    }\r\n    const [clients, setClients] = React.useState<Clients[]>([])\r\n    interface StaffsAll {\r\n        value: string,\r\n        label : string\r\n    }\r\n    const [staffsAll, setStaffsAll] = React.useState<StaffsAll[]>([])\r\n    const [staffName, setStaffName] = React.useState([''])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Project_GetOne + `/${id}`, {headers})\r\n            .then(res => {\r\n                setName(res.data.name)\r\n                setClient(res.data.client._id)\r\n                setClientCompany(res.data.client.company)\r\n                setBilling_type(res.data.billing_type)\r\n                setStatus(res.data.status)\r\n                setProject_cost(res.data.project_cost)\r\n                setEstimated_hours(res.data.estimated_hours)\r\n                let staff = []\r\n                let staffname = []\r\n                for(let i = 0; i < res.data.staffs.length; i++)\r\n                {\r\n                    staff.push(res.data.staffs[i]._id)\r\n                    staffname.push(res.data.staffs[i].firstname)\r\n                }\r\n                setStaffs(staff)\r\n                setStaffName(staffname)\r\n                setStart_date(res.data.start_date)\r\n                setDeadline(res.data.deadline)\r\n                setDescription(res.data.description)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }, [])\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Client_Get, {headers})\r\n            .then(res => {\r\n                let temp = []\r\n                for(let i = 0; i < res.data.data.length; i++)\r\n                {\r\n                    temp.push({value: res.data.data[i]._id, label: res.data.data[i].company})\r\n                }\r\n                setClients(temp)\r\n                setClient(res.data.data[0]._id)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Staff_GetAll + `/1/0/search:/sort:1`, {headers})\r\n            .then(res => {\r\n                let temp = []\r\n                for(let i = 0; i < res.data.all.length; i++)\r\n                {\r\n                    temp.push({value: res.data.all[i]._id, label: res.data.all[i].firstname})\r\n                }\r\n                setStaffsAll(temp)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n    \r\n    React.useEffect(() => {\r\n        setNewOne({name, client, start_date, deadline, billing_type, status, project_cost, estimated_hours, staffs, description})\r\n    }, [name, client, start_date, deadline, billing_type, status, project_cost, estimated_hours, staffs.length, description])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n\r\n    const displayInputDate = (e: any) => {\r\n        if (e !== undefined) {\r\n            const data = e.slice(0, 10);\r\n            return data\r\n        }\r\n    }\r\n\r\n    function selectStaff(data: any) {\r\n        let temp = []\r\n        for(let i = 0; i < data.length; i++){\r\n            temp.push(data[i].value)\r\n        }\r\n        setStaffs(temp)\r\n    }\r\n\r\n    function selectClient(data: any) {\r\n        // setClientCompany(data.label)\r\n        setClient(data.value)\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.put(Admin_Project_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                let error : Errors= {name: '', status: '', billing_type: '', start_date: ''}\r\n                !isEmpty(err.response.data.name) ? error.name = err.response.data.name : ''\r\n                !isEmpty(err.response.data.status)? error.status = err.response.data.status : ''\r\n                !isEmpty(err.response.data.billing_type) ? error.billing_type = err.response.data.billing_type : ''\r\n                !isEmpty(err.response.data.start_date) ? error.start_date = err.response.data.start_date : ''\r\n                setErrors(error)\r\n            })\r\n    }\r\n\r\n    const ViewStaffs = () => {\r\n        const viewstaffs = staffName.join(', ')\r\n        return(<p>Staffs: {viewstaffs}</p>)\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"2\"></Col>\r\n            <Col md = \"8\">\r\n                <Tab.Container defaultActiveKey=\"project\">\r\n                    <Portlet>\r\n                        <Portlet.Header bordered>\r\n                            <Portlet.Addon>\r\n                                {/* BEGIN Nav */}\r\n                                <Nav variant=\"lines\" portlet>\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey=\"project\">* Project</Nav.Link>\r\n                                    </Nav.Item>\r\n                                </Nav>\r\n                            </Portlet.Addon>\r\n                            <Portlet.Addon>\r\n                                <Nav variant=\"lines\" portlet>\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey=\"projectsetting\">* Project Settings</Nav.Link>\r\n                                    </Nav.Item>\r\n                                </Nav>\r\n                                {/* END Nav */}\r\n                            </Portlet.Addon>\r\n                        </Portlet.Header>\r\n                        <Portlet.Body>\r\n                            {/* BEGIN Tabs */}\r\n                            <Tab.Content>\r\n                                <Tab.Pane eventKey=\"project\">\r\n                                    <Portlet>\r\n                                        <Portlet.Body>\r\n                                            <Row>\r\n                                                <Col md=\"2\">\r\n                                                </Col>\r\n                                                <Col md=\"8\">\r\n                                                    <div className=\"d-grid gap-3\">\r\n                                                        <Form.Group controlId=\"nameID\">\r\n                                                            <Form.Label>*Project Name</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setName(e.target.value)} defaultValue={name} type=\"text\" size = 'lg'/>\r\n                                                            <p style={danger}>{errors.name}</p>\r\n                                                        </Form.Group>\r\n                                                        <div className=\"dropdown-container\">\r\n                                                            <p>Client : {clientCompany}</p>\r\n                                                            <Select\r\n                                                                options={clients}\r\n                                                                placeholder=\"Select Client\"\r\n                                                                onChange={selectClient}\r\n                                                                isSearchable={true}\r\n                                                                instanceId=\"unique-client-id\"\r\n                                                            />\r\n                                                        </div>\r\n                                                        <Form.Group controlId=\"billingtypeID\">\r\n                                                            <Form.Label>*Billing type : {billing_type}</Form.Label>\r\n                                                            <Form.Select onChange={(e) => setBilling_type(e.target.value)} size=\"lg\">\r\n                                                                <option value=\"Fixed Rate\">Fixed Rate</option>\r\n                                                                <option value=\"Project Hours\">Project Hours</option>\r\n                                                                <option value=\"Task Hours\">Task Hours</option>  \r\n                                                            </Form.Select>\r\n                                                            <p style={danger}>{errors.billing_type}</p>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"statusID\">\r\n                                                            <Form.Label>*Status : {status}</Form.Label>\r\n                                                            <Form.Select onChange={(e) => setStatus(e.target.value)} size=\"lg\">\r\n                                                                <option value=\"Not Started\">Not Started</option>\r\n                                                                <option value=\"In Progress\">In Progress</option>\r\n                                                                <option value=\"On Hold\">On Hold</option>  \r\n                                                                <option value=\"Cancelled\">Cancelled</option>\r\n                                                                <option value=\"Finished\">Finished</option>\r\n                                                            </Form.Select>\r\n                                                            <p style={danger}>{errors.status}</p>\r\n                                                        </Form.Group>\r\n                                                        <Row>\r\n                                                            <Col>\r\n                                                                <Form.Group controlId=\"totalrateID\">\r\n                                                                    <Form.Label>*Total Rate</Form.Label>\r\n                                                                    <Form.Control onChange={(e) => setProject_cost(parseInt(e.target.value))} value={project_cost} type=\"Number\" size = 'lg'/>\r\n                                                                </Form.Group>\r\n                                                            </Col>\r\n                                                            <Col>\r\n                                                                <Form.Group controlId=\"estimatedhoursID\">\r\n                                                                    <Form.Label>*Estimated Hours</Form.Label>\r\n                                                                    <Form.Control onChange={(e) => setEstimated_hours(parseInt(e.target.value))} value={estimated_hours} type=\"Number\" size = 'lg'/>\r\n                                                                </Form.Group>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <Row>\r\n                                                            <Col>\r\n                                                                <Form.Group controlId=\"startdateID\">\r\n                                                                    <Form.Label>*Start Date : {displayInputDate(start_date)}</Form.Label>\r\n                                                                    <Form.Control onChange={(e) => setStart_date(new Date(e.target.value))} type=\"date\"  size = 'lg'/>\r\n                                                                </Form.Group>\r\n                                                                <p style={danger}>{errors.start_date}</p>\r\n                                                            </Col>\r\n                                                            <Col>\r\n                                                                <Form.Group controlId=\"deadlineID\">\r\n                                                                    <Form.Label>*Deadline : {displayInputDate(deadline)}</Form.Label>\r\n                                                                    <Form.Control onChange={(e) => setDeadline(new Date(e.target.value))} type=\"date\"  size = 'lg'/>\r\n                                                                </Form.Group>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <ViewStaffs />\r\n                                                        <div className=\"dropdown-container\">\r\n                                                            <Select\r\n                                                                options={staffsAll}\r\n                                                                placeholder=\"Select staff\"\r\n                                                                onChange={selectStaff}\r\n                                                                isSearchable={true}\r\n                                                                isMulti\r\n                                                            />\r\n                                                        </div>\r\n                                                        <Form.Group controlId=\"descriptionID\">\r\n                                                            <Form.Label>*Description</Form.Label>\r\n                                                            <Form.Control onChange={(e) => setDescription(e.target.value)} defaultValue={description} as=\"textarea\" rows={3}/>\r\n                                                        </Form.Group>\r\n                                                    </div>\r\n                                                </Col>\r\n                                                <Col md=\"2\">\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Portlet.Body>\r\n                                    </Portlet>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"projectsetting\">\r\n                                    <Portlet>\r\n                                        <Portlet.Body>\r\n                                            <p>Have not yet</p>\r\n                                        </Portlet.Body>\r\n                                    </Portlet>\r\n                                </Tab.Pane>\r\n                            </Tab.Content>\r\n                            {/* END Tabs */}\r\n                        </Portlet.Body>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet>\r\n                </Tab.Container>\r\n            </Col>\r\n            <Col md = \"2\"></Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\clientfield\\index.tsx",["965","966"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Client_Field_GetAll, Admin_Client_Field_Delete, Admin_Client_Field_Active} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst GetAllComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [clientFields, setClientFields] = React.useState([])\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Client_Field_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setClientFields(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Client_Field_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const change = async (e: any, id: any) => {\r\n        const active = {active : e.target.checked}\r\n        await axios.put(Admin_Client_Field_Active + `/${id}`, active, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/setting/clientfield/new')}> Create ClientField </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={6}></Col>\r\n                    <Col md={2}>\r\n                        {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                            {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                            {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                        {/* </FloatingLabel> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope='col'>Action</th>\r\n                            <th scope=\"col\">Active</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            clientFields.map((clientField: any) => (\r\n                                <tr key={clientField._id}>\r\n                                    <td>\r\n                                        {clientField.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <Swal7 id = {clientField._id}/>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Form.Switch id={clientField._id} onChange={(e) => change(e, clientField._id)}  defaultChecked={clientField.active} />\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetAllComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\clientfield\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\clientgroup\\index.tsx",["967","968"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Client_Group_Delete, Admin_Client_Group_GetAll} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst GetALLComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [groups, setGroups] = React.useState([])\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Client_Group_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setGroups(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Client_Group_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/setting/clientgroup/new')}> New Client Group </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={6}></Col>\r\n                    <Col md={2}>\r\n                        {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                            {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                            {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                        {/* </FloatingLabel> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">* Name</th>\r\n                            <th scope=\"col\">Options</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            groups.map((group: any) => (\r\n                                <tr key={group._id}>\r\n                                    <td>\r\n                                        {group.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <Swal7 id = {group._id}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetALLComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\clientgroup\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\contract\\index.tsx",["969","970"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Contract_Type_GetAll, Admin_Contract_Type_Delete} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst GetALLComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [types, setTypes] = React.useState([])\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Contract_Type_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setTypes(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Contract_Type_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/setting/contract/new')}> New Contract Type </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={6}></Col>\r\n                    <Col md={2}>\r\n                        {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                            {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                            {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                        {/* </FloatingLabel> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">* Name</th>\r\n                            <th scope=\"col\">Options</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            types.map((type: any) => (\r\n                                <tr key={type._id}>\r\n                                    <td>\r\n                                        {type.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <Swal7 id = {type._id}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetALLComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\contract\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\currency\\index.tsx",["971","972","973"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Currency_GetAll, Admin_Currency_Delete, Admin_Currency_Default} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst GetALLComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [currencies, setCurrencies] = React.useState([])\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n    const [defaultOne, setDefaultOne] = React.useState()\r\n    const [defaultsucess, setDefaultsucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Currency_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setCurrencies(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess, defaultsucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Currency_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    React.useEffect(() => {\r\n        if(!isEmpty(defaultOne))\r\n        {\r\n            axios.put(Admin_Currency_Default + `/${defaultOne}`, {headers})\r\n                .then(res => {\r\n                    setDefaultsucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [defaultOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    const isDefault = (isdefault: any, id: any) => {\r\n        const handleDefault = () => {\r\n            setDefaultOne(id)\r\n        }\r\n        if(isdefault){return}\r\n        return <Button variant=\"text-info\" onClick={handleDefault} pill size='sm'>default</Button>\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/setting/currency/new')}> New Currency </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={6}></Col>\r\n                    <Col md={2}>\r\n                        {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                            {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                            {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                        {/* </FloatingLabel> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">* Name</th>\r\n                            <th scope=\"col\">* Symbol</th>\r\n                            <th scope=\"col\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            currencies.map((currency: any) => (\r\n                                <tr key={currency._id}>\r\n                                    <td>\r\n                                        {currency.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        {currency.symbol}\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/setting/currency/[id]', query: {id: currency._id}})} pill size='sm'>\r\n                                                view\r\n                                            </Button>\r\n                                            <Swal7 id = {currency._id}/>\r\n                                            {isDefault(currency.isdefault, currency._id)}\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetALLComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\currency\\new.tsx",["974"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Currency_ADD } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst NewOne = () => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const [newOne, setNewOne]= React.useState({})\r\n\r\n    const [name, setName] = React.useState('')\r\n    const [symbol, setSymbol] = React.useState('')\r\n    const [decimal_separator, setDecimal_separator] = React.useState('')\r\n    const [thousand_separator, setThousand_separator] = React.useState('')\r\n    const [placement, setPlacement] = React.useState('')\r\n\r\n    interface Errors {\r\n        name: any,\r\n        symbol: any\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({name: '', symbol: ''})\r\n    const danger = {color : \"red\"}\r\n    \r\n    React.useEffect(() => {\r\n        setNewOne({name, thousand_separator, placement, symbol, decimal_separator})\r\n    }, [name, placement, thousand_separator, placement, symbol])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n\r\n    const onCheck = (e: any) => {\r\n        setPlacement(e.target.id)\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        // console.log(newOne)\r\n        await axios.post(Admin_Currency_ADD, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({name: '', symbol: ''})\r\n            })\r\n            .catch(err => {\r\n                let error : Errors = {\r\n                    name: '',\r\n                    symbol: ''\r\n                }\r\n                !isEmpty(err.response.data.name)? error.name = err.response.data.name : ''\r\n                !isEmpty(err.response.data.symbol)? error.symbol = err.response.data.symbol : ''\r\n                setErrors(error)\r\n            })\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <h4>* New Currency</h4>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <Form.Group controlId=\"nameID\">\r\n                            <Form.Label>* Name</Form.Label>\r\n                            <Form.Control onChange={(e) => setName(e.target.value)} type=\"text\" size = 'lg'/>\r\n                            <p style={danger}>{errors.name}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"symbolID\">\r\n                            <Form.Label>* Symbol</Form.Label>\r\n                            <Form.Control onChange={(e) => setSymbol(e.target.value)} type=\"text\" size = 'lg'/>\r\n                            <p style={danger}>{errors.symbol}</p>\r\n                        </Form.Group>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group controlId=\"decimalID\">\r\n                                    <Form.Label>* Decimal Separator</Form.Label>\r\n                                    <Form.Control onChange={(e) => setDecimal_separator(e.target.value)} type=\"text\" size = 'lg'/>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group controlId=\"thousandID\">\r\n                                    <Form.Label>* Thousand Separator</Form.Label>\r\n                                    <Form.Control onChange={(e) => setThousand_separator(e.target.value)} type=\"text\" size = 'lg'/>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <p></p>\r\n                        <p>* Currency Placement </p>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Check \r\n                                    type=\"radio\" \r\n                                    id=\"before\" \r\n                                    name=\"placement\" \r\n                                    label=\"Before Amount\"\r\n                                    onChange={(e)=>onCheck(e)}\r\n                                />\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Check\r\n                                    type=\"radio\"\r\n                                    id=\"after\"\r\n                                    name=\"placement\"\r\n                                    label=\"After Amount\"\r\n                                    onChange={(e)=>onCheck(e)}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default NewOne\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\currency\\view.tsx",["975","976"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Currency_GetOne, Admin_Currency_Edit } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    interface Errors {\r\n        name: any,\r\n        symbol: any,\r\n        currency: any\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({name: '', symbol: '', currency: ''})\r\n    const [newOne, setNewOne]= React.useState({})\r\n    \r\n    const [name, setName] = React.useState('')\r\n    const [symbol, setSymbol] = React.useState('')\r\n    const [decimal_separator, setDecimal_separator] = React.useState('')\r\n    const [thousand_separator, setThousand_separator] = React.useState('')\r\n    const [placement, setPlacement] = React.useState('')\r\n    const [placementValue, setPlacementValue] = React.useState(['', ''])\r\n\r\n    const danger = {color : \"red\"}\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Currency_GetOne + `/${id}`, {headers})\r\n            .then(res => {\r\n                setName(res.data.name)\r\n                setSymbol(res.data.symbol)\r\n                setPlacement(res.data.placement)\r\n                setDecimal_separator(res.data.decimal_separator)\r\n                setThousand_separator(res.data.thousand_separator)\r\n                setPlacementValue([\"before\", \"after\"])\r\n            })\r\n            .catch(err => {\r\n                let error : Errors = {name: '', symbol: '', currency: ''}\r\n                error.currency = err.response.data.currency\r\n                setErrors(error);\r\n            })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setNewOne({name, thousand_separator, placement, symbol, decimal_separator})\r\n    }, [name, placement, thousand_separator, placement, symbol])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n\r\n    const onDefaultcheck = (id: any) => {\r\n        if(placement == id) { return true }\r\n        return false\r\n    }\r\n\r\n    const onCheck = (e: any) => {\r\n        setPlacement(e.target.id)\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.put(Admin_Currency_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({name: '', symbol: '', currency: ''})\r\n            })\r\n            .catch(err => {\r\n                let error : Errors = {name: '', symbol: '', currency: ''}\r\n                !isEmpty(err.response.data.name)? error.name = err.response.data.name : ''\r\n                !isEmpty(err.response.data.symbol)? error.symbol = err.response.data.symbol : ''\r\n                setErrors(error)\r\n            })\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <p style={danger}>{errors.currency}</p>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                    <Form.Group controlId=\"nameID\">\r\n                        <Form.Label>* Name</Form.Label>\r\n                            <Form.Control onChange={(e) => setName(e.target.value)} defaultValue={name} type=\"text\" size = 'lg'/>\r\n                            <p style={danger}>{errors.name}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"symbolID\">\r\n                            <Form.Label>* Symbol</Form.Label>\r\n                            <Form.Control onChange={(e) => setSymbol(e.target.value)} defaultValue={symbol} type=\"text\" size = 'lg'/>\r\n                            <p style={danger}>{errors.symbol}</p>\r\n                        </Form.Group>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group controlId=\"decimalID\">\r\n                                    <Form.Label>* Decimal Separator</Form.Label>\r\n                                    <Form.Control onChange={(e) => setDecimal_separator(e.target.value)} defaultValue={decimal_separator} type=\"text\" size = 'lg'/>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group controlId=\"thousandID\">\r\n                                    <Form.Label>* Thousand Separator</Form.Label>\r\n                                    <Form.Control onChange={(e) => setThousand_separator(e.target.value)} defaultValue={thousand_separator} type=\"text\" size = 'lg'/>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <p></p>\r\n                        <p>* Currency Placement </p>\r\n                        <Row>\r\n                            {\r\n                                placementValue.map((value)=>(\r\n                                    <Col key={value}>\r\n                                        <Form.Check \r\n                                            type=\"radio\" \r\n                                            id={value} \r\n                                            name=\"placement\" \r\n                                            label={value}\r\n                                            defaultChecked = {onDefaultcheck(value)}\r\n                                            onChange={(e)=>onCheck(e)}\r\n                                        />\r\n                                    </Col>                                    \r\n                                ))\r\n                            }\r\n                        </Row>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\department\\index.tsx",["977","978"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Department_GetAll, Admin_Department_Delete} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst GetALLComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [departments, setDepartments] = React.useState([])\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Department_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setDepartments(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Department_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/setting/department/new')}> New Department </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={6}></Col>\r\n                    <Col md={2}>\r\n                        {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                            {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                            {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                        {/* </FloatingLabel> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">* Department Name</th>\r\n                            <th scope=\"col\">* Email</th>\r\n                            <th scope=\"col\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            departments.map((department: any) => (\r\n                                <tr key={department._id}>\r\n                                    <td>\r\n                                        {department.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        {department.email}\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/setting/department/[id]', query: {id: department._id}})} pill size='sm'>\r\n                                                view\r\n                                            </Button>\r\n                                            <Swal7 id = {department._id}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetALLComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\department\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\department\\view.tsx",["979"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Department_GetOne, Admin_Department_Edit } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    interface Errors {\r\n        name: any,\r\n        email: any,\r\n        folder: any,\r\n        department: any\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({name: '', email: '', folder: '', department: ''})\r\n    const [newOne, setNewOne]= React.useState({})\r\n    \r\n    const [name, setName] = React.useState('')\r\n    const [email, setEmail] = React.useState('')\r\n    const [folder, setFolder] = React.useState('')\r\n    const danger = {color : \"red\"}\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Department_GetOne + `/${id}`, {headers})\r\n            .then(async res => {\r\n                setName(res.data.name)\r\n                setEmail(res.data.email)\r\n                setFolder(res.data.folder)\r\n            })\r\n            .catch(err => {\r\n                let error = {name: '', email: '', folder: '', department: ''}\r\n                error.department = err.response.data.department\r\n                setErrors(error);\r\n            })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setNewOne({name, email, folder})\r\n    }, [name, email, folder])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.put(Admin_Department_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                let error = {name: '', email: '', folder: '', department: ''}\r\n                !isEmpty(err.response.data.email) ? error.email = err.response.data.email : ''\r\n                !isEmpty(err.response.data.name)? error.name = err.response.data.name : ''\r\n                !isEmpty(err.response.data.folder)? error.folder = err.response.data.folder : ''\r\n                !isEmpty(err.response.data.department)? error.department = err.response.data.department : ''\r\n                setErrors(error)\r\n            })\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <h4>{name}</h4>\r\n                            <p style={danger}>{errors.department}</p>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <Form.Group controlId=\"emailID\">\r\n                            <Form.Label>* Email</Form.Label>\r\n                            <Form.Control onChange={(e) => setEmail(e.target.value)} defaultValue={email} type=\"text\" size = 'lg'/>\r\n                            <p style={danger}>{errors.email}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"folderID\">\r\n                            <Form.Label>* Folder</Form.Label>\r\n                            <Form.Control onChange={(e) => setFolder(e.target.value)} defaultValue={folder} type=\"text\" size = 'lg'/>\r\n                            <p style={danger}>{errors.folder}</p>\r\n                        </Form.Group>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\expensecategory\\index.tsx",["980","981"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Expense_Category_GetAll, Admin_Expense_Category_Delete} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst GetALLComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [categories, setCategories] = React.useState([])\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Expense_Category_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setCategories(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Expense_Category_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/setting/expensecategory/new')}> Create Expense Category </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={6}></Col>\r\n                    <Col md={2}>\r\n                        {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                            {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                            {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                        {/* </FloatingLabel> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Description</th>\r\n                            <th scope='col'>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            categories.map((category: any) => (\r\n                                <tr key={category._id}>\r\n                                    <td>\r\n                                        {category.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        {category.description}\r\n                                    </td>\r\n                                    <td>\r\n                                        <Swal7 id = {category._id}/>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetALLComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\expensecategory\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\itemfield\\index.tsx",["982","983"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Item_Field_GetAll, Admin_Item_Field_Delete, Admin_Item_Field_Active} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst GetALLComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [itemFields, setItemFields] = React.useState([])\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Item_Field_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setItemFields(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Item_Field_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const change = async (e: any, id: any) => {\r\n        const active = {active : e.target.checked}\r\n        await axios.put(Admin_Item_Field_Active + `/${id}`, active, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/setting/itemfield/new')}> New ItemField </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={6}></Col>\r\n                    <Col md={2}>\r\n                        {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                            {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                            {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                        {/* </FloatingLabel> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Slug</th>\r\n                            <th scope='col'>Action</th>\r\n                            <th scope=\"col\">Active</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            itemFields.map((itemField: any) => (\r\n                                <tr key={itemField._id}>\r\n                                    <td>\r\n                                        {itemField.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        {itemField.slug}\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/setting/itemfield/[id]', query: {id: itemField._id}})} pill size='sm'>\r\n                                                view\r\n                                            </Button>\r\n                                            <Swal7 id = {itemField._id}/>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Form.Switch id={itemField._id} onChange={(e) => change(e, itemField._id)}  defaultChecked={itemField.active} />\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetALLComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\itemfield\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\itemfield\\view.tsx",["984"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Item_Field_GetOne, Admin_Item_Field_Edit } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    interface Errors {\r\n        name: any,\r\n        slug: any,\r\n        field: any\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({name: '', slug: '', field: ''})\r\n    const [newOne, setNewOne]= React.useState({})\r\n    \r\n    const [name, setName] = React.useState('')\r\n    const [slug, setSlug] = React.useState('')\r\n    const danger = {color : \"red\"}\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Item_Field_GetOne + `/${id}`, {headers})\r\n            .then(async res => {\r\n                setName(res.data.name)\r\n                setSlug(res.data.slug)\r\n            })\r\n            .catch(err => {\r\n                let error = {name: '', slug: '', field: ''}\r\n                error.field = err.response.data.field\r\n                setErrors(error);\r\n            })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setNewOne({name, slug})\r\n    }, [name, slug])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.put(Admin_Item_Field_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({name: '', slug: '', field: ''})\r\n            })\r\n            .catch(err => {\r\n                let error = {name: '', slug: '', field: ''}\r\n                !isEmpty(err.response.data.slug) ? error.slug = err.response.data.slug : ''\r\n                !isEmpty(err.response.data.name)? error.name = err.response.data.name : ''\r\n                !isEmpty(err.response.data.field)? error.field = err.response.data.field : ''\r\n                setErrors(error)\r\n            })\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Body>\r\n                        <Form.Group controlId=\"nameID\">\r\n                                <Form.Label>* Name</Form.Label>\r\n                                <Form.Control onChange={(e) => setName(e.target.value)} defaultValue={name} type=\"text\" size = 'lg'/>\r\n                                <p style={danger}>{errors.name}</p>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"slugID\">\r\n                                <Form.Label>* Slug</Form.Label>\r\n                                <Form.Control onChange={(e) => setSlug(e.target.value)} defaultValue={slug} type=\"text\" size = 'lg'/>\r\n                                <p style={danger}>{errors.slug}</p>\r\n                            </Form.Group>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\paymentmode\\index.tsx",["985","986"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Payment_Mode_GetAll, Admin_Payment_Mode_Delete, Admin_Payment_Mode_Active} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst GetALLComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [modes, setModes] = React.useState([])\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Payment_Mode_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setModes(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Payment_Mode_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const change = async (e: any, id: any) => {\r\n        const active = {active : e.target.checked}\r\n        await axios.put(Admin_Payment_Mode_Active + `/${id}`, active, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/setting/paymentmode/new')}> New Payment Mode </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={6}></Col>\r\n                    <Col md={2}>\r\n                        {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                            {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                            {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                        {/* </FloatingLabel> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Bank Accounts / Description</th>\r\n                            <th scope='col'>Action</th>\r\n                            <th scope=\"col\">Active</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            modes.map((mode: any) => (\r\n                                <tr key={mode._id}>\r\n                                    <td>\r\n                                        {mode.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        {mode.description}\r\n                                    </td>\r\n                                    <td>\r\n                                        <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/setting/paymentmode/[id]', query: {id: mode._id}})} pill size='sm'>\r\n                                            view\r\n                                        </Button>\r\n                                        <Swal7 id = {mode._id}/>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Form.Switch id={mode._id} onChange={(e) => change(e, mode._id)}  defaultChecked={mode.active} />\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetALLComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\paymentmode\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\paymentmode\\view.tsx",["987"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Payment_Mode_GetOne, Admin_Payment_Mode_Edit } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    interface Errors {\r\n        name: any,\r\n        paymentMode: any\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({name: '', paymentMode: ''})\r\n    const [newOne, setNewOne]= React.useState({})\r\n    \r\n    const [name, setName] = React.useState('')\r\n    const [active, setActive] = React.useState()\r\n    const [show_on_pdf, setShow_on_pdf] = React.useState()\r\n    const [invoices_only, setInvoices_only] = React.useState()\r\n    const [expenses_only, setExpenses_only] = React.useState()\r\n    const [selected_by_default, setSelected_by_default] = React.useState()\r\n    const [description, setDescription] = React.useState('')\r\n    const danger = {color : \"red\"}\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Payment_Mode_GetOne + `/${id}`, {headers})\r\n            .then(async res => {\r\n                setName(res.data.name)\r\n                setActive(res.data.active)\r\n                setShow_on_pdf(res.data.show_on_pdf)\r\n                setInvoices_only(res.data.invoices_only)\r\n                setExpenses_only(res.data.expenses_only)\r\n                setSelected_by_default(res.data.selected_by_default)\r\n                setDescription(res.data.description)\r\n            })\r\n            .catch(err => {\r\n                let error = {name: '', paymentMode: ''}\r\n                error.paymentMode = err.response.data.paymentMode\r\n                setErrors(error);\r\n            })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setNewOne({name, description, show_on_pdf, invoices_only, expenses_only, selected_by_default, active})\r\n    }, [name, description, show_on_pdf, invoices_only, expenses_only, selected_by_default, active])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.put(Admin_Payment_Mode_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({name: '', paymentMode: ''})\r\n            })\r\n            .catch(err => {\r\n                let error = {name: '', paymentMode: ''}\r\n                if(!isEmpty(err.response)){\r\n                    !isEmpty(err.response.data.name)? error.name = err.response.data.name : ''\r\n                }\r\n                setErrors(error);\r\n            })\r\n    }\r\n    \r\n    const change = (func: any, e: any) => {\r\n        func(e.target.checked) \r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <h4>* New Payment Mode</h4>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <Form.Group controlId=\"nameID\">\r\n                            <Form.Label>*Payment Mode Name</Form.Label>\r\n                            <Form.Control onChange={(e) => setName(e.target.value)} defaultValue={name} type=\"text\" size = 'lg'/>\r\n                            <p style={danger}>{errors.name}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"descriptionID\">\r\n                            <Form.Label>Bank Accounts / Description</Form.Label>\r\n                            <Form.Control onChange={(e) => setDescription(e.target.value)} defaultValue={description} as=\"textarea\" rows={3}/>\r\n                        </Form.Group>\r\n                            <p></p>\r\n                            <Form.Check \r\n                                type=\"checkbox\"  \r\n                                name = \"active\" \r\n                                label= \"Active\"\r\n                                defaultChecked = {active} \r\n                                onChange={(e) => change(setActive, e)}\r\n                            />\r\n                            <p></p>\r\n                            <Form.Check \r\n                                type=\"checkbox\"  \r\n                                name = \"show_on_pdf\" \r\n                                label= \"Show Bank Accounts / Description on Invoice PDF\"\r\n                                defaultChecked = {show_on_pdf} \r\n                                onChange={(e) => change(setShow_on_pdf, e)}\r\n                            />\r\n                            <p></p>\r\n                            <Form.Check \r\n                                type=\"checkbox\"  \r\n                                name = \"selected_by_default\" \r\n                                label= \"Selected by default on invoice\"\r\n                                defaultChecked = {selected_by_default} \r\n                                onChange={(e) => change(setSelected_by_default, e)}\r\n                            />\r\n                            <p></p>\r\n                            <Form.Check \r\n                                type=\"checkbox\"  \r\n                                name = \"invoices_only\" \r\n                                label= \"Invoices Only\"\r\n                                defaultChecked = {invoices_only} \r\n                                onChange={(e) => change(setInvoices_only, e)}\r\n                            />\r\n                            <p></p>\r\n                            <Form.Check \r\n                                type=\"checkbox\"  \r\n                                name = \"expenses_only\" \r\n                                label= \"Expenses Only\"\r\n                                defaultChecked = {expenses_only} \r\n                                onChange={(e) => change(setExpenses_only, e)}\r\n                            />\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\role\\index.tsx",["988","989"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Role_GetAll, Admin_Role_Delete} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst GetALLComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [roles, setRoles] = React.useState([])\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Role_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setRoles(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Role_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/setting/role/new')}> New Role </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={6}></Col>\r\n                    <Col md={2}>\r\n                        {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                            {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                            {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                        {/* </FloatingLabel> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">* Role Name</th>\r\n                            <th scope=\"col\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            roles.map((role: any) => (\r\n                                <tr key={role._id}>\r\n                                    <td>\r\n                                        {role.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/setting/role/[id]', query: {id: role._id}})} pill size='sm'>\r\n                                                view\r\n                                            </Button>\r\n                                            <Swal7 id = {role._id}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetALLComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\role\\new.tsx",["990"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Role_ADD } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst NewOne = () => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [name, setName] = React.useState('')\r\n    const [permissions, setPermissions] = React.useState('')\r\n    interface Contract {\r\n        [key: string]: any\r\n    }\r\n    interface Staff {\r\n        [key: string]: any\r\n    }\r\n    const [contract, setContract] = React.useState<Contract>([{View_Own:false},{View_Global:false},{Create:false},{Edit:false},{Delete:false}])\r\n    const [staff, setStaff] = React.useState<Staff>([{View_Global:false},{Create:false},{Edit:false},{Delete:false}])\r\n    const [contractChange, setContractChange] = React.useState(0.1)\r\n    const [staffChange, setStaffChange] = React.useState(0.1)\r\n    interface Errors {\r\n        name: any,\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({name: ''})\r\n    const danger = {color : \"red\"}\r\n    \r\n    React.useEffect(() => {\r\n        setPermissions(JSON.stringify({contract, staff}))\r\n    }, [name, contractChange, staffChange])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        const newOne = {name, permissions}\r\n        await axios.post(Admin_Role_ADD, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                let error = {name: ''}\r\n                !isEmpty(err.response.data.name)? error.name = err.response.data.name : ''\r\n                setErrors(error);\r\n            })\r\n    }\r\n\r\n    const change = (e: any, f: any) => {\r\n        switch(f) {\r\n            case 'contract':\r\n                let newContract = contract\r\n                for(let i= 0; i < newContract.length; i++)\r\n                {\r\n                    if(Object.keys(newContract[i]) == e.target.name)\r\n                    {\r\n                        newContract[i][e.target.name] = !newContract[i][e.target.name]\r\n                    }\r\n                }\r\n                setContract(newContract)\r\n                setContractChange(Math.random())\r\n                break\r\n            case 'staff':\r\n                let newStaff = staff\r\n                for(let i= 0; i < newStaff.length; i++)\r\n                {\r\n                    if(Object.keys(newStaff[i]) == e.target.name)\r\n                    {\r\n                        newStaff[i][e.target.name] = !newStaff[i][e.target.name]\r\n                    }\r\n                }\r\n                setStaff(newStaff)\r\n                setStaffChange(Math.random())\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <h4>* New Role</h4>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <Form.Group controlId=\"nameID\">\r\n                            <Form.Label>* Role Name</Form.Label>\r\n                            <Form.Control onChange={(e) => setName(e.target.value)} type=\"text\" size = 'lg'/>\r\n                            <p style={danger}>{errors.name}</p>\r\n                        </Form.Group>\r\n                        <p></p>\r\n                        <Table bordered>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>\r\n                                        Feature\r\n                                    </th>\r\n                                    <th>\r\n                                        Capabilities\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n\t\t\t\t\t\t\t\t\t<td >Contract</td>\r\n\t\t\t\t\t\t\t\t\t<td>\r\n                                        <Form.Check type=\"checkbox\" id=\"cntown\" name=\"View_Own\" onChange={(e) => change(e, \"contract\")} label=\"View (Own)\"/>\r\n                                        <Form.Check type=\"checkbox\" id=\"cntglobal\" name=\"View_Global\" onChange={(e) => change(e, \"contract\")} label=\"View (Global)\"/>\r\n                                        <Form.Check type=\"checkbox\" id=\"cntcreate\" name=\"Create\" onChange={(e) => change(e, \"contract\")} label=\"Create\"/>\r\n                                        <Form.Check type=\"checkbox\" id=\"cntEdit\" name=\"Edit\" onChange={(e) => change(e, \"contract\")} label=\"Edit\"/>\r\n                                        <Form.Check type=\"checkbox\" id=\"cntDelete\" name=\"Delete\" onChange={(e) => change(e, \"contract\")} label=\"Delete\"/>\r\n                                    </td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n                                <tr>\r\n\t\t\t\t\t\t\t\t\t<td>Staff</td>\r\n\t\t\t\t\t\t\t\t\t<td>\r\n                                        <Form.Check type=\"checkbox\" id=\"staffglobal\" name=\"View_Global\" onChange={(e) => change(e, \"staff\")} label=\"View (Global)\"/>\r\n                                        <Form.Check type=\"checkbox\" id=\"staffCreate\" name=\"Create\" onChange={(e) => change(e, \"staff\")} label=\"Create\"/>\r\n                                        <Form.Check type=\"checkbox\" id=\"staffEdit\" name=\"Edit\" onChange={(e) => change(e, \"staff\")} label=\"Edit\"/>\r\n                                        <Form.Check type=\"checkbox\" id=\"staffDelete\" name=\"Delete\" onChange={(e) => change(e, \"staff\")} label=\"Delete\"/>\r\n                                    </td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default NewOne\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\role\\view.tsx",["991","992"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Role_GetOne, Admin_Role_Edit } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    const [error, setError] = React.useState('')\r\n    const [permissions, setPermissions] = React.useState('')\r\n    const [name, setName] = React.useState('')\r\n    interface Role {\r\n        [key: string]: any\r\n    }\r\n    interface Permission {\r\n        [key: string]: any\r\n    }\r\n    const [contract, setContract] = React.useState<Role>([{View_Own:false},{View_Global:false},{Create:false},{Edit:false},{Delete:false}])\r\n    const [staff, setStaff] = React.useState<Role>([{View_Global:false},{Create:false},{Edit:false},{Delete:false}])\r\n    const [permissionsParam, setPermissionsParam] = React.useState<Permission>([])\r\n    const [contractChange, setContractChange] = React.useState(0.1)\r\n    const [staffChange, setStaffChange] = React.useState(0.1)\r\n    const danger = {color : \"red\"}\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Role_GetOne + `/${id}`, {headers})\r\n            .then(async res => {\r\n                setName(res.data.name)\r\n                let param = Object.entries(JSON.parse(res.data.permissions))\r\n                setPermissionsParam(param)\r\n                setContract(Object(param[0][1]))\r\n                setStaff(Object(param[1][1]))\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response.data.role)\r\n            })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setPermissions(JSON.stringify({contract, staff}))\r\n    }, [contractChange, staffChange])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        const newOne = {name, permissions}\r\n        await axios.put(Admin_Role_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setError('')\r\n            })\r\n            .catch(err => {\r\n                setError(err.response.data.role)\r\n            })\r\n    }\r\n\r\n    const change = (e: any, f: any) => {\r\n        switch(f) {\r\n            case 'contract':\r\n                let newContract = contract\r\n                for(let i= 0; i < newContract.length; i++)\r\n                {\r\n                    if(Object.keys(newContract[i]) == e.target.name)\r\n                    {\r\n                        newContract[i][e.target.name] = !newContract[i][e.target.name]\r\n                    }\r\n                }\r\n                setContract(newContract)\r\n                setContractChange(Math.random())\r\n                break\r\n            case 'staff':\r\n                let newStaff = staff\r\n                for(let i= 0; i < newStaff.length; i++)\r\n                {\r\n                    if(Object.keys(newStaff[i]) == e.target.name)\r\n                    {\r\n                        newStaff[i][e.target.name] = !newStaff[i][e.target.name]\r\n                    }\r\n                }\r\n                setStaff(newStaff)\r\n                setStaffChange(Math.random())\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <h4>{name}</h4>\r\n                            <p style={danger}>{error}</p>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <p></p>\r\n                        <Table bordered>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>\r\n                                        Feature\r\n                                    </th>\r\n                                    <th>\r\n                                        Capabilities\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    permissionsParam.map((param: any) => (\r\n                                        <tr key={param[0]}>\r\n                                            <td>\r\n                                                {param[0]}\r\n                                            </td>\r\n                                            <td>\r\n                                                {\r\n                                                    param[1].map((capability: any)=> (\r\n                                                        <Form.Check type=\"checkbox\" key={param[0]+Object.keys(capability)} id={param[0]+Object.keys(capability)} checked = {Boolean(Object.values(capability)[0])} name={String(Object.keys(capability))} onChange={(e) => change(e, param[0])} label={Object.keys(capability)}/>\r\n                                                    ))\r\n                                                }\r\n                                                \r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\staff\\index.tsx",["993","994"],"import React from 'react'\r\nimport { Portlet, Table, Form, FloatingLabel, Avatar, Row, Col ,  Button } from '@blueupcode/components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport axios from 'axios'\r\nimport { faUser } from '@fortawesome/free-regular-svg-icons'\r\nimport * as SolidIcon from '@fortawesome/free-solid-svg-icons'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Staff_Active, Admin_Staff_Delete, Admin_Staff_GetAll} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nimport Image from 'next/image'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst StaffComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [size, setSize] = React.useState(10)\r\n    const [staffs, setStaffs] = React.useState([])\r\n    const [search_staff, setSearch_staff] = React.useState('')\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n    const [deletestaff, setDeletestaff] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n    const [sort, setSort] = React.useState(1)\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Staff_GetAll + `/${activeLinkNumber}/${size}/search:${search_staff}/sort:${sort}`, {headers})\r\n            .then(res => {\r\n                setStaffs(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, search_staff, activeLinkNumber, sort, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deletestaff))\r\n        {\r\n            axios.delete(Admin_Staff_Delete + `/${deletestaff}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deletestaff])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then(async (result) => {\r\n                    if (result.isConfirmed) {\r\n                        if(id.id[1] !== undefined)\r\n                        {\r\n                            let body = new FormData()\r\n                            body.append(\"text\", id.id[1])\r\n                            const response = await fetch(\"/api/upload/remove\", {\r\n                                method: \"POST\",\r\n                                body\r\n                            })\r\n                        }\r\n                        setDeletestaff(id.id[0])\r\n                        swal.fire('Deleted!', 'That staff has been deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const change = async (e: any, id: any) => {\r\n        const active = {active : e.target.checked}\r\n        await axios.put(Admin_Staff_Active + `/${id}`, active, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const displayImage = (name: any) => {\r\n        const profile_image = name\r\n        const src = '/uploads/profile_images/' + profile_image\r\n        if(profile_image === undefined || isEmpty(profile_image)){\r\n            return (<FontAwesomeIcon icon={faUser} />)\r\n        } else{\r\n            return (\r\n                <div style={{position: \"relative\", width:\"35px\", height: \"35px\"}}>                \r\n                    <Image src={src} layout=\"fill\" alt=\"Avatar image\" />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleSort = () => {\r\n        if(sort == -1){setSort(1)}\r\n        else{setSort(-1)}\r\n    }\r\n\r\n    const FontSort = (props: any) => {\r\n        if(props.icon == 1){return (<FontAwesomeIcon  icon={SolidIcon.faAngleUp}/>)}\r\n        else{return (<FontAwesomeIcon  icon={SolidIcon.faAngleDown}/>)}\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={2}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/setting/staff/new')}> New Staff </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='size_id' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={7}></Col>\r\n                    <Col md={2}>\r\n                        <FloatingLabel controlId=\"search_id\"  label=\"Search\">\r\n                            <Form.Control type=\"text\" onChange={(e) => setSearch_staff(e.target.value)} placeholder=\"name\" size='lg'/>\r\n                        </FloatingLabel>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\" onClick={handleSort}>Full Name <FontSort icon = {sort}/></th>\r\n                            <th scope=\"col\">Email</th>\r\n                            <th scope=\"col\">Role</th>\r\n                            <th scope=\"col\">Last Login</th>\r\n                            <th scope=\"col\">Active</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            staffs.map((staff: any) => (\r\n                                <tr key={staff._id}>\r\n                                    <td>                                     \r\n                                        <Avatar display>\r\n                                            {displayImage(staff.profile_image)}\r\n                                        </Avatar>\r\n                                        {staff.firstname}\r\n                                        <div>\r\n                                            <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/setting/staff/[id]', query: {id: staff._id}})} pill size='sm'>\r\n                                                view\r\n                                            </Button>\r\n                                            <Swal7 id = {[staff._id, staff.profile_image]}/>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        {staff.email}\r\n                                    </td>\r\n                                    <td>\r\n                                        {staff.role.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        {staff.last_login}\r\n                                    </td>\r\n                                    <td>\r\n                                        <Form.Switch id={staff._id} onChange={(e) => change(e, staff._id)}  defaultChecked={staff.active} />\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default StaffComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\staff\\new.tsx",["995","996","997"],"import { Col, Portlet, Nav, Row, Tab, Button, Form, InputGroup, Modal} from '@blueupcode/components'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport axios from 'axios'\r\nimport * as fs from 'fs'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Eye } from 'react-feather'\r\nimport { Admin_Department_GetAll, Admin_Role_GetAll, Admin_Staff_ADD, Admin_Staff_Profile_Image } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst NewOne = () => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [id, setId] = React.useState('')\r\n    const [email, setEmail] = React.useState('')\r\n    const [firstname, setFirstname] = React.useState('')\r\n    const [lastname, setLastname] = React.useState('')\r\n    const [hourly_rate, setHourly_rate] = React.useState(0.0)\r\n    const [phonenumber, setPhonenumber] = React.useState('')\r\n    const [facebook, setFacebook] = React.useState('')\r\n    const [linkedin, setLinkedin] = React.useState('')\r\n    const [skype, setSkype] = React.useState('')\r\n    const [default_language, setDefault_language] = React.useState('none')\r\n    const [email_signature, setEmail_signature] = React.useState('')\r\n    const [direction, setDirection] = React.useState('none')\r\n    const [role, setRole] = React.useState<String>()\r\n    const [departments, setDepartments] = React.useState<String[]>([])\r\n    const [password, setPassword] = React.useState('')\r\n    const [preImagePath, setPreImagePath] = React.useState('')\r\n    const [newOne, setNewOne] = React.useState({})\r\n    \r\n    const [passwordtype, setPasswordtype] = React.useState('password')\r\n    const [eye, setEye] = React.useState(true)\r\n    interface Errors {\r\n        department: any,\r\n        role: any,\r\n        email: any,\r\n        password: any,\r\n        firstname: any,\r\n        lastname: any,\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({department: '', role: '', email: '', password: '', firstname: '', lastname: ''})\r\n    const [alldepartments, setAllDepartments] = React.useState([])\r\n    const [roles, setRoles] = React.useState([])\r\n    \r\n    \r\n    let [show, setShow] = React.useState(false)\r\n    const handleHide = () => setShow(false)\r\n    // const handleShow = () => setShow(true)\r\n    const [image, setImage] = React.useState<File>();\r\n\r\n    const danger = {color: 'red'}\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Department_GetAll + `/1/0`, {headers})\r\n        .then(res => {\r\n            setAllDepartments(res.data.all)\r\n        })\r\n        .catch(err => {\r\n            let error : Errors= {department: '', role: '', email: '', password: '', firstname: '', lastname: ''}\r\n            !isEmpty(err.response.data.department) ? error.department = err.response.data.department : ''\r\n            setErrors(error)\r\n        })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Role_GetAll + `/1/0`, {headers})\r\n        .then(res => {\r\n            setRoles(res.data.all)\r\n            setRole(res.data.all[0]._id)\r\n        })\r\n        .catch(err => {\r\n            let error : Errors= {department: '', role: '', email: '', password: '', firstname: '', lastname: ''}\r\n            !isEmpty(err.response.data.role) ? error.role = err.response.data.role : ''\r\n            setErrors(error)\r\n        })\r\n    }, [])\r\n    \r\n    React.useEffect(() => {\r\n        setNewOne({email,firstname,lastname,hourly_rate,phonenumber,facebook,linkedin,skype,default_language,email_signature,direction,password,departments,role})\r\n    }, [email,firstname,lastname,hourly_rate,phonenumber,facebook,linkedin,skype,default_language,email_signature,direction,password,departments.length,role])\r\n    \r\n    React.useEffect(() => {\r\n        if (eye) {setPasswordtype('password') }\r\n        else {setPasswordtype('text')}\r\n    }, [eye])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success'\r\n        })\r\n    }\r\n\r\n    const errorAlert = () => {\r\n        toast.fire({\r\n            icon: 'error',\r\n            title: 'Error exists. Maybe not Image file'\r\n        })\r\n    }\r\n\r\n    const change = (e: String) => {\r\n        let department = departments\r\n        console.log(department)\r\n        if(department.indexOf(e) > -1) { department.splice(department.indexOf(e), 1) }\r\n        else{department.push(e)}\r\n        setDepartments(department) \r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.post(Admin_Staff_ADD, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setId(res.data._id)\r\n                setPreImagePath('')\r\n                setShow(true)\r\n            })\r\n            .catch(err => {\r\n                let error : Errors= {department: '', role: '', email: '', password: '', firstname: '', lastname: ''}\r\n                !isEmpty(err.response.data.email) ? error.email = err.response.data.email : ''\r\n                !isEmpty(err.response.data.password)? error.password = err.response.data.password : ''\r\n                !isEmpty(err.response.data.firstname) ? error.firstname = err.response.data.firstname : ''\r\n                !isEmpty(err.response.data.lastname) ? error.lastname = err.response.data.lastname : ''\r\n                setErrors(error)\r\n            })\r\n    }\r\n\r\n    const uploadToClient = (e: any) => {\r\n        if (e.target.files && e.target.files[0]) {\r\n            const i = e.target.files[0];\r\n            setImage(i);\r\n        }\r\n    }\r\n    \r\n    const uploadToServer = async () => {        \r\n        const body = new FormData()\r\n        if(image != null)\r\n        {\r\n            body.append(\"file\", image)  \r\n            await fetch(\"/api/upload\", {\r\n                method: \"POST\",\r\n                body\r\n            }).then(res => res.json())\r\n            .then(async data=>{ \r\n                if(!isEmpty(data.error) || isEmpty(data.filename))\r\n                {\r\n                    errorAlert()\r\n                } else{\r\n                    if(!isEmpty(preImagePath))\r\n                    {\r\n                        let body = new FormData()\r\n                        body.append(\"text\", preImagePath)\r\n                        const response = await fetch(\"/api/upload/remove\", {\r\n                            method: \"POST\",\r\n                            body\r\n                        })\r\n                    }\r\n                    handleImage(data.filename) \r\n                }\r\n            })\r\n        }\r\n    };\r\n\r\n    const handleImage = async (data: any) => {\r\n        if(data !== null && data !== ''){\r\n            await axios.put(Admin_Staff_Profile_Image + `/${id}`, {profile_image: data}, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setPreImagePath(data)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                let error = {}\r\n                // !isEmpty(err.response.data.image) ? error.image = err.response.data.image : ''\r\n                // setErrors(error)\r\n            })\r\n        }else{\r\n            errorAlert()\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <h4>New Member</h4>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <Row>\r\n                            <Col md=\"2\"></Col>\r\n                            <Col md=\"8\">\r\n                                <div className=\"d-grid gap-3\">\r\n                                    <Form.Group controlId=\"emailID\">\r\n                                        <Form.Label>*Email Address</Form.Label>\r\n                                        <Form.Control onChange={(e) => setEmail(e.target.value)} type=\"email\" size = 'lg'/>\r\n                                        <p style={danger}>{errors.email}</p>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"firstnameID\">\r\n                                        <Form.Label>*First Name</Form.Label>\r\n                                        <Form.Control onChange={(e) => setFirstname(e.target.value)} type=\"text\"  size = 'lg'/>\r\n                                        <p style={danger}>{errors.firstname}</p>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"lastnameID\">\r\n                                        <Form.Label>*Last Name</Form.Label>\r\n                                        <Form.Control onChange={(e) => setLastname(e.target.value)} type=\"text\"  size = 'lg'/>\r\n                                        <p style={danger}>{errors.lastname}</p>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"hourlyrateID\">\r\n                                        <Form.Label>*Hourly Rate</Form.Label>\r\n                                        <Form.Control onChange={(e) => setHourly_rate(parseInt(e.target.value))} type=\"number\"  size = 'lg'/>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"phonenumberID\">\r\n                                        <Form.Label>*Phone Number</Form.Label>\r\n                                        <Form.Control onChange={(e) => setPhonenumber(e.target.value)} type=\"text\" size = 'lg'/>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"facebookID\">\r\n                                        <Form.Label>*Facebook</Form.Label>\r\n                                        <Form.Control onChange={(e) => setFacebook(e.target.value)}  type=\"text\"  size = 'lg'/>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"linkedinID\">\r\n                                        <Form.Label>*Linkedin</Form.Label>\r\n                                        <Form.Control onChange={(e) => setLinkedin(e.target.value)}  type=\"text\"  size = 'lg'/>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"skypeID\">\r\n                                        <Form.Label>*Skype</Form.Label>\r\n                                        <Form.Control onChange={(e) => setSkype(e.target.value)}  type=\"text\"  size = 'lg'/>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"defaultlangID\">\r\n                                        <Form.Label>*Default Language</Form.Label>\r\n                                        <Form.Select onChange={(e) => setDefault_language(e.target.value)} defaultValue=\"none\" size=\"lg\">\r\n                                            <option value=\"none\">System Default</option>\r\n                                            <option value=\"English\">English</option>\r\n                                            <option value=\"Germany\">Germany</option>\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"emailsignatureID\">\r\n                                        <Form.Label>*Email Signature</Form.Label>\r\n                                        <Form.Control onChange={(e) => setEmail_signature(e.target.value)} as=\"textarea\" rows={3}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"directionID\">\r\n                                        <Form.Label>*Direction</Form.Label>\r\n                                        <Form.Select onChange={(e) => setDirection(e.target.value)} defaultValue=\"none\" size=\"lg\">\r\n                                            <option value=\"none\">System Default</option>\r\n                                            <option value=\"ltr\">LTR</option>\r\n                                            <option value=\"rtl\">RTL</option>\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"departmentsID\">\r\n                                        {\r\n                                            alldepartments.map((department: any) => (\r\n                                                <Form.Check \r\n                                                    type=\"checkbox\" \r\n                                                    key={department._id} \r\n                                                    id = {department._id} \r\n                                                    name = {department._id} \r\n                                                    label={department.name} \r\n                                                    onChange={(e) => change(e.target.name)}\r\n                                                />\r\n                                            ))\r\n                                        }\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"roleID\">\r\n                                        <Form.Label>*Role</Form.Label>\r\n                                        <Form.Select onChange={(e) => setRole(e.target.value)} size=\"lg\">\r\n                                            {\r\n                                                roles.map((roleName: any) =>(\r\n                                                    <option key={roleName._id} value={roleName._id}>{roleName.name}</option>\r\n                                                ))\r\n                                            }\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"passwordID\">\r\n                                        <Form.Label>*Password</Form.Label>\r\n                                        <InputGroup>\r\n                                            <Form.Control type={passwordtype} onChange={(e) => setPassword(e.target.value)} size = 'lg'/>\r\n                                            <Button variant=\"outline-info\" onClick={()=> setEye(!eye)} size = 'lg' icon>\r\n                                                <Eye />\r\n                                            </Button>\r\n                                        </InputGroup>\r\n                                        <p style={danger}>{errors.password}</p>\r\n                                    </Form.Group>\r\n                                </div>\r\n                            </Col>\r\n                            <Col md=\"2\"></Col>\r\n                        </Row>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer bordered align=\"end\">\r\n                        <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        <Modal scrollable show={show} onHide={handleHide}>\r\n                            <Modal.Header>\r\n                                <Modal.Title>Profile Image</Modal.Title>\r\n                                <Button icon variant=\"label-danger\" onClick={handleHide}>\r\n                                    <FontAwesomeIcon icon={faTimes} />\r\n                                </Button>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n                                <Form.Group controlId=\"formFile\">\r\n                                    <Form.Label></Form.Label>\r\n                                    <Form.Control type=\"file\" onChange={(e) => uploadToClient(e)}/>\r\n                                </Form.Group>\r\n                            </Modal.Body>\r\n                            <Modal.Footer>                    \r\n                                <Button onClick={uploadToServer} type='submit' variant=\"primary\">Submit</Button>\r\n                            </Modal.Footer>\r\n                        </Modal>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default NewOne\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\staff\\view.tsx",["998","999","1000","1001","1002"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Eye } from 'react-feather'\r\nimport Image from 'next/image'\r\nimport { Admin_Staff_GetOne, Admin_Staff_Edit, Admin_Role_GetAll, Admin_Department_GetAll, Admin_Staff_Profile_Image } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    interface Errors {\r\n        department: any,\r\n        role: any,\r\n        email: any,\r\n        password: any,\r\n        firstname: any,\r\n        lastname: any,\r\n        staff: any,\r\n        image: any\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({department: '', image: '',staff: '', role: '', email: '', password: '', firstname: '', lastname: ''})\r\n    const [newOne, setNewOne]= React.useState({})\r\n    \r\n    const [email, setEmail] = React.useState('')\r\n    const [firstname, setFirstname] = React.useState('')\r\n    const [lastname, setLastname] = React.useState('')\r\n    const [hourly_rate, setHourly_rate] = React.useState(0)\r\n    const [phonenumber, setPhonenumber] = React.useState('')\r\n    const [facebook, setFacebook] = React.useState('')\r\n    const [linkedin, setLinkedin] = React.useState('')\r\n    const [skype, setSkype] = React.useState('')\r\n    const [default_language, setDefault_language] = React.useState('none')\r\n    const [email_signature, setEmail_signature] = React.useState('')\r\n    const [direction, setDirection] = React.useState('none')\r\n    const [role, setRole] = React.useState<String>()\r\n    const [departments, setDepartments] = React.useState<String[]>([])\r\n    const [password, setPassword] = React.useState('')\r\n    const [profile_image, setProfile_image] = React.useState('')\r\n\r\n    const [roles, setRoles] = React.useState([])\r\n    const [alldepartments, setAllDepartments] = React.useState([])\r\n    \r\n    const danger = {color : \"red\"}\r\n    \r\n    const [passwordtype, setPasswordtype] = React.useState('password')\r\n    const [eye, setEye] = React.useState(true)\r\n\r\n    const [image, setImage] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Staff_GetOne + `/${id}`, {headers})\r\n            .then(async res => {\r\n                setEmail(res.data.email)\r\n                setFirstname(res.data.firstname)\r\n                setLastname(res.data.lastname)\r\n                setHourly_rate(res.data.hourly_rate)\r\n                setPhonenumber(res.data.phonenumber)\r\n                setFacebook(res.data.facebook)\r\n                setLinkedin(res.data.linkedin)\r\n                setSkype(res.data.skype)\r\n                setDefault_language(res.data.default_language)\r\n                setEmail_signature(res.data.email_signature)\r\n                setDirection(res.data.direction)\r\n                setRole(res.data.role)\r\n                setDepartments(res.data.departments)\r\n                setProfile_image(res.data.profile_image)\r\n            })\r\n            .catch(err => {\r\n                let error = {department: '', image: '',staff: '', role: '', email: '', password: '', firstname: '', lastname: ''}\r\n                console.log(err.response.data)\r\n                error.staff = err.response.data.staff\r\n                setErrors(error);\r\n            })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Department_GetAll + `/1/0`, {headers})\r\n        .then(res => {\r\n            setAllDepartments(res.data.all)\r\n        })\r\n        .catch(err => {\r\n            let error = {department: '', image: '',staff: '', role: '', email: '', password: '', firstname: '', lastname: ''}\r\n            !isEmpty(err.response.data.department) ? error.department = err.response.data.department : ''\r\n            setErrors(error)\r\n        })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Role_GetAll + `/1/0`, {headers})\r\n        .then(res => {\r\n            setRoles(res.data.all)\r\n            setRole(res.data.all[0]._id)\r\n        })\r\n        .catch(err => {\r\n            let error = {department: '', image: '',staff: '', role: '', email: '', password: '', firstname: '', lastname: ''}\r\n            !isEmpty(err.response.data.role) ? error.role = err.response.data.role : ''\r\n            setErrors(error)\r\n        })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (eye) {setPasswordtype('password') }\r\n        else {setPasswordtype('text')}\r\n    }, [eye])\r\n\r\n    React.useEffect(() => {\r\n        setNewOne({email,firstname,lastname,hourly_rate,phonenumber,facebook,linkedin,skype,default_language,email_signature,direction,departments,role})\r\n    }, [email,firstname,lastname,hourly_rate,phonenumber,facebook,linkedin,skype,default_language,email_signature,direction,departments.length,role])\r\n\r\n    React.useEffect(() => {\r\n        setNewOne({email,firstname,lastname,hourly_rate,phonenumber,facebook,linkedin,skype,default_language,email_signature,direction,departments,password,role})\r\n    }, [password])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const errorAlert = () => {\r\n        toast.fire({\r\n            icon: 'error',\r\n            title: 'Error exists. Maybe not Image file'\r\n        })\r\n    }\r\n\r\n    const change = (e: any) => {\r\n        let department = departments\r\n        if(department.indexOf(e.target.name) > -1) { department.splice(department.indexOf(e.target.name), 1) }\r\n        else{department.push(e.target.name)}\r\n        setDepartments(department) \r\n    }\r\n\r\n    const onCheck = (e: any) => {\r\n        let department = departments\r\n        if(department.indexOf(e) > -1) { return true }\r\n        return false\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.put(Admin_Staff_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({department: '', image: '',staff: '', role: '', email: '', password: '', firstname: '', lastname: ''})\r\n            })\r\n            .catch(err => {\r\n                let error = {department: '', image: '',staff: '', role: '', email: '', password: '', firstname: '', lastname: ''}\r\n                !isEmpty(err.response.data.email) ? error.email = err.response.data.email : ''\r\n                !isEmpty(err.response.data.password)? error.password = err.response.data.password : ''\r\n                !isEmpty(err.response.data.firstname) ? error.firstname = err.response.data.firstname : ''\r\n                !isEmpty(err.response.data.lastname) ? error.lastname = err.response.data.lastname : ''\r\n                setErrors(error)\r\n            })\r\n    }\r\n\r\n    const DisplayImage = () => {\r\n        const src = '/uploads/profile_images/' + profile_image\r\n        if(profile_image === undefined || isEmpty(profile_image)){\r\n            return (<p>Profile Image does not exist</p>)\r\n        } else{\r\n            return (\r\n                <Image src={src} width={100} height={100} alt=\"Avatar image\" />\r\n            )\r\n        }\r\n    }\r\n\r\n    const uploadToClient = async (e: any) => {\r\n        if (e.target.files && e.target.files[0]) {\r\n            const i = e.target.files[0]\r\n            const body = new FormData()\r\n            body.append(\"file\", i)  \r\n            await fetch(\"/api/upload\", {\r\n                method: \"POST\",\r\n                body\r\n            }).then(res => res.json())\r\n            .then(async data=>{ \r\n                if(!isEmpty(data.error) || isEmpty(data.filename))\r\n                {\r\n                    errorAlert()\r\n                } else{\r\n                    if(!isEmpty(profile_image))\r\n                    {\r\n                        let body = new FormData()\r\n                        body.append(\"text\", profile_image)\r\n                        const response = await fetch(\"/api/upload/remove\", {\r\n                            method: \"POST\",\r\n                            body\r\n                        })\r\n                    }\r\n                    setProfile_image(data.filename) \r\n                    handleImage(data.filename) \r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleImage = async (data: any) => {\r\n        if(data !== null && data !== ''){\r\n            await axios.put(Admin_Staff_Profile_Image + `/${id}`, {profile_image: data}, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                let error = {department: '', image: '',staff: '', role: '', email: '', password: '', firstname: '', lastname: ''}\r\n                !isEmpty(err.response.data.image) ? error.image = err.response.data.image : ''\r\n                setErrors(error)\r\n            })\r\n        }else{\r\n            errorAlert()\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header bordered>\r\n                        <Portlet.Addon>\r\n                            <h4>{firstname + lastname}</h4>\r\n                            <p style={danger}>{errors.staff}</p>\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <DisplayImage />\r\n                        <Form.Group controlId=\"formFile\">\r\n                            <Form.Label></Form.Label>\r\n                            <Form.Control type=\"file\" onChange={(e) => uploadToClient(e)}/>\r\n                        </Form.Group>            \r\n                        <Form.Group controlId=\"emailID\">\r\n                            <Form.Label>*Email Address</Form.Label>\r\n                            <Form.Control onChange={(e) => setEmail(e.target.value)} defaultValue={email} type=\"email\" size = 'lg'/>\r\n                            <p style={danger}>{errors.email}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"firstnameID\">\r\n                            <Form.Label>*First Name</Form.Label>\r\n                            <Form.Control onChange={(e) => setFirstname(e.target.value)} defaultValue={firstname} type=\"text\"  size = 'lg'/>\r\n                            <p style={danger}>{errors.firstname}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"lastnameID\">\r\n                            <Form.Label>*Last Name</Form.Label>\r\n                            <Form.Control onChange={(e) => setLastname(e.target.value)} defaultValue={lastname} type=\"text\"  size = 'lg'/>\r\n                            <p style={danger}>{errors.lastname}</p>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"hourlyrateID\">\r\n                            <Form.Label>*Hourly Rate : {hourly_rate}</Form.Label>\r\n                            <Form.Control onChange={(e) => setHourly_rate(parseInt(e.target.value))} type=\"number\"  size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"phonenumberID\">\r\n                            <Form.Label>*Phone Number</Form.Label>\r\n                            <Form.Control onChange={(e) => setPhonenumber(e.target.value)} defaultValue={phonenumber} type=\"text\" size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"facebookID\">\r\n                            <Form.Label>*Facebook</Form.Label>\r\n                            <Form.Control onChange={(e) => setFacebook(e.target.value)} defaultValue={facebook}  type=\"text\"  size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"linkedinID\">\r\n                            <Form.Label>*Linkedin</Form.Label>\r\n                            <Form.Control onChange={(e) => setLinkedin(e.target.value)} defaultValue={linkedin} type=\"text\"  size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"skypeID\">\r\n                            <Form.Label>*Skype</Form.Label>\r\n                            <Form.Control onChange={(e) => setSkype(e.target.value)} defaultValue={skype} type=\"text\"  size = 'lg'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"defaultlangID\">\r\n                            <Form.Label>*Default Language</Form.Label>\r\n                            <Form.Select onChange={(e) => setDefault_language(e.target.value)} value={default_language} size=\"lg\">\r\n                                <option value=\"none\" >System Default</option>\r\n                                <option value=\"English\" >English</option>\r\n                                <option value=\"Germany\" >Germany</option>\r\n                            </Form.Select>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"emailsignatureID\">\r\n                            <Form.Label>*Email Signature</Form.Label>\r\n                            <Form.Control onChange={(e) => setEmail_signature(e.target.value)} as=\"textarea\" rows={3}/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"directionID\">\r\n                            <Form.Label>*Direction</Form.Label>\r\n                            <Form.Select onChange={(e) => setDirection(e.target.value)} value={direction} size=\"lg\">\r\n                                <option value=\"none\" >System Default</option>\r\n                                <option value=\"ltr\" >LTR</option>\r\n                                <option value=\"rtl\" >RTL</option>\r\n                            </Form.Select>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"memberdepartments\">\r\n                            {\r\n                                alldepartments.map((department: any) => (\r\n                                    <Form.Check \r\n                                        type=\"checkbox\" \r\n                                        key={department._id} \r\n                                        id = {department._id} \r\n                                        name = {department._id} \r\n                                        label={department.name}\r\n                                        defaultChecked = {onCheck(department._id)}\r\n                                        onChange={(e) => change(e)}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"roleID\">\r\n                            <Form.Label>*Role</Form.Label>\r\n                            <Form.Select onChange={(e) => setRole(e.target.value)} size=\"lg\">\r\n                                {\r\n                                    roles.map((roleName: any) =>(\r\n                                        <option key={roleName._id} value={roleName._id}>{roleName.name}</option>\r\n                                    ))\r\n                                }\r\n                            </Form.Select>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"passwordID\">\r\n                            <Form.Label>*Password</Form.Label>\r\n                            <InputGroup>\r\n                                <Form.Control type={passwordtype} onChange={(e) => setPassword(e.target.value)} size = 'lg'/>\r\n                                <Button variant=\"outline-info\" onClick={()=> setEye(!eye)} size = 'lg' icon>\r\n                                    <Eye />\r\n                                </Button>\r\n                            </InputGroup>\r\n                            <p style={danger}>{errors.password}</p>\r\n                        </Form.Group>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\tax\\index.tsx",["1003","1004"],"import React from 'react'\r\nimport { Portlet, Table, Form, Row, Col ,  Button } from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { swal, toast } from 'components/sweetalert2/instance'\r\nimport { useRouter } from 'next/router';\r\nimport Pagination from 'utils/Pagination'\r\nimport {Admin_Tax_GetAll, Admin_Tax_Delete} from 'utils/adminUrl'\r\nimport { parseCookies } from 'nookies'\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst GetALLComponent = () => {\r\n\r\n    const router = useRouter();\r\n\r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n\r\n    const [taxes, setTaxes] = React.useState([])\r\n    \r\n    const [size, setSize] = React.useState(10)\r\n    const [activeLinkNumber , setActiveLinkNumber] = React.useState(1)\r\n    const [paginationLength , setPaginationLength]  = React.useState(10)\r\n\r\n    const [deleteOne, setDeleteOne] = React.useState()\r\n    const [deletesucess, setDeletesucess] = React.useState(0.001)\r\n\r\n    React.useEffect(() => {\r\n        axios.get(Admin_Tax_GetAll + `/${activeLinkNumber}/${size}`, {headers})\r\n            .then(res => {\r\n                setTaxes(res.data.all)\r\n                if (size == 0){setPaginationLength(1)} \r\n                else{ \r\n                    if(res.data.length == 0) {setPaginationLength(1)}\r\n                    else{\r\n                        setPaginationLength(Math.ceil(res.data.length / size)) \r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [size, activeLinkNumber, deletesucess])\r\n    \r\n    React.useEffect(() => {\r\n        if(!isEmpty(deleteOne))\r\n        {\r\n            axios.delete(Admin_Tax_Delete + `/${deleteOne}`, {headers})\r\n                .then(res => {\r\n                    setDeletesucess(Math.random())\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }, [deleteOne])\r\n\r\n    const chooseActiveLinkNumber = (activeLinkNumber: React.SetStateAction<number>) => {\r\n        setActiveLinkNumber(activeLinkNumber);\r\n    };\r\n    \r\n    const pagination = {activeLinkNumber, paginationLength, chooseActiveLinkNumber}  \r\n    \r\n    const Swal7 = (id: any) => {\r\n        const handleClick = () => {\r\n            swal\r\n                .fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!',\r\n                })\r\n                .then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setDeleteOne(id.id)\r\n                        swal.fire('Deleted!', 'Successfully deleted.', 'success')\r\n                    }\r\n                })\r\n        }\r\n    \r\n        return <Button variant=\"text-danger\" onClick={handleClick}  pill size='sm'>delete</Button>\r\n    }\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n\r\n    return(\r\n        <Portlet>\r\n            <Portlet.Body className=\"pb-0\">\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <Button variant='primary' onClick={() => router.push('/admin/setting/tax/new')}> New Tax </Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Form.Select id='sizeID' onChange={(e) => setSize(parseInt(e.target.value))} defaultValue=\"10\" size=\"lg\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"0\">All</option>\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md={6}></Col>\r\n                    <Col md={2}>\r\n                        {/* <FloatingLabel controlId=\"search_id\"  label=\"Search\"> */}\r\n                            {/* <Form.Control type=\"text\" placeholder=\"name\" size='lg'/> */}\r\n                            {/* <Form.Control type=\"text\" onChange={() => setSearch_delete(search_id.value)} placeholder=\"name\" size='lg'/> */}\r\n                        {/* </FloatingLabel> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <p></p>\r\n                    </Col>\r\n                </Row>\r\n                {/* BEGIN Table */}\r\n                <Table responsive striped hover>\r\n                    <thead className=\"table-primary\">\r\n                        <tr>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Slug</th>\r\n                            <th scope='col'>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            taxes.map((tax: any) => (\r\n                                <tr key={tax._id}>\r\n                                    <td>\r\n                                        {tax.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        {tax.taxrate}\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <Button variant=\"text-primary\" onClick={() => router.push({pathname : '/admin/setting/tax/[id]', query: {id: tax._id}})} pill size='sm'>\r\n                                                view\r\n                                            </Button>\r\n                                            <Swal7 id = {tax._id}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {/* END Table */}\r\n            </Portlet.Body>\r\n            <Portlet.Footer>\r\n                <Row>\r\n                    <Col md={9}>\r\n                    </Col>\r\n                    <Col md={3}>    \r\n                        <Pagination pagination = {pagination}/>\r\n                    </Col>\r\n                </Row>\r\n            </Portlet.Footer>\r\n        </Portlet>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetALLComponent\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\tax\\new.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\setting\\tax\\view.tsx",["1005"],"import { Col, Portlet, Nav, Row, Table, Tab, Button, Form, InputGroup} from '@blueupcode/components'\r\nimport axios from 'axios'\r\nimport { toast } from 'components/sweetalert2/instance'\r\nimport { parseCookies } from 'nookies'\r\nimport React from 'react'\r\nimport { Admin_Tax_GetOne, Admin_Tax_Edit } from 'utils/adminUrl'\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst View = (props: any) => {\r\n    \r\n    const cookies = parseCookies()\r\n    const headers = {\"Authorization\": cookies.admintoken}\r\n    const id = props.id\r\n    \r\n    interface Errors {\r\n        tax: any,\r\n        taxrate: any,\r\n        name: any\r\n    }\r\n    const [errors, setErrors] = React.useState<Errors>({tax: '', taxrate: '', name: ''})\r\n    const [newOne, setNewOne]= React.useState({})\r\n    \r\n    const [name, setName] = React.useState('')\r\n    const [taxrate, setTaxrate] = React.useState(0)\r\n    const danger = {color : \"red\"}\r\n    \r\n    React.useEffect(() => {\r\n        axios.get(Admin_Tax_GetOne + `/${id}`, {headers})\r\n            .then(async res => {\r\n                setName(res.data.name)\r\n                setTaxrate(res.data.taxrate)\r\n            })\r\n            .catch(err => {\r\n                let error = {tax: '', taxrate: '', name: ''}\r\n                console.log(err.response.data)\r\n                error.tax = err.response.data.tax\r\n                setErrors(error);\r\n            })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setNewOne({name, taxrate})\r\n    }, [name, taxrate])\r\n\r\n    const successAlert = () => {\r\n        toast.fire({\r\n            icon: 'success',\r\n            title: 'Success!'\r\n        })\r\n    }\r\n    \r\n    const handleSubmit = async () => {\r\n        await axios.put(Admin_Tax_Edit + `/${id}`, newOne, {headers})\r\n            .then(res => {\r\n                successAlert()\r\n                setErrors({tax: '', taxrate: '', name: ''})\r\n            })\r\n            .catch(err => {\r\n                let error = {tax: '', taxrate: '', name: ''}\r\n                console.log(err.response.data)\r\n                !isEmpty(err.response.data.taxrate) ? error.taxrate = err.response.data.taxrate : ''\r\n                !isEmpty(err.response.data.name)? error.name = err.response.data.name : ''\r\n                !isEmpty(err.response.data.tax)? error.tax = err.response.data.tax : ''\r\n                setErrors(error)\r\n            })\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md = \"6\">\r\n                <Portlet>\r\n                    <Portlet.Header>\r\n                        <Portlet.Addon>\r\n                            {errors.tax}\r\n                        </Portlet.Addon>\r\n                    </Portlet.Header>\r\n                    <Portlet.Body>\r\n                        <Form.Group controlId=\"nameID\">\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control onChange={(e) => setName(e.target.value)} defaultValue={name} type=\"text\" size = 'lg'/>\r\n                                <p style={danger}>{errors.name}</p>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"taxrateID\">\r\n                                <Form.Label>Rate(* percent)</Form.Label>\r\n                                <Form.Control onChange={(e) => setTaxrate(parseInt(e.target.value))} defaultValue={taxrate} type=\"Number\" size = 'lg'/>\r\n                                <p style={danger}>{errors.taxrate}</p>\r\n                            </Form.Group>\r\n                    </Portlet.Body>\r\n                    <Portlet.Footer>\r\n                        <Portlet.Footer bordered align=\"end\">\r\n                            <Button onClick={handleSubmit} type='submit' variant=\"primary\">Submit</Button>\r\n                        </Portlet.Footer>\r\n                    </Portlet.Footer>\r\n                </Portlet>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default View\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\good\\AddGoodModal.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\good\\EditGoodModal.tsx",["1006"],"import React, { useState, useEffect } from \"react\";\r\nimport { IGood } from \"interfaces/admin/entities\";\r\nimport { Button, Form, Modal } from \"@blueupcode/components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport apiCall from \"utils/apiCall\";\r\nimport {\r\n  Admin_Good_Edit,\r\n  Admin_Good_GetOne,\r\n  Admin_Warehouse_GetAll\r\n} from \"utils/adminUrl\";\r\nimport { faEdit } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nconst EditGoodModal = ({ onEditSuccess, goodId }: any) => {\r\n  const [good, setGood] = useState<IGood>({\r\n    vendorName: \"\",\r\n    deliveryDate: \"\",\r\n    purchaseOrderNumber: \"\",\r\n    invoiceNumber: \"\",\r\n    warehouseId: {},\r\n    name: \"\",\r\n    description: \"\",\r\n    purchasePrice: 0,\r\n    expirationDate: \"\",\r\n    quantity: 0,\r\n    totalAmount: 0\r\n  });\r\n  const [openAddModal, setOpenAddModal] = useState(false);\r\n  const [warehouses, setWarehouses] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (openAddModal) {\r\n      (async function () {\r\n        const resp: any = await apiCall(`${Admin_Good_GetOne}/${goodId}`, \"GET\", {});\r\n        setGood({\r\n          vendorName: resp.vendorName,\r\n          deliveryDate: resp.deliveryDate,\r\n          purchaseOrderNumber: resp.purchaseOrderNumber,\r\n          invoiceNumber: resp.invoiceNumber,\r\n          warehouseId: resp.warehouseId,\r\n          name: resp.name,\r\n          description: resp.description,\r\n          purchasePrice: resp.purchasePrice,\r\n          expirationDate: resp.expirationDate,\r\n          quantity: resp.quantity,\r\n          totalAmount: resp.totalAmount\r\n        });\r\n      })();\r\n    }\r\n  }, [openAddModal]);\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      const data: any = await apiCall(Admin_Warehouse_GetAll, \"GET\", {});\r\n      setWarehouses(data.all);\r\n    })();\r\n  }, []);\r\n\r\n  const handleInputChange = (e: any) => {\r\n    setGood({\r\n      ...good,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    setOpenAddModal(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setOpenAddModal(false);\r\n  };\r\n\r\n  const handleUpdateProduct = async () => {\r\n    await apiCall(`${Admin_Good_Edit}/${goodId}`, \"PUT\", {\r\n      ...good\r\n    });\r\n    handleCloseModal();\r\n    onEditSuccess();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"label-secondary\"\r\n        className=\"ms-2\"\r\n        onClick={handleOpenModal}\r\n      >\r\n        <FontAwesomeIcon icon={faEdit} />\r\n      </Button>\r\n      <Modal show={openAddModal} onHide={handleCloseModal}>\r\n        <Modal.Header>\r\n          <Modal.Title>Edit good</Modal.Title>\r\n          <Button icon variant=\"label-danger\" onClick={handleCloseModal}>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"Name\"\r\n              onChange={handleInputChange}\r\n              value={good.name}\r\n            />\r\n            {/* <p style={danger}>{pr_errors.code}</p> */}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Vendor Name</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"vendorName\"\r\n              onChange={handleInputChange}\r\n              placeholder=\"Vendor Name\"\r\n              value={good.vendorName}\r\n            />\r\n            {/* <p style={danger}>{pr_errors.name}</p> */}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Warehouse</Form.Label>\r\n            <Form.Select\r\n              onChange={handleInputChange}\r\n              name=\"warehouseId\"\r\n              size=\"lg\"\r\n              value={good.warehouseId._id}\r\n            >\r\n              <option value=\"\">Select Warehouse</option>\r\n              {warehouses.map((w) => (\r\n                <option key={w._id} value={w._id}>\r\n                  {w.warehouse_name}\r\n                </option>\r\n              ))}\r\n            </Form.Select>\r\n            {/* <p style={danger}>{pr_errors.bin_location}</p> */}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Delivery Date</Form.Label>\r\n            <Form.Control\r\n              type=\"date\"\r\n              name=\"deliveryDate\"\r\n              onChange={handleInputChange}\r\n              placeholder=\"Delivery Date\"\r\n              defaultValue={\r\n                good.deliveryDate\r\n                  ? new Date(good.deliveryDate).toISOString().substring(0, 10)\r\n                  : \"\"\r\n              }\r\n            />\r\n            {/* <p style={danger}>{pr_errors.bin_location}</p> */}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Purchase Order Number</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"purchaseOrderNumber\"\r\n              onChange={handleInputChange}\r\n              placeholder=\"Purchase Order Number\"\r\n              value={good.purchaseOrderNumber}\r\n            />\r\n            {/* <p style={danger}>{pr_errors.bin_location}</p> */}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Invoice Number</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"invoiceNumber\"\r\n              onChange={handleInputChange}\r\n              placeholder=\"Invoice Number\"\r\n              value={good.invoiceNumber}\r\n            />\r\n            {/* <p style={danger}>{pr_errors.bin_location}</p> */}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Purchase Price</Form.Label>\r\n            <Form.Control\r\n              type=\"number\"\r\n              name=\"purchasePrice\"\r\n              onChange={handleInputChange}\r\n              placeholder=\"Purchase Price\"\r\n              value={good.purchasePrice}\r\n            />\r\n            {/* <p style={danger}>{pr_errors.bin_location}</p> */}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Quantity</Form.Label>\r\n            <Form.Control\r\n              type=\"number\"\r\n              name=\"quantity\"\r\n              onChange={handleInputChange}\r\n              placeholder=\"Quantity\"\r\n              value={good.quantity}\r\n            />\r\n            {/* <p style={danger}>{pr_errors.bin_location}</p> */}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Total Amount</Form.Label>\r\n            <Form.Control\r\n              type=\"number\"\r\n              name=\"totalAmount\"\r\n              onChange={handleInputChange}\r\n              placeholder=\"Total Amount\"\r\n              value={good.totalAmount}\r\n            />\r\n            {/* <p style={danger}>{pr_errors.bin_location}</p> */}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Expiration date</Form.Label>\r\n            <Form.Control\r\n              type=\"date\"\r\n              name=\"expirationDate\"\r\n              onChange={handleInputChange}\r\n              placeholder=\"Expiration date\"\r\n              defaultValue={\r\n                good.expirationDate\r\n                  ? new Date(good.expirationDate).toISOString().substring(0, 10)\r\n                  : \"\"\r\n              }\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Description</Form.Label>\r\n            <Form.Control\r\n              name=\"description\"\r\n              as=\"textarea\"\r\n              rows={3}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Description\"\r\n              value={good.description}\r\n            />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleUpdateProduct}>\r\n            Submit\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditGoodModal;\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\good\\GoodDetail.tsx",["1007"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Portlet,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Form,\r\n  Timeline,\r\n  RichList\r\n} from \"@blueupcode/components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFileCircleCheck,\r\n  faAdd,\r\n  faClose\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport apiCall from \"utils/apiCall\";\r\nimport {\r\n  Admin_Good_GetOne,\r\n  Admin_GoodQuality_GetAll,\r\n  Admin_GoodQuality_ADD\r\n} from \"utils/adminUrl\";\r\n\r\nconst GoodDetail = ({ goodId }: any) => {\r\n  const [good, setGood] = useState<any>({});\r\n  const [reports, setReports] = useState<any[]>([]);\r\n  const [showAddForm, setShowAddForm] = useState(false);\r\n  const [qualityReport, setQualityReport] = useState({\r\n    date: new Date().toISOString(),\r\n    description: \"\"\r\n  });\r\n\r\n  const getAllReports = async () => {\r\n    const reportsResp: any = await apiCall(\r\n      `${Admin_GoodQuality_GetAll}/${goodId}`,\r\n      \"GET\",\r\n      {}\r\n    );\r\n    setReports(reportsResp.all);\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      const resp: any = await apiCall(`${Admin_Good_GetOne}/${goodId}`, \"GET\", {});\r\n      setGood(resp);\r\n      getAllReports();\r\n    })();\r\n  }, [goodId]);\r\n\r\n  const handleShowAddForm = () => {\r\n    setShowAddForm(!showAddForm);\r\n  };\r\n\r\n  const handleInputChange = (e: any) => {\r\n    setQualityReport({\r\n      ...qualityReport,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const handleAddReport = async () => {\r\n    await apiCall(Admin_GoodQuality_ADD, \"POST\", {\r\n      ...qualityReport,\r\n      goodId\r\n    });\r\n    setQualityReport({\r\n      date: new Date().toISOString(),\r\n      description: \"\"\r\n    });\r\n    handleShowAddForm();\r\n    getAllReports();\r\n  };\r\n\r\n  return (\r\n    <Portlet>\r\n      <Portlet.Header>\r\n        <Portlet.Icon>\r\n          <FontAwesomeIcon icon={faFileCircleCheck} />\r\n        </Portlet.Icon>\r\n        <Portlet.Title>Good Details</Portlet.Title>\r\n      </Portlet.Header>\r\n      <Portlet.Body>\r\n        <Row>\r\n          <Col md={6} sm={12}>\r\n            <h4>Name: {good.name || \"\"}</h4>\r\n            <h4>Vendor Name: {good.vendorName || \"\"}</h4>\r\n            <h4>\r\n              Warehouse:{\" \"}\r\n              {good.warehouseId ? good.warehouseId.warehouse_name : \"\"}\r\n            </h4>\r\n            <h4>\r\n              Delivery Datae:{\" \"}\r\n              {new Date(good.deliveryDate).toLocaleDateString() || \"\"}\r\n            </h4>\r\n            <h4>Purchase Order Number: {good.purchaseOrderNumber || \"\"}</h4>\r\n            <h4>Invoice Number: {good.invoiceNumber || \"\"}</h4>\r\n            <h4>Purchase Price: {good.purchasePrice || \"\"}</h4>\r\n            <h4>\r\n              Expiration Datae:{\" \"}\r\n              {good.expirationDate\r\n                ? new Date(good.expirationDate).toLocaleDateString()\r\n                : \"\"}\r\n            </h4>\r\n            <h4>Quantity: {good.quantity || \"\"}</h4>\r\n            <h4>Total Amount: {good.totalAmount || \"\"}</h4>\r\n            <h4>Description: </h4>\r\n            <h4>{good.description || \"\"}</h4>\r\n          </Col>\r\n          <Col md={6} sm={12}>\r\n            <div\r\n              style={{\r\n                display: \"flex\"\r\n              }}\r\n            >\r\n              <h4>Manage Quality</h4>\r\n              <Button\r\n                variant=\"label-secondary\"\r\n                className=\"ms-4\"\r\n                onClick={handleShowAddForm}\r\n              >\r\n                <FontAwesomeIcon icon={showAddForm ? faClose : faAdd} />\r\n              </Button>\r\n            </div>\r\n            {showAddForm && (\r\n              <>\r\n                <Form.Group>\r\n                  <Form.Label>Delivery Date</Form.Label>\r\n                  <Form.Control\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Date\"\r\n                    defaultValue={\r\n                      qualityReport.date\r\n                        ? new Date(qualityReport.date)\r\n                            .toISOString()\r\n                            .substring(0, 10)\r\n                        : \"\"\r\n                    }\r\n                  />\r\n                  {/* <p style={danger}>{pr_errors.bin_location}</p> */}\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Description</Form.Label>\r\n                  <Form.Control\r\n                    name=\"description\"\r\n                    as=\"textarea\"\r\n                    rows={3}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Description\"\r\n                    value={qualityReport.description}\r\n                  />\r\n                </Form.Group>\r\n                <Button\r\n                  variant=\"secondary\"\r\n                  onClick={handleAddReport}\r\n                  className=\"my-2\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </>\r\n            )}\r\n            <div className=\"my-4\">\r\n              {reports.map((re, index) => (\r\n                <>\r\n                  <Timeline.Item key={re._id} as={RichList} bordered>\r\n                    <RichList.Item>\r\n                      <RichList.Content\r\n                        style={{\r\n                          cursor: \"pointer\"\r\n                        }}\r\n                      >\r\n                        <h3>Report {index + 1}</h3>\r\n                        <h3>Report {index + 1}</h3>\r\n                        <h4>\r\n                          Reported Date:{\" \"}\r\n                          {new Date(re.date).toLocaleDateString()}\r\n                        </h4>\r\n                        <h4>Description:</h4>\r\n                        <h4>{re.description}</h4>\r\n                      </RichList.Content>\r\n                    </RichList.Item>\r\n                  </Timeline.Item>\r\n                </>\r\n              ))}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Portlet.Body>\r\n    </Portlet>\r\n  );\r\n};\r\n\r\nexport default GoodDetail;\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\good\\GoodsTable.tsx",["1008","1009"],"/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport Link from \"next/link\";\r\nimport React, { FC, useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Table, Form, Button } from \"@blueupcode/components\";\r\nimport { IGood } from \"interfaces/admin/responds\";\r\nimport { faTrash, faEye } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { swal } from \"components/sweetalert2/instance\";\r\nimport apiCall from \"utils/apiCall\";\r\nimport { Admin_Good_Delete } from \"utils/adminUrl\";\r\n\r\nimport EditGoodModal from \"./EditGoodModal\";\r\n\r\ninterface IGoodsTable {\r\n  warehouseID: string;\r\n  goods: IGood[];\r\n  onChangeSort: (value: { key: string; sort: number }) => void;\r\n  onChangeFilter: (value: { key: string; keyword: string }) => void;\r\n  onEditSuccess: () => void;\r\n}\r\n\r\nconst ProductsTable: FC<IGoodsTable> = ({\r\n  warehouseID,\r\n  goods,\r\n  onChangeSort,\r\n  onChangeFilter,\r\n  onEditSuccess\r\n}) => {\r\n  const [sortKey, setSortKey] = useState({\r\n    key: \"_id\",\r\n    sort: 1\r\n  });\r\n  const [filter, setFilter] = useState({\r\n    key: \"\",\r\n    keyword: \"\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    onChangeSort(sortKey);\r\n  }, [sortKey]);\r\n\r\n  useEffect(() => {\r\n    onChangeFilter(filter);\r\n  }, [filter]);\r\n\r\n  const handleSort = (key: string) => {\r\n    let sort = 1;\r\n    if (key === sortKey.key) {\r\n      if (sortKey.sort === -1) {\r\n        sort = 1;\r\n      } else {\r\n        sort = -1;\r\n      }\r\n    } else {\r\n      sort = -1;\r\n    }\r\n    setSortKey({\r\n      key,\r\n      sort\r\n    });\r\n  };\r\n\r\n  const handleFilterChange = (e: any) => {\r\n    if (e.target.value === \"\") {\r\n      setFilter({\r\n        key: \"\",\r\n        keyword: \"\"\r\n      });\r\n    } else {\r\n      setFilter({\r\n        key: e.target.name,\r\n        keyword: e.target.value\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeleteGood = (id: string) => {\r\n    swal\r\n      .fire({\r\n        title: \"Are you sure?\",\r\n        text: \"You won't be able to revert this!\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        confirmButtonColor: \"#3085d6\",\r\n        cancelButtonColor: \"#d33\",\r\n        confirmButtonText: \"Yes, delete it!\"\r\n      })\r\n      .then(async (result) => {\r\n        if (result.isConfirmed) {\r\n          try {\r\n            await apiCall(`${Admin_Good_Delete}/${id}`, \"DELETE\", {});\r\n            swal.fire(\"Deleted!\", \"Successfully deleted.\", \"success\");\r\n            onEditSuccess();\r\n          } catch (error) {\r\n            swal.fire(\r\n              \"Failure!\",\r\n              \"Deleting Product is failure, Try again.\",\r\n              \"error\"\r\n            );\r\n          }\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Table responsive striped hover>\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">\r\n            <Form.Group>\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n                onClick={() => {\r\n                  handleSort(\"name\");\r\n                }}\r\n              >\r\n                Name\r\n                {sortKey.key === \"name\" && sortKey.sort === -1 ? (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleUp}\r\n                    className=\"me-2\"\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleDown}\r\n                    className=\"me-2\"\r\n                  />\r\n                )}\r\n              </span>\r\n              <Form.Control\r\n                name=\"name\"\r\n                type=\"text\"\r\n                onChange={handleFilterChange}\r\n                size=\"sm\"\r\n              />\r\n            </Form.Group>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <Form.Group>\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n                onClick={() => {\r\n                  handleSort(\"vendorName\");\r\n                }}\r\n              >\r\n                Vendor Name\r\n                {sortKey.key === \"vendorName\" && sortKey.sort === -1 ? (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleUp}\r\n                    className=\"me-2\"\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleDown}\r\n                    className=\"me-2\"\r\n                  />\r\n                )}\r\n              </span>\r\n              <Form.Control\r\n                name=\"vendorName\"\r\n                type=\"text\"\r\n                onChange={handleFilterChange}\r\n                size=\"sm\"\r\n              />\r\n            </Form.Group>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <Form.Group>\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n                onClick={() => {\r\n                  handleSort(\"warehouse\");\r\n                }}\r\n              >\r\n                Warehouse\r\n                {sortKey.key === \"warehouse\" && sortKey.sort === -1 ? (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleUp}\r\n                    className=\"me-2\"\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleDown}\r\n                    className=\"me-2\"\r\n                  />\r\n                )}\r\n              </span>\r\n              <Form.Control\r\n                name=\"warehouse\"\r\n                type=\"text\"\r\n                onChange={handleFilterChange}\r\n                size=\"sm\"\r\n              />\r\n            </Form.Group>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <Form.Group>\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n                onClick={() => {\r\n                  handleSort(\"quantity\");\r\n                }}\r\n              >\r\n                Quantity\r\n                {sortKey.key === \"quantity\" && sortKey.sort === -1 ? (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleUp}\r\n                    className=\"me-2\"\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleDown}\r\n                    className=\"me-2\"\r\n                  />\r\n                )}\r\n              </span>\r\n              <Form.Control\r\n                name=\"quantity\"\r\n                type=\"text\"\r\n                onChange={handleFilterChange}\r\n                size=\"sm\"\r\n              />\r\n            </Form.Group>\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {goods.map((good: any) => (\r\n          <tr key={good._id}>\r\n            <td>{good.name}</td>\r\n            <td>{good.vendorName}</td>\r\n            <td>{good.quantity}</td>\r\n            <td>\r\n              <div style={{ display: \"flex\" }}>\r\n                <Link href={`/admin/warehouse/good/${good._id}`} passHref>\r\n                  <Button variant=\"label-secondary\" className=\"ms-2\">\r\n                    <FontAwesomeIcon icon={faEye} />\r\n                  </Button>\r\n                </Link>\r\n                <EditGoodModal\r\n                  onEditSuccess={onEditSuccess}\r\n                  goodId={good._id}\r\n                />\r\n                <Button\r\n                  variant=\"label-secondary\"\r\n                  className=\"ms-2\"\r\n                  onClick={() => {\r\n                    handleDeleteGood(good._id);\r\n                  }}\r\n                >\r\n                  <FontAwesomeIcon icon={faTrash} />\r\n                </Button>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default ProductsTable;\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\good\\index.tsx",["1010"],"import React, { FC, useState, useEffect } from \"react\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport { Portlet, Button, Row, Col, Form } from \"@blueupcode/components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClipboard } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faAdd } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Pagination from \"utils/Pagination\";\r\nimport { IGood } from \"interfaces/admin/responds\";\r\nimport apiCall from \"utils/apiCall\";\r\nimport { Admin_Good_GetAll } from \"utils/adminUrl\";\r\nimport GoodsTable from \"./GoodsTable\";\r\nimport AddGoodModal from \"./AddGoodModal\";\r\nimport { any } from \"prop-types\";\r\n\r\ninterface IGoods {\r\n  warehouseID: string;\r\n}\r\n\r\nconst Goods: FC<IGoods> = ({ warehouseID }) => {\r\n  const [openAddModal, setOpenAddModal] = useState<boolean>(false);\r\n  const [activeLinkNumber, setActiveLinkNumber] = useState(1);\r\n  const [paginationLength, setPaginationLength] = useState(10);\r\n  const [goods, setGoods] = useState<IGood[]>([]);\r\n  const [sortKey, setSortKey] = useState({\r\n    key: \"_id\",\r\n    sort: 1\r\n  });\r\n  const [filter, setFilter] = useState({\r\n    key: \"\",\r\n    keyword: \"\"\r\n  });\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [productsLength, setProductsLength] = useState(0);\r\n\r\n  const chooseActiveLinkNumber = (activeLinkNumber: number) => {\r\n    setActiveLinkNumber(activeLinkNumber);\r\n  };\r\n\r\n  const handleClickOpenAddGoodModal = () => {\r\n    setOpenAddModal(true);\r\n  };\r\n\r\n  const handleClickCloseAddGoodModal = () => {\r\n    setOpenAddModal(false);\r\n  };\r\n\r\n  const handleChangeSort = (s: any) => {\r\n    setSortKey(s);\r\n  };\r\n\r\n  const handleChangeFilter = (f: any) => {\r\n    setFilter(f);\r\n  };\r\n\r\n  const handleChangePageSize = (e: any) => {\r\n    setPageSize(e.target.value);\r\n  };\r\n\r\n  const handleGetProducts = async () => {\r\n    const resp: any = await apiCall(\r\n      `${Admin_Good_GetAll}/${activeLinkNumber}/${pageSize}/filterKey:${filter.key}/filterValue:${filter.keyword}/sortKey:${sortKey.key}/sort:${sortKey.sort}`,\r\n      \"GET\",\r\n      {}\r\n    );\r\n    setGoods(resp.all);\r\n    setProductsLength(resp.length);\r\n  };\r\n\r\n  const handleAddProductSuccess = () => {\r\n    handleClickCloseAddGoodModal();\r\n    handleGetProducts();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPaginationLength(productsLength / pageSize + 1);\r\n  }, [productsLength, pageSize]);\r\n\r\n  useEffect(() => {\r\n    handleGetProducts();\r\n  }, [activeLinkNumber, pageSize, sortKey, filter]);\r\n\r\n  const pagination = {\r\n    activeLinkNumber,\r\n    paginationLength,\r\n    chooseActiveLinkNumber\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Portlet>\r\n        <Portlet.Header bordered>\r\n          <Portlet.Addon>\r\n            <Button\r\n              variant=\"label-secondary\"\r\n              className=\"me-2\"\r\n              onClick={handleClickOpenAddGoodModal}\r\n            >\r\n              <FontAwesomeIcon icon={faAdd} className=\"me-2\" />\r\n              Add new good\r\n            </Button>\r\n            <CSVLink data={goods} filename=\"products.csv\">\r\n              <Button variant=\"label-secondary\" className=\"me-2\">\r\n                <FontAwesomeIcon icon={faClipboard} className=\"me-2\" />\r\n                Export CSV\r\n              </Button>\r\n            </CSVLink>\r\n            <Button variant=\"label-secondary\" className=\"me-2\">\r\n              ...\r\n            </Button>\r\n          </Portlet.Addon>\r\n        </Portlet.Header>\r\n        <Portlet.Body className=\"pb-0\">\r\n          <Row>\r\n            <Col md={2}>\r\n              <Form.Select\r\n                id=\"sizeID\"\r\n                onChange={handleChangePageSize}\r\n                value={pageSize}\r\n                size=\"lg\"\r\n              >\r\n                <option value=\"10\">10</option>\r\n                <option value=\"25\">25</option>\r\n                <option value=\"50\">50</option>\r\n                <option value=\"100\">100</option>\r\n                <option value=\"0\">All</option>\r\n              </Form.Select>\r\n            </Col>\r\n            <Col md={3} />\r\n            <Col md={5}>\r\n              <Pagination pagination={pagination} />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={12} />\r\n          </Row>\r\n          <GoodsTable\r\n            warehouseID={warehouseID}\r\n            onChangeFilter={handleChangeFilter}\r\n            onChangeSort={handleChangeSort}\r\n            goods={goods}\r\n            onEditSuccess={handleAddProductSuccess}\r\n          />\r\n        </Portlet.Body>\r\n        <Portlet.Footer>\r\n          <Row>\r\n            <Col md={5} />\r\n            <Col md={5}>\r\n              <Pagination pagination={pagination} />\r\n            </Col>\r\n            <Col md={5} />\r\n          </Row>\r\n        </Portlet.Footer>\r\n      </Portlet>\r\n      <AddGoodModal\r\n        open={openAddModal}\r\n        onClose={handleClickCloseAddGoodModal}\r\n        onAddSuccess={handleAddProductSuccess}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Goods;\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\inventory\\list.tsx",["1011","1012","1013","1014"],"import {\r\n  Portlet,\r\n  Button,\r\n  Timeline,\r\n  RichList,\r\n  Modal,\r\n  Form\r\n} from \"@blueupcode/components\";\r\nimport {\r\n  faRemove,\r\n  faTimes,\r\n  faWarehouse\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useRouter } from \"next/router\";\r\nimport { parseCookies } from \"nookies\";\r\nimport {\r\n  Admin_Warehouse_ADD,\r\n  Admin_Warehouse_Delete,\r\n  Admin_Warehouse_Edit,\r\n  Admin_Warehouse_GetAll,\r\n  Admin_Warehouse_GetOne\r\n} from \"utils/adminUrl\";\r\nimport { faEdit } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { swal, toast } from \"components/sweetalert2/instance\";\r\nconst isEmpty = require(\"utils/is-empty\");\r\n\r\nconst List = (props: any) => {\r\n  const router = useRouter();\r\n  const cookies = parseCookies();\r\n  const headers = { Authorization: cookies.admintoken };\r\n  const danger = { color: \"red\" };\r\n\r\n  const [wa_change, setWa_change] = React.useState(0.000001);\r\n  const [warehouse_ID, setWarehouse_ID] = React.useState<String>(\"\");\r\n  const [warehouse_Name, setWarehouse_Name] = React.useState<String>(\"\");\r\n\r\n  const [lists, setLists] = React.useState<any[]>([]);\r\n\r\n  React.useEffect(() => {\r\n    if (lists.length > 0 && warehouse_ID === \"\") {\r\n      setWarehouse_ID(lists[0]?._id);\r\n      setWarehouse_Name(lists[0]?.warehouse_name);\r\n    }\r\n  }, [lists]);\r\n\r\n  React.useEffect(() => {\r\n    props.id({ warehouse_ID, warehouse_Name });\r\n  }, [warehouse_ID, warehouse_Name]);\r\n\r\n  const successAlert = () => {\r\n    toast.fire({\r\n      icon: \"success\",\r\n      title: \"Success!\"\r\n    });\r\n  };\r\n\r\n  const Wa_Delete = (id: any) => {\r\n    const handleDelete = () => {\r\n      swal\r\n        .fire({\r\n          title: \"Are you sure?\",\r\n          text: \"You won't be able to revert this!\",\r\n          icon: \"warning\",\r\n          showCancelButton: true,\r\n          confirmButtonColor: \"#3085d6\",\r\n          cancelButtonColor: \"#d33\",\r\n          confirmButtonText: \"Yes, delete it!\"\r\n        })\r\n        .then((result) => {\r\n          if (result.isConfirmed) {\r\n            axios\r\n              .delete(Admin_Warehouse_Delete + `/${id.id}`, { headers })\r\n              .then((res) => {\r\n                setWa_change(Math.random());\r\n                swal.fire(\r\n                  \"Deleted!\",\r\n                  \"That Warehouse has been deleted.\",\r\n                  \"success\"\r\n                );\r\n              })\r\n              .catch((err) => console.log(err));\r\n          }\r\n        });\r\n    };\r\n\r\n    return (\r\n      <Button variant=\"label-secondary\" className=\"ms-2\" onClick={handleDelete}>\r\n        <FontAwesomeIcon icon={faRemove} />\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    axios\r\n      .get(Admin_Warehouse_GetAll, { headers })\r\n      .then((res) => {\r\n        setLists(res.data.all);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, [wa_change]);\r\n\r\n  const handleList = (e: any) => {\r\n    setWarehouse_ID(e[0]);\r\n    setWarehouse_Name(e[1]);\r\n  };\r\n\r\n  const Modal_Add_Warehouse = () => {\r\n    const [show_ADD_Warehouse, setShow_ADD_Warehouse] = React.useState(false);\r\n\r\n    const [newOne, setNewOne] = React.useState({});\r\n\r\n    interface Wa_Errors {\r\n      name: any;\r\n      code: any;\r\n    }\r\n    const [wa_errors, setWa_errors] = React.useState<Wa_Errors>({\r\n      name: \"\",\r\n      code: \"\"\r\n    });\r\n\r\n    const [warehouse_code, setWarehouse_code] = React.useState(\"\");\r\n    const [warehouse_name, setWarehouse_name] = React.useState(\"\");\r\n    const [warehouse_address, setWarehouse_address] = React.useState(\"\");\r\n\r\n    React.useEffect(() => {\r\n      setNewOne({ warehouse_code, warehouse_name, warehouse_address });\r\n    }, [warehouse_code, warehouse_name, warehouse_address]);\r\n\r\n    const handle_ADD_Warehouse_Hide = () => setShow_ADD_Warehouse(false);\r\n    const handle_ADD_Warehouse_Show = () => setShow_ADD_Warehouse(true);\r\n\r\n    const handle_ADD_Warehouse = async () => {\r\n      await axios\r\n        .post(Admin_Warehouse_ADD, newOne, { headers })\r\n        .then((res) => {\r\n          successAlert();\r\n          setWa_errors({ name: \"\", code: \"\" });\r\n          setWa_change(Math.random());\r\n        })\r\n        .catch((err) => {\r\n          let error: Wa_Errors = { name: \"\", code: \"\" };\r\n          !isEmpty(err.response.data.warehouse_code)\r\n            ? (error.code = err.response.data.warehouse_code)\r\n            : \"\";\r\n          !isEmpty(err.response.data.warehouse_name)\r\n            ? (error.name = err.response.data.warehouse_name)\r\n            : \"\";\r\n          setWa_errors(error);\r\n        });\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Button\r\n          variant=\"label-secondary\"\r\n          size=\"lg\"\r\n          onClick={handle_ADD_Warehouse_Show}\r\n        >\r\n          <FontAwesomeIcon icon={faWarehouse} className=\"me-2\" />\r\n          Warehouse +\r\n        </Button>\r\n        {/* BEGIN Modal */}\r\n        <Modal show={show_ADD_Warehouse} onHide={handle_ADD_Warehouse_Hide}>\r\n          <Modal.Header>\r\n            <Modal.Title>Add a Warehouse</Modal.Title>\r\n            <Button\r\n              icon\r\n              variant=\"label-danger\"\r\n              onClick={handle_ADD_Warehouse_Hide}\r\n            >\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form.Group controlId=\"warehouse_code_ID\">\r\n              <Form.Label>Code</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                onChange={(e) => setWarehouse_code(e.target.value)}\r\n                placeholder=\"123456\"\r\n              />\r\n              <p style={danger}>{wa_errors.code}</p>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"warehouse_name_ID\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                onChange={(e) => setWarehouse_name(e.target.value)}\r\n                placeholder=\"warehouse 1\"\r\n              />\r\n              <p style={danger}>{wa_errors.name}</p>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"warehouse_address_ID\">\r\n              <Form.Label>Address</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                onChange={(e) => setWarehouse_address(e.target.value)}\r\n                placeholder=\"Address. 1, Hlazunova Street Kyiv - 42, Ukraine, 01601.\"\r\n              />\r\n            </Form.Group>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={handle_ADD_Warehouse}>\r\n              Submit\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n        {/* END Modal */}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const Modal_Edit_Warehouse = (id: any) => {\r\n    const [show_Edit_Warehouse, setShow_Edit_Warehouse] = React.useState(false);\r\n\r\n    const [newEdit, setNewEdit] = React.useState({});\r\n\r\n    interface Wa_Errors {\r\n      name: any;\r\n      code: any;\r\n    }\r\n    const [wa_edit_errors, setWa_edit_errors] = React.useState<Wa_Errors>({\r\n      name: \"\",\r\n      code: \"\"\r\n    });\r\n\r\n    const [warehouse_code, setWarehouse_code] = React.useState(\"\");\r\n    const [warehouse_name, setWarehouse_name] = React.useState(\"\");\r\n    const [warehouse_address, setWarehouse_address] = React.useState(\"\");\r\n\r\n    const handle_Edit_Warehouse_Hide = () => setShow_Edit_Warehouse(false);\r\n    const handle_Edit_Warehouse_Show = () => setShow_Edit_Warehouse(true);\r\n\r\n    React.useEffect(() => {\r\n      if (show_Edit_Warehouse == true) {\r\n        axios\r\n          .get(Admin_Warehouse_GetOne + `/${id.id}`, { headers })\r\n          .then((res) => {\r\n            setWarehouse_name(res.data.warehouse_name);\r\n            setWarehouse_code(res.data.warehouse_code);\r\n            setWarehouse_address(res.data.warehouse_address);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n      }\r\n    }, [show_Edit_Warehouse]);\r\n\r\n    React.useEffect(() => {\r\n      setNewEdit({ warehouse_code, warehouse_name, warehouse_address });\r\n    }, [warehouse_code, warehouse_name, warehouse_address]);\r\n\r\n    const handle_Edit_Warehouse = async () => {\r\n      await axios\r\n        .put(Admin_Warehouse_Edit + `/${id.id}`, newEdit, { headers })\r\n        .then((res) => {\r\n          successAlert();\r\n          setWa_edit_errors({ name: \"\", code: \"\" });\r\n          setWa_change(Math.random());\r\n        })\r\n        .catch((err) => {\r\n          let error: Wa_Errors = { name: \"\", code: \"\" };\r\n          !isEmpty(err.response.data.warehouse_code)\r\n            ? (error.code = err.response.data.warehouse_code)\r\n            : \"\";\r\n          !isEmpty(err.response.data.warehouse_name)\r\n            ? (error.name = err.response.data.warehouse_name)\r\n            : \"\";\r\n          setWa_edit_errors(error);\r\n        });\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Button\r\n          variant=\"label-secondary\"\r\n          className=\"ms-2\"\r\n          onClick={handle_Edit_Warehouse_Show}\r\n        >\r\n          <FontAwesomeIcon icon={faEdit} />\r\n        </Button>\r\n        {/* BEGIN Modal */}\r\n        <Modal show={show_Edit_Warehouse} onHide={handle_Edit_Warehouse_Hide}>\r\n          <Modal.Header>\r\n            <Modal.Title>{warehouse_name}</Modal.Title>\r\n            <Button\r\n              icon\r\n              variant=\"label-danger\"\r\n              onClick={handle_Edit_Warehouse_Hide}\r\n            >\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form.Group controlId=\"warehouse_code_ID\">\r\n              <Form.Label>Code</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={warehouse_code}\r\n                onChange={(e) => setWarehouse_code(e.target.value)}\r\n              />\r\n              <p style={danger}>{wa_edit_errors.code}</p>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"warehouse_name_ID\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={warehouse_name}\r\n                onChange={(e) => setWarehouse_name(e.target.value)}\r\n              />\r\n              <p style={danger}>{wa_edit_errors.name}</p>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"warehouse_address_ID\">\r\n              <Form.Label>Address</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={warehouse_address}\r\n                onChange={(e) => setWarehouse_address(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={handle_Edit_Warehouse}>\r\n              Submit\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n        {/* END Modal */}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Portlet noMargin>\r\n      <Portlet.Header>\r\n        <Portlet.Title>\r\n          <div className=\"d-grid gap-2\">\r\n            <Modal_Add_Warehouse />\r\n          </div>\r\n        </Portlet.Title>\r\n      </Portlet.Header>\r\n      <Portlet.Body>\r\n        <Timeline>\r\n          {lists.map((list: any) => (\r\n            <Timeline.Item key={list._id} as={RichList} bordered>\r\n              <RichList.Item>\r\n                <RichList.Content\r\n                  style={{\r\n                    cursor: \"pointer\"\r\n                  }}\r\n                  onClick={() => handleList([list._id, list.warehouse_name])}\r\n                >\r\n                  <RichList.Paragraph>{list.warehouse_name}</RichList.Paragraph>\r\n                </RichList.Content>\r\n                <RichList.Addon addonType=\"append\">\r\n                  <Modal_Edit_Warehouse id={list._id} />\r\n                  <Wa_Delete id={list._id} />\r\n                </RichList.Addon>\r\n              </RichList.Item>\r\n            </Timeline.Item>\r\n          ))}\r\n        </Timeline>\r\n      </Portlet.Body>\r\n    </Portlet>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\product\\AddProductModal.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\product\\EditProductModal.tsx",["1015"],"import React, { useState, useEffect } from \"react\";\r\nimport { IProduct } from \"interfaces/admin/entities\";\r\nimport { Button, Form, Modal } from \"@blueupcode/components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport apiCall from \"utils/apiCall\";\r\nimport { Admin_Product_Edit, Admin_Product_GetOne } from \"utils/adminUrl\";\r\nimport { faEdit } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nconst EditProductModal = ({ onEditSuccess, productId }: any) => {\r\n  const [product, setProduct] = useState<IProduct>({\r\n    code: \"\",\r\n    bin_location: \"\",\r\n    comment: \"\",\r\n    initial_stock: 0,\r\n    name: \"\",\r\n    expiration_date: new Date().toISOString(),\r\n    current_stock: 0,\r\n    last_withdrawal: 0\r\n  });\r\n  const [openAddModal, setOpenAddModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (openAddModal) {\r\n      (async function () {\r\n        const resp: any = await apiCall(\r\n          `${Admin_Product_GetOne}/${productId}`,\r\n          \"GET\",\r\n          {}\r\n        );\r\n        setProduct({\r\n          code: resp.code,\r\n          bin_location: resp.bin_location,\r\n          comment: resp.comment,\r\n          initial_stock: resp.initial_stock,\r\n          name: resp.name,\r\n          expiration_date: resp.expiration_date,\r\n          current_stock: resp.current_stock,\r\n          last_withdrawal: resp.last_withdrawal\r\n        });\r\n      })();\r\n    }\r\n  }, [openAddModal]);\r\n\r\n  const handleInputChange = (e: any) => {\r\n    setProduct({\r\n      ...product,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    setOpenAddModal(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setOpenAddModal(false);\r\n  };\r\n\r\n  const handleUpdateProduct = async () => {\r\n    await apiCall(`${Admin_Product_Edit}/${productId}`, \"PUT\", {\r\n      ...product\r\n    });\r\n    handleCloseModal();\r\n    onEditSuccess();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"label-secondary\"\r\n        className=\"ms-2\"\r\n        onClick={handleOpenModal}\r\n      >\r\n        <FontAwesomeIcon icon={faEdit} />\r\n      </Button>\r\n      <Modal show={openAddModal} onHide={handleCloseModal}>\r\n        <Modal.Header>\r\n          <Modal.Title>Edit product</Modal.Title>\r\n          <Button icon variant=\"label-danger\" onClick={handleCloseModal}>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group controlId=\"code_ID\">\r\n            <Form.Label>Code</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"code\"\r\n              placeholder=\"Code\"\r\n              onChange={handleInputChange}\r\n              value={product.code}\r\n            />\r\n            {/* <p style={danger}>{pr_errors.code}</p> */}\r\n          </Form.Group>\r\n          <Form.Group controlId=\"name_ID\">\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"name\"\r\n              onChange={handleInputChange}\r\n              placeholder=\"Name\"\r\n              value={product.name}\r\n            />\r\n            {/* <p style={danger}>{pr_errors.name}</p> */}\r\n          </Form.Group>\r\n          <Form.Group controlId=\"bin_location_ID\">\r\n            <Form.Label>Bin Location</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"bin_location\"\r\n              onChange={handleInputChange}\r\n              placeholder=\"Bin location\"\r\n              value={product.bin_location}\r\n            />\r\n            {/* <p style={danger}>{pr_errors.bin_location}</p> */}\r\n          </Form.Group>\r\n          <Form.Group controlId=\"expiration_data_ID\">\r\n            <Form.Label>Expiration date</Form.Label>\r\n            <Form.Control\r\n              type=\"date\"\r\n              name=\"expiration_date\"\r\n              onChange={handleInputChange}\r\n              defaultValue={product.expiration_date ? new Date(product.expiration_date)\r\n                .toISOString()\r\n                .substring(0, 10) : \"\"}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"initial_stock_ID\">\r\n            <Form.Label>Initial Stock</Form.Label>\r\n            <Form.Control\r\n              type=\"Number\"\r\n              name=\"initial_stock\"\r\n              onChange={handleInputChange}\r\n              value={product.initial_stock}\r\n            />\r\n            {/* <p style={danger}>{pr_errors.initial_stock}</p> */}\r\n          </Form.Group>\r\n          <Form.Group controlId=\"current_stock_ID\">\r\n            <Form.Label>Current Stock</Form.Label>\r\n            <Form.Control\r\n              type=\"Number\"\r\n              name=\"current_stock\"\r\n              onChange={handleInputChange}\r\n              value={product.current_stock}\r\n            />\r\n            {/* <p style={danger}>{pr_errors.initial_stock}</p> */}\r\n          </Form.Group>\r\n          <Form.Group controlId=\"last_withdrawal_ID\">\r\n            <Form.Label>Last Withdrawal</Form.Label>\r\n            <Form.Control\r\n              type=\"Number\"\r\n              name=\"last_withdrawal\"\r\n              onChange={handleInputChange}\r\n              value={product.last_withdrawal}\r\n            />\r\n            {/* <p style={danger}>{pr_errors.initial_stock}</p> */}\r\n          </Form.Group>\r\n          <Form.Group controlId=\"comment_ID\">\r\n            <Form.Label>Comment</Form.Label>\r\n            <Form.Control\r\n              name=\"comment\"\r\n              as=\"textarea\"\r\n              rows={3}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Comment\"\r\n              value={product.comment}\r\n            />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleUpdateProduct}>\r\n            Submit\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditProductModal;\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\product\\index.tsx",["1016"],"import React, { FC, useState, useEffect } from \"react\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport { Portlet, Button, Row, Col, Form } from \"@blueupcode/components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClipboard } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faAdd } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Pagination from \"utils/Pagination\";\r\nimport { IProduct } from \"interfaces/admin/responds\";\r\nimport apiCall from \"utils/apiCall\";\r\nimport { Admin_Product_GetAll } from \"utils/adminUrl\";\r\nimport ProductsTable from \"./ProductsTable\";\r\nimport AddProductModal from \"./AddProductModal\";\r\n\r\ninterface IProducts {\r\n  warehouseID: string;\r\n  warehouseName: string;\r\n}\r\n\r\nconst Products: FC<IProducts> = ({ warehouseID, warehouseName }) => {\r\n  const [openAddModal, setOpenAddModal] = useState<boolean>(false);\r\n  const [activeLinkNumber, setActiveLinkNumber] = useState(1);\r\n  const [paginationLength, setPaginationLength] = useState(10);\r\n  const [products, setProducts] = useState<IProduct[]>([]);\r\n  const [sortKey, setSortKey] = useState({\r\n    key: \"unique_id\",\r\n    sort: 1\r\n  });\r\n  const [filter, setFilter] = useState({\r\n    key: \"\",\r\n    keyword: \"\"\r\n  });\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [productsLength, setProductsLength] = useState(0);\r\n\r\n  const chooseActiveLinkNumber = (activeLinkNumber: number) => {\r\n    setActiveLinkNumber(activeLinkNumber);\r\n  };\r\n\r\n  const handleClickOpenAddProductModal = () => {\r\n    setOpenAddModal(true);\r\n  };\r\n\r\n  const handleClickCloseAddProductModal = () => {\r\n    setOpenAddModal(false);\r\n  };\r\n\r\n  const handleChangeSort = (s: any) => {\r\n    setSortKey(s);\r\n  };\r\n\r\n  const handleChangeFilter = (f: any) => {\r\n    setFilter(f);\r\n  };\r\n\r\n  const handleChangePageSize = (e: any) => {\r\n    setPageSize(e.target.value);\r\n  };\r\n\r\n  const handleGetProducts = async () => {\r\n    const resp: any = await apiCall(\r\n      `${Admin_Product_GetAll}/${activeLinkNumber}/${pageSize}/warehouse:${warehouseID}/filterKey:${filter.key}/filterValue:${filter.keyword}/sortKey:${sortKey.key}/sort:${sortKey.sort}`,\r\n      \"GET\",\r\n      {}\r\n    );\r\n    setProducts(resp.all);\r\n    setProductsLength(resp.length);\r\n  };\r\n\r\n  const handleAddProductSuccess = () => {\r\n    handleClickCloseAddProductModal();\r\n    handleGetProducts();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPaginationLength(productsLength / pageSize + 1);\r\n  }, [productsLength, pageSize]);\r\n\r\n  useEffect(() => {\r\n    handleGetProducts();\r\n  }, [activeLinkNumber, pageSize, sortKey, filter, warehouseID]);\r\n\r\n  const pagination = {\r\n    activeLinkNumber,\r\n    paginationLength,\r\n    chooseActiveLinkNumber\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Portlet>\r\n        <Portlet.Header bordered>\r\n          <Portlet.Title>{warehouseName}</Portlet.Title>\r\n          <Portlet.Addon>\r\n            <Button\r\n              variant=\"label-secondary\"\r\n              className=\"me-2\"\r\n              onClick={handleClickOpenAddProductModal}\r\n            >\r\n              <FontAwesomeIcon icon={faAdd} className=\"me-2\" />\r\n              Add new product\r\n            </Button>\r\n            <CSVLink data={products} filename=\"products.csv\">\r\n              <Button variant=\"label-secondary\" className=\"me-2\">\r\n                <FontAwesomeIcon icon={faClipboard} className=\"me-2\" />\r\n                Export CSV\r\n              </Button>\r\n            </CSVLink>\r\n            <Button variant=\"label-secondary\" className=\"me-2\">\r\n              ...\r\n            </Button>\r\n          </Portlet.Addon>\r\n        </Portlet.Header>\r\n        <Portlet.Body className=\"pb-0\">\r\n          <Row>\r\n            <Col md={2}>\r\n              <Form.Select\r\n                id=\"sizeID\"\r\n                onChange={handleChangePageSize}\r\n                value={pageSize}\r\n                size=\"lg\"\r\n              >\r\n                <option value=\"10\">10</option>\r\n                <option value=\"25\">25</option>\r\n                <option value=\"50\">50</option>\r\n                <option value=\"100\">100</option>\r\n                <option value=\"0\">All</option>\r\n              </Form.Select>\r\n            </Col>\r\n            <Col md={3} />\r\n            <Col md={5}>\r\n              <Pagination pagination={pagination} />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={12} />\r\n          </Row>\r\n          <ProductsTable\r\n            warehouseID={warehouseID}\r\n            onChangeFilter={handleChangeFilter}\r\n            onChangeSort={handleChangeSort}\r\n            products={products}\r\n            onEditSuccess={handleAddProductSuccess}\r\n          />\r\n        </Portlet.Body>\r\n        <Portlet.Footer>\r\n          <Row>\r\n            <Col md={5} />\r\n            <Col md={5}>\r\n              <Pagination pagination={pagination} />\r\n            </Col>\r\n            <Col md={5} />\r\n          </Row>\r\n        </Portlet.Footer>\r\n      </Portlet>\r\n      <AddProductModal\r\n        open={openAddModal}\r\n        onClose={handleClickCloseAddProductModal}\r\n        warehouseID={warehouseID}\r\n        onAddSuccess={handleAddProductSuccess}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Products;\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\product\\index_old.tsx",["1017","1018","1019","1020"],"import React from \"react\";\r\nimport {\r\n  Portlet,\r\n  Table,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Modal\r\n} from \"@blueupcode/components\";\r\nimport axios from \"axios\";\r\nimport { swal, toast } from \"components/sweetalert2/instance\";\r\nimport { useRouter } from \"next/router\";\r\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\r\nimport Pagination from \"utils/Pagination\";\r\nimport { parseCookies } from \"nookies\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAdd, faRemove, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faClipboard, faEdit } from \"@fortawesome/free-regular-svg-icons\";\r\nimport {\r\n  Admin_Product_ADD,\r\n  Admin_Product_Delete,\r\n  Admin_Product_Edit,\r\n  Admin_Product_GetAll,\r\n  Admin_Product_GetOne\r\n} from \"utils/adminUrl\";\r\nimport isEmpty from \"utils/is-empty\";\r\n\r\nconst ProductComponent = ({ warehouseName, warehouseID }: any) => {\r\n  const [warehouse_ID, setWarehouse_ID] = React.useState<String>(warehouseID);\r\n  const [warehouse_Name, setWarehouse_Name] =\r\n    React.useState<String>(warehouseName);\r\n\r\n  React.useEffect(() => {\r\n    setWarehouse_ID(warehouseID);\r\n    setWarehouse_Name(warehouseName);\r\n  }, [warehouseID]);\r\n\r\n  const router = useRouter();\r\n\r\n  const cookies = parseCookies();\r\n  const headers = { Authorization: cookies.admintoken };\r\n\r\n  const [size, setSize] = React.useState(10);\r\n  const [activeLinkNumber, setActiveLinkNumber] = React.useState(1);\r\n  const [paginationLength, setPaginationLength] = React.useState(10);\r\n\r\n  const [success, setSuccess] = React.useState(0.001);\r\n\r\n  const [search, setSearch] = React.useState(\"code\");\r\n  const [value, setValue] = React.useState(\"\");\r\n  const [sort, setSort] = React.useState(1);\r\n\r\n  React.useEffect(() => {\r\n    setSearch(\"code\");\r\n    setValue(\"\");\r\n    setSort(1);\r\n  }, [warehouse_ID]);\r\n\r\n  // search field\r\n  const [searchCode, setSearchCode] = React.useState(\"\");\r\n  React.useEffect(() => {\r\n    if (searchCode != \"\") {\r\n      setSearch(\"code\");\r\n      setValue(searchCode);\r\n    }\r\n  }, [searchCode]);\r\n  const [searchName, setSearchName] = React.useState(\"\");\r\n  React.useEffect(() => {\r\n    if (searchName != \"\") {\r\n      setSearch(\"name\");\r\n      setValue(searchName);\r\n    }\r\n  }, [searchName]);\r\n  const [searchBin, setSearchBin] = React.useState(\"\");\r\n  React.useEffect(() => {\r\n    if (searchBin != \"\") {\r\n      setSearch(\"bin_location\");\r\n      setValue(searchBin);\r\n    }\r\n  }, [searchBin]);\r\n  const [searchDate, setSearchDate] = React.useState<Date>();\r\n  React.useEffect(() => {\r\n    if (searchDate != null) {\r\n      setSearch(\"expiration_date\");\r\n      setValue(String(searchDate));\r\n    }\r\n  }, [searchDate]);\r\n  const [searchInit, setSearchInit] = React.useState<Number>();\r\n  React.useEffect(() => {\r\n    if (searchInit != null && !Number.isNaN(searchInit)) {\r\n      setSearch(\"initial_stock\");\r\n      setValue(String(searchInit));\r\n    }\r\n  }, [searchInit]);\r\n  const [searchCurr, setSearchCurr] = React.useState<Number>();\r\n  React.useEffect(() => {\r\n    if (searchCurr != null && !Number.isNaN(searchCurr)) {\r\n      setSearch(\"current_stock\");\r\n      setValue(String(searchCurr));\r\n    }\r\n  }, [searchCurr]);\r\n  const [searchLast, setSearchLast] = React.useState<Number>();\r\n  React.useEffect(() => {\r\n    if (searchLast != null && !Number.isNaN(searchLast)) {\r\n      setSearch(\"last_withdrawal\");\r\n      setValue(String(searchLast));\r\n    }\r\n  }, [searchLast]);\r\n\r\n  const [products, setProducts] = React.useState([]);\r\n\r\n  const danger = { color: \"red\" };\r\n\r\n  const successAlert = () => {\r\n    toast.fire({\r\n      icon: \"success\",\r\n      title: \"Success!\"\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (warehouse_ID != \"\") {\r\n      axios\r\n        .get(\r\n          Admin_Product_GetAll +\r\n            `/${activeLinkNumber}/${size}/warehouse:${warehouse_ID}/search:${search}/value:${value}/sort:${sort}`,\r\n          { headers }\r\n        )\r\n        .then((res) => {\r\n          setProducts(res.data.all);\r\n          if (size == 0) {\r\n            setPaginationLength(1);\r\n          } else {\r\n            if (res.data.length == 0) {\r\n              setPaginationLength(1);\r\n            } else {\r\n              setPaginationLength(Math.ceil(res.data.length / size));\r\n            }\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, [size, warehouse_ID, search, value, activeLinkNumber, sort, success]);\r\n\r\n  const chooseActiveLinkNumber = (\r\n    activeLinkNumber: React.SetStateAction<number>\r\n  ) => {\r\n    setActiveLinkNumber(activeLinkNumber);\r\n  };\r\n\r\n  const pagination = {\r\n    activeLinkNumber,\r\n    paginationLength,\r\n    chooseActiveLinkNumber\r\n  };\r\n\r\n  const Ac_delete = (id: any) => {\r\n    const handleDelete = () => {\r\n      swal\r\n        .fire({\r\n          title: \"Are you sure?\",\r\n          text: \"You won't be able to revert this!\",\r\n          icon: \"warning\",\r\n          showCancelButton: true,\r\n          confirmButtonColor: \"#3085d6\",\r\n          cancelButtonColor: \"#d33\",\r\n          confirmButtonText: \"Yes, delete it!\"\r\n        })\r\n        .then((result) => {\r\n          if (result.isConfirmed) {\r\n            axios\r\n              .delete(Admin_Product_Delete + `/${id.id}`, { headers })\r\n              .then((res) => {\r\n                setSuccess(Math.random());\r\n                swal.fire(\r\n                  \"Deleted!\",\r\n                  \"That Product has been deleted.\",\r\n                  \"success\"\r\n                );\r\n              })\r\n              .catch((err) => console.log(err));\r\n            swal.fire(\"Deleted!\", \"Successfully deleted.\", \"success\");\r\n          }\r\n        });\r\n    };\r\n\r\n    return (\r\n      <Button variant=\"label-secondary\" className=\"ms-2\" onClick={handleDelete}>\r\n        <FontAwesomeIcon icon={faRemove} />\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  const Modal_Add_Product = () => {\r\n    const [show_ADD_Product, setShow_ADD_Product] = React.useState(false);\r\n\r\n    const [newOne, setNewOne] = React.useState({});\r\n\r\n    interface Pr_Errors {\r\n      name: any;\r\n      code: any;\r\n      bin_location: any;\r\n      initial_stock: any;\r\n    }\r\n    const [pr_errors, setPr_errors] = React.useState<Pr_Errors>({\r\n      name: \"\",\r\n      code: \"\",\r\n      bin_location: \"\",\r\n      initial_stock: \"\"\r\n    });\r\n\r\n    const [code, setCode] = React.useState(\"\");\r\n    const [name, setName] = React.useState(\"\");\r\n    const [bin_location, setBin_location] = React.useState(\"\");\r\n    const [expiration_date, setExpiration_date] = React.useState<Date>();\r\n    const [initial_stock, setInitial_stock] = React.useState<Number>();\r\n    const [comment, setComment] = React.useState(\"\");\r\n\r\n    React.useEffect(() => {\r\n      setNewOne({\r\n        code,\r\n        name,\r\n        bin_location,\r\n        warehouse_ID,\r\n        expiration_date,\r\n        initial_stock,\r\n        comment\r\n      });\r\n    }, [\r\n      code,\r\n      name,\r\n      bin_location,\r\n      warehouse_ID,\r\n      expiration_date,\r\n      initial_stock,\r\n      comment\r\n    ]);\r\n\r\n    const handle_ADD_Product_Hide = () => setShow_ADD_Product(false);\r\n    const handle_ADD_Product_Show = () => setShow_ADD_Product(true);\r\n\r\n    const handle_ADD_Product = async () => {\r\n      if (warehouse_ID != \"\") {\r\n        await axios\r\n          .post(Admin_Product_ADD, newOne, { headers })\r\n          .then((res) => {\r\n            successAlert();\r\n            setPr_errors({\r\n              name: \"\",\r\n              code: \"\",\r\n              bin_location: \"\",\r\n              initial_stock: \"\"\r\n            });\r\n            setSuccess(Math.random());\r\n          })\r\n          .catch((err) => {\r\n            let error: Pr_Errors = {\r\n              name: \"\",\r\n              code: \"\",\r\n              bin_location: \"\",\r\n              initial_stock: \"\"\r\n            };\r\n            !isEmpty(err.response.data.code)\r\n              ? (error.code = err.response.data.code)\r\n              : \"\";\r\n            !isEmpty(err.response.data.name)\r\n              ? (error.name = err.response.data.name)\r\n              : \"\";\r\n            !isEmpty(err.response.data.bin_location)\r\n              ? (error.bin_location = err.response.data.bin_location)\r\n              : \"\";\r\n            !isEmpty(err.response.data.initial_stock)\r\n              ? (error.initial_stock = err.response.data.initial_stock)\r\n              : \"\";\r\n            setPr_errors(error);\r\n          });\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Button\r\n          variant=\"label-secondary\"\r\n          className=\"me-2\"\r\n          onClick={handle_ADD_Product_Show}\r\n        >\r\n          <FontAwesomeIcon icon={faAdd} className=\"me-2\" />\r\n          Add new product\r\n        </Button>\r\n        {/* BEGIN Modal */}\r\n        <Modal show={show_ADD_Product} onHide={handle_ADD_Product_Hide}>\r\n          <Modal.Header>\r\n            <Modal.Title>Add new product</Modal.Title>\r\n            <Button\r\n              icon\r\n              variant=\"label-danger\"\r\n              onClick={handle_ADD_Product_Hide}\r\n            >\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form.Group controlId=\"code_ID\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                onChange={(e) => setCode(e.target.value)}\r\n                placeholder=\"Code\"\r\n              />\r\n              <p style={danger}>{pr_errors.code}</p>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"name_ID\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                onChange={(e) => setName(e.target.value)}\r\n                placeholder=\"Name\"\r\n              />\r\n              <p style={danger}>{pr_errors.name}</p>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"bin_location_ID\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                onChange={(e) => setBin_location(e.target.value)}\r\n                placeholder=\"Bin location\"\r\n              />\r\n              <p style={danger}>{pr_errors.bin_location}</p>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"expiration_data_ID\">\r\n              <Form.Label>Expiration date</Form.Label>\r\n              <Form.Control\r\n                type=\"date\"\r\n                onChange={(e) => setExpiration_date(new Date(e.target.value))}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"initial_stock_ID\">\r\n              <Form.Label>Initial Stock</Form.Label>\r\n              <Form.Control\r\n                type=\"Number\"\r\n                onChange={(e) => setInitial_stock(parseInt(e.target.value))}\r\n              />\r\n              <p style={danger}>{pr_errors.initial_stock}</p>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"comment_ID\">\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows={3}\r\n                onChange={(e) => setComment(e.target.value)}\r\n                placeholder=\"Comment\"\r\n              />\r\n            </Form.Group>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handle_ADD_Product}>\r\n              Submit\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n        {/* END Modal */}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const handleSort = () => {\r\n    if (sort == -1) {\r\n      setSort(1);\r\n    } else {\r\n      setSort(-1);\r\n    }\r\n  };\r\n\r\n  const FontSort = (props: any) => {\r\n    if (props.icon == 1) {\r\n      return <FontAwesomeIcon icon={SolidIcon.faAngleUp} className=\"me-2\" />;\r\n    } else {\r\n      return <FontAwesomeIcon icon={SolidIcon.faAngleDown} className=\"me-2\" />;\r\n    }\r\n  };\r\n\r\n  const Modal_Edit_Product = (id: any) => {\r\n    const [show_Edit_Product, setShow_Edit_Product] = React.useState(false);\r\n\r\n    const [newEdit, setNewEdit] = React.useState({});\r\n\r\n    interface Pr_Errors {\r\n      name: any;\r\n      code: any;\r\n      bin_location: any;\r\n      initial_stock: any;\r\n    }\r\n    const [pr_errors, setPr_errors] = React.useState<Pr_Errors>({\r\n      name: \"\",\r\n      code: \"\",\r\n      bin_location: \"\",\r\n      initial_stock: \"\"\r\n    });\r\n\r\n    const [code, setCode] = React.useState(\"\");\r\n    const [name, setName] = React.useState(\"\");\r\n    const [bin_location, setBin_location] = React.useState(\"\");\r\n    const [expiration_date, setExpiration_date] = React.useState<Date>();\r\n    const [initial_stock, setInitial_stock] = React.useState<Number>();\r\n    const [current_stock, setCurrent_stock] = React.useState<Number>();\r\n    const [last_withdrawal, setLast_withdrawal] = React.useState<Number>();\r\n    const [comment, setComment] = React.useState(\"\");\r\n\r\n    React.useEffect(() => {\r\n      if (show_Edit_Product == true) {\r\n        axios\r\n          .get(Admin_Product_GetOne + `/${id.id}`, { headers })\r\n          .then((res) => {\r\n            setCode(res.data.code);\r\n            setName(res.data.name);\r\n            setBin_location(res.data.bin_location);\r\n            setExpiration_date(res.data.expiration_date);\r\n            setInitial_stock(res.data.initial_stock);\r\n            setCurrent_stock(res.data.current_stock);\r\n            setLast_withdrawal(res.data.last_withdrawal);\r\n            setComment(res.data.comment);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n      }\r\n    }, [show_Edit_Product]);\r\n\r\n    React.useEffect(() => {\r\n      setNewEdit({\r\n        code,\r\n        name,\r\n        bin_location,\r\n        current_stock,\r\n        last_withdrawal,\r\n        expiration_date,\r\n        initial_stock,\r\n        comment\r\n      });\r\n    }, [\r\n      code,\r\n      name,\r\n      bin_location,\r\n      current_stock,\r\n      last_withdrawal,\r\n      expiration_date,\r\n      initial_stock,\r\n      comment\r\n    ]);\r\n\r\n    const handle_Edit_Product_Hide = () => setShow_Edit_Product(false);\r\n    const handle_Edit_Product_Show = () => setShow_Edit_Product(true);\r\n\r\n    const handle_Edit_Product = async () => {\r\n      await axios\r\n        .put(Admin_Product_Edit + `/${id.id}`, newEdit, { headers })\r\n        .then((res) => {\r\n          successAlert();\r\n          setPr_errors({\r\n            name: \"\",\r\n            code: \"\",\r\n            bin_location: \"\",\r\n            initial_stock: \"\"\r\n          });\r\n          setSuccess(Math.random());\r\n        })\r\n        .catch((err) => {\r\n          let error: Pr_Errors = {\r\n            name: \"\",\r\n            code: \"\",\r\n            bin_location: \"\",\r\n            initial_stock: \"\"\r\n          };\r\n          !isEmpty(err.response.data.code)\r\n            ? (error.code = err.response.data.code)\r\n            : \"\";\r\n          !isEmpty(err.response.data.name)\r\n            ? (error.name = err.response.data.name)\r\n            : \"\";\r\n          !isEmpty(err.response.data.bin_location)\r\n            ? (error.bin_location = err.response.data.bin_location)\r\n            : \"\";\r\n          !isEmpty(err.response.data.initial_stock)\r\n            ? (error.initial_stock = err.response.data.initial_stock)\r\n            : \"\";\r\n          setPr_errors(error);\r\n        });\r\n    };\r\n\r\n    const handleDate = (expiration_date: any) => {\r\n      if (expiration_date != undefined) {\r\n        return expiration_date.toString();\r\n      }\r\n      return \"\";\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Button\r\n          variant=\"label-secondary\"\r\n          className=\"ms-2\"\r\n          onClick={handle_Edit_Product_Show}\r\n        >\r\n          <FontAwesomeIcon icon={faEdit} />\r\n        </Button>\r\n        {/* BEGIN Modal */}\r\n        <Modal show={show_Edit_Product} onHide={handle_Edit_Product_Hide}>\r\n          <Modal.Header>\r\n            <Modal.Title>Edit product</Modal.Title>\r\n            <Button\r\n              icon\r\n              variant=\"label-danger\"\r\n              onClick={handle_Edit_Product_Hide}\r\n            >\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form.Group controlId=\"code_ID\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={code}\r\n                onChange={(e) => setCode(e.target.value)}\r\n                placeholder=\"Code\"\r\n              />\r\n              <p style={danger}>{pr_errors.code}</p>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"name_ID\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                placeholder=\"Name\"\r\n              />\r\n              <p style={danger}>{pr_errors.name}</p>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"bin_location_ID\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={bin_location}\r\n                onChange={(e) => setBin_location(e.target.value)}\r\n                placeholder=\"Bin location\"\r\n              />\r\n              <p style={danger}>{pr_errors.bin_location}</p>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"expiration_data_ID\">\r\n              <Form.Label>\r\n                Expiration date: {handleDate(expiration_date)}\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"Date\"\r\n                onChange={(e) => setExpiration_date(new Date(e.target.value))}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"initial_stock_ID\">\r\n              <Form.Label>Initial Stock: {initial_stock}</Form.Label>\r\n              <Form.Control\r\n                type=\"Number\"\r\n                onChange={(e) => setInitial_stock(parseInt(e.target.value))}\r\n              />\r\n              <p style={danger}>{pr_errors.initial_stock}</p>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"current_stock_ID\">\r\n              <Form.Label>Current Stock: {current_stock}</Form.Label>\r\n              <Form.Control\r\n                type=\"Number\"\r\n                onChange={(e) => setCurrent_stock(parseInt(e.target.value))}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"last_withDrawal_ID\">\r\n              <Form.Label>Last WithDrawal: {last_withdrawal}</Form.Label>\r\n              <Form.Control\r\n                type=\"Number\"\r\n                onChange={(e) => setLast_withdrawal(parseInt(e.target.value))}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"comment_ID\">\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                defaultValue={comment}\r\n                rows={3}\r\n                onChange={(e) => setComment(e.target.value)}\r\n                placeholder=\"Comment\"\r\n              />\r\n            </Form.Group>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handle_Edit_Product}>\r\n              Submit\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n        {/* END Modal */}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Portlet>\r\n      <Portlet.Header bordered>\r\n        <Portlet.Title>{warehouse_Name}</Portlet.Title>\r\n        <Portlet.Addon>\r\n          <Modal_Add_Product />\r\n          <Button variant=\"label-secondary\" className=\"me-2\">\r\n            <FontAwesomeIcon icon={faClipboard} className=\"me-2\" />\r\n            Book new product\r\n          </Button>\r\n          <Button variant=\"label-secondary\" className=\"me-2\">\r\n            ...\r\n          </Button>\r\n        </Portlet.Addon>\r\n      </Portlet.Header>\r\n      <Portlet.Body className=\"pb-0\">\r\n        <Row>\r\n          <Col md={2}>\r\n            <Form.Select\r\n              id=\"sizeID\"\r\n              onChange={(e) => setSize(parseInt(e.target.value))}\r\n              defaultValue=\"10\"\r\n              size=\"lg\"\r\n            >\r\n              <option value=\"10\">10</option>\r\n              <option value=\"25\">25</option>\r\n              <option value=\"50\">50</option>\r\n              <option value=\"100\">100</option>\r\n              <option value=\"0\">All</option>\r\n            </Form.Select>\r\n          </Col>\r\n          <Col md={5}></Col>\r\n          <Col md={3}>\r\n            <Pagination pagination={pagination} />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={12}>\r\n            <p></p>\r\n          </Col>\r\n        </Row>\r\n        <Table responsive striped hover>\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">\r\n                <Form.Group controlId=\"th_code_ID\">\r\n                  <Form.Label onClick={handleSort}>\r\n                    Code <FontSort icon={sort} />\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    onChange={(e) => setSearchCode(e.target.value)}\r\n                    size=\"sm\"\r\n                  />\r\n                </Form.Group>\r\n              </th>\r\n              <th scope=\"col\">\r\n                <Form.Group controlId=\"th_name_ID\">\r\n                  <Form.Label onClick={handleSort}>\r\n                    Name <FontSort icon={sort} />\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    onChange={(e) => setSearchName(e.target.value)}\r\n                    size=\"sm\"\r\n                  />\r\n                </Form.Group>\r\n              </th>\r\n              <th scope=\"col\">\r\n                <Form.Group controlId=\"th_bin_location_ID\">\r\n                  <Form.Label onClick={handleSort}>\r\n                    Bin location <FontSort icon={sort} />\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    onChange={(e) => setSearchBin(e.target.value)}\r\n                    size=\"sm\"\r\n                  />\r\n                </Form.Group>\r\n              </th>\r\n              <th scope=\"col\">\r\n                <Form.Group controlId=\"th_expiration_date_ID\">\r\n                  <Form.Label onClick={handleSort}>\r\n                    Expiration date <FontSort icon={sort} />\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type=\"Date\"\r\n                    onChange={(e) => setSearchDate(new Date(e.target.value))}\r\n                    size=\"sm\"\r\n                  />\r\n                </Form.Group>\r\n              </th>\r\n              <th scope=\"col\">\r\n                <Form.Group controlId=\"th_initial_stock_ID\">\r\n                  <Form.Label onClick={handleSort}>\r\n                    Initial stock <FontSort icon={sort} />\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type=\"Number\"\r\n                    onChange={(e) => setSearchInit(parseInt(e.target.value))}\r\n                    size=\"sm\"\r\n                  />\r\n                </Form.Group>\r\n              </th>\r\n              <th scope=\"col\">\r\n                <Form.Group controlId=\"th_current_stock_ID\">\r\n                  <Form.Label onClick={handleSort}>\r\n                    Current stock <FontSort icon={sort} />\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type=\"Number\"\r\n                    onChange={(e) => setSearchCurr(parseInt(e.target.value))}\r\n                    size=\"sm\"\r\n                  />\r\n                </Form.Group>\r\n              </th>\r\n              <th scope=\"col\">\r\n                <Form.Group controlId=\"th_last_withdrawal_ID\">\r\n                  <Form.Label onClick={handleSort}>\r\n                    Last withdrawal <FontSort icon={sort} />\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type=\"Number\"\r\n                    onChange={(e) => setSearchLast(parseInt(e.target.value))}\r\n                    size=\"sm\"\r\n                  />\r\n                </Form.Group>\r\n              </th>\r\n              <th scope=\"col\">\r\n                <Form.Group controlId=\"th_comment_ID\">\r\n                  <Form.Label>Comment</Form.Label>\r\n                </Form.Group>\r\n              </th>\r\n              <th scope=\"col\">\r\n                <Form.Group controlId=\"th_action_ID\">\r\n                  <Form.Label>Action</Form.Label>\r\n                </Form.Group>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {products.map((product: any) => (\r\n              <tr key={product._id}>\r\n                <td>{product.code}</td>\r\n                <td>{product.name}</td>\r\n                <td>{product.bin_location}</td>\r\n                <td>{product.expiration_date}</td>\r\n                <td>{product.initial_stock}</td>\r\n                <td>{product.current_stock}</td>\r\n                <td>{product.last_withdrawal}</td>\r\n                <td>{product.comment}</td>\r\n                <td>\r\n                  <div>\r\n                    <Modal_Edit_Product id={product._id} />\r\n                    <Ac_delete id={product._id} />\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </Portlet.Body>\r\n      <Portlet.Footer>\r\n        <Row>\r\n          <Col md={7}></Col>\r\n          <Col md={5}>\r\n            <Pagination pagination={pagination} />\r\n          </Col>\r\n        </Row>\r\n      </Portlet.Footer>\r\n    </Portlet>\r\n  );\r\n};\r\n\r\nexport default ProductComponent;\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\admin\\warehouse\\product\\ProductsTable.tsx",["1021","1022"],"/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport React, { FC, useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Table, Form, Button } from \"@blueupcode/components\";\r\nimport { IProduct } from \"interfaces/admin/responds\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { swal } from \"components/sweetalert2/instance\";\r\nimport apiCall from \"utils/apiCall\";\r\nimport { Admin_Product_Delete } from \"utils/adminUrl\";\r\n\r\nimport EditProductModal from \"./EditProductModal\";\r\n\r\ninterface IProductTable {\r\n  warehouseID: string;\r\n  products: IProduct[];\r\n  onChangeSort: (value: { key: string; sort: number }) => void;\r\n  onChangeFilter: (value: { key: string; keyword: string }) => void;\r\n  onEditSuccess: () => void;\r\n}\r\n\r\nconst ProductsTable: FC<IProductTable> = ({\r\n  warehouseID,\r\n  products,\r\n  onChangeSort,\r\n  onChangeFilter,\r\n  onEditSuccess\r\n}) => {\r\n  const [sortKey, setSortKey] = useState({\r\n    key: \"unique_id\",\r\n    sort: 1\r\n  });\r\n  const [filter, setFilter] = useState({\r\n    key: \"\",\r\n    keyword: \"\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    onChangeSort(sortKey);\r\n  }, [sortKey]);\r\n\r\n  useEffect(() => {\r\n    onChangeFilter(filter);\r\n  }, [filter]);\r\n\r\n  const handleSort = (key: any) => {\r\n    let sort = 1;\r\n    if (key === sortKey.key) {\r\n      if (sortKey.sort === -1) {\r\n        sort = 1;\r\n      } else {\r\n        sort = -1;\r\n      }\r\n    } else {\r\n      sort = -1;\r\n    }\r\n    setSortKey({\r\n      key,\r\n      sort\r\n    });\r\n  };\r\n\r\n  const handleFilterChange = (e: any) => {\r\n    if (e.target.value === \"\") {\r\n      setFilter({\r\n        key: \"\",\r\n        keyword: \"\"\r\n      });\r\n    } else {\r\n      setFilter({\r\n        key: e.target.name,\r\n        keyword: e.target.value\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeleteProduct = (id: string) => {\r\n    swal\r\n      .fire({\r\n        title: \"Are you sure?\",\r\n        text: \"You won't be able to revert this!\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        confirmButtonColor: \"#3085d6\",\r\n        cancelButtonColor: \"#d33\",\r\n        confirmButtonText: \"Yes, delete it!\"\r\n      })\r\n      .then(async (result) => {\r\n        if (result.isConfirmed) {\r\n          try {\r\n            await apiCall(`${Admin_Product_Delete}/${id}`, \"DELETE\", {});\r\n            swal.fire(\"Deleted!\", \"Successfully deleted.\", \"success\");\r\n            onEditSuccess();\r\n          } catch (error) {\r\n            swal.fire(\r\n              \"Failure!\",\r\n              \"Deleting Product is failure, Try again.\",\r\n              \"error\"\r\n            );\r\n          }\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Table responsive striped hover>\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">\r\n            <Form.Group controlId=\"th_unique_ID\">\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n                onClick={() => {\r\n                  handleSort(\"unique_id\");\r\n                }}\r\n              >\r\n                Product ID\r\n                {sortKey.key === \"unique_id\" && sortKey.sort === -1 ? (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleUp}\r\n                    className=\"me-2\"\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleDown}\r\n                    className=\"me-2\"\r\n                  />\r\n                )}\r\n              </span>\r\n              <Form.Control\r\n                name=\"unique_id\"\r\n                type=\"text\"\r\n                onChange={handleFilterChange}\r\n                size=\"sm\"\r\n              />\r\n            </Form.Group>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <Form.Group controlId=\"th_code_ID\">\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n                onClick={() => {\r\n                  handleSort(\"code\");\r\n                }}\r\n              >\r\n                Code\r\n                {sortKey.key === \"code\" && sortKey.sort === -1 ? (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleUp}\r\n                    className=\"me-2\"\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleDown}\r\n                    className=\"me-2\"\r\n                  />\r\n                )}\r\n              </span>\r\n              <Form.Control\r\n                name=\"code\"\r\n                type=\"text\"\r\n                onChange={handleFilterChange}\r\n                size=\"sm\"\r\n              />\r\n            </Form.Group>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <Form.Group controlId=\"th_name_ID\">\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n                onClick={() => {\r\n                  handleSort(\"name\");\r\n                }}\r\n              >\r\n                Name\r\n                {sortKey.key === \"name\" && sortKey.sort === -1 ? (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleUp}\r\n                    className=\"me-2\"\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleDown}\r\n                    className=\"me-2\"\r\n                  />\r\n                )}\r\n              </span>\r\n              <Form.Control\r\n                name=\"name\"\r\n                type=\"text\"\r\n                onChange={handleFilterChange}\r\n                size=\"sm\"\r\n              />\r\n            </Form.Group>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <Form.Group controlId=\"th_bin_location_ID\">\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n                onClick={() => {\r\n                  handleSort(\"bin_location\");\r\n                }}\r\n              >\r\n                Bin location\r\n                {sortKey.key === \"bin_location\" && sortKey.sort === -1 ? (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleUp}\r\n                    className=\"me-2\"\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleDown}\r\n                    className=\"me-2\"\r\n                  />\r\n                )}\r\n              </span>\r\n              <Form.Control\r\n                name=\"bin_location\"\r\n                type=\"text\"\r\n                onChange={handleFilterChange}\r\n                size=\"sm\"\r\n              />\r\n            </Form.Group>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <Form.Group controlId=\"th_expiration_date_ID\">\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n                onClick={() => {\r\n                  handleSort(\"expiration_date\");\r\n                }}\r\n              >\r\n                Expiration date\r\n                {sortKey.key === \"expiration_date\" && sortKey.sort === -1 ? (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleUp}\r\n                    className=\"me-2\"\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleDown}\r\n                    className=\"me-2\"\r\n                  />\r\n                )}\r\n              </span>\r\n              <Form.Control\r\n                name=\"expiration_date\"\r\n                type=\"Date\"\r\n                onChange={handleFilterChange}\r\n                size=\"sm\"\r\n              />\r\n            </Form.Group>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <Form.Group controlId=\"th_initial_stock_ID\">\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n                onClick={() => {\r\n                  handleSort(\"initial_stock\");\r\n                }}\r\n              >\r\n                Initial stock\r\n                {sortKey.key === \"initial_stock\" && sortKey.sort === -1 ? (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleUp}\r\n                    className=\"me-2\"\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleDown}\r\n                    className=\"me-2\"\r\n                  />\r\n                )}\r\n              </span>\r\n              <Form.Control\r\n                name=\"initial_stock\"\r\n                type=\"Number\"\r\n                onChange={handleFilterChange}\r\n                size=\"sm\"\r\n              />\r\n            </Form.Group>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <Form.Group controlId=\"th_current_stock_ID\">\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n                onClick={() => {\r\n                  handleSort(\"current_stock\");\r\n                }}\r\n              >\r\n                Current stock\r\n                {sortKey.key === \"current_stock\" && sortKey.sort === -1 ? (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleUp}\r\n                    className=\"me-2\"\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleDown}\r\n                    className=\"me-2\"\r\n                  />\r\n                )}\r\n              </span>\r\n              <Form.Control\r\n                name=\"current_stock\"\r\n                type=\"Number\"\r\n                onChange={handleFilterChange}\r\n                size=\"sm\"\r\n              />\r\n            </Form.Group>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <Form.Group controlId=\"th_last_withdrawal_ID\">\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n                onClick={() => {\r\n                  handleSort(\"last_withdrawal\");\r\n                }}\r\n              >\r\n                Last withdrawal\r\n                {sortKey.key === \"last_withdrawal\" && sortKey.sort === -1 ? (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleUp}\r\n                    className=\"me-2\"\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={SolidIcon.faAngleDown}\r\n                    className=\"me-2\"\r\n                  />\r\n                )}\r\n              </span>\r\n              <Form.Control\r\n                type=\"Number\"\r\n                name=\"last_withdrawal\"\r\n                onChange={handleFilterChange}\r\n                size=\"sm\"\r\n              />\r\n            </Form.Group>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <Form.Group controlId=\"th_comment_ID\">\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n              >\r\n                Comment\r\n              </span>\r\n            </Form.Group>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <Form.Group controlId=\"th_action_ID\">\r\n              <span\r\n                style={{\r\n                  cursor: \"pointer\"\r\n                }}\r\n              >\r\n                Action\r\n              </span>\r\n            </Form.Group>\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {products.map((product: any) => (\r\n          <tr key={product._id}>\r\n            <td>{product.unique_id}</td>\r\n            <td>{product.code}</td>\r\n            <td>{product.name}</td>\r\n            <td>{product.bin_location}</td>\r\n            <td>{new Date(product.expiration_date).toLocaleDateString()}</td>\r\n            <td>{product.initial_stock}</td>\r\n            <td>{product.current_stock}</td>\r\n            <td>{product.last_withdrawal}</td>\r\n            <td>{product.comment}</td>\r\n            <td>\r\n              <div style={{ display: \"flex\" }}>\r\n                <EditProductModal\r\n                  onEditSuccess={onEditSuccess}\r\n                  productId={product._id}\r\n                />\r\n                <Button\r\n                  variant=\"label-secondary\"\r\n                  className=\"ms-2\"\r\n                  onClick={() => {\r\n                    handleDeleteProduct(product._id);\r\n                  }}\r\n                >\r\n                  <FontAwesomeIcon icon={faTrash} />\r\n                </Button>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default ProductsTable;\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\authAdminVerifyCookie.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\authContext.tsx",["1023"],"import React from 'react'\r\nimport {parseCookies}  from 'nookies'\r\nimport { Admin_Verify } from 'utils/adminUrl'\r\nimport axios from 'axios'\r\nimport { Interface } from 'readline'\r\n\r\n// Set timer constants\r\nconst cookieExpireIn = 30 * 24 * 60 * 60\r\nconst refreshTokenIn = 10 * 60 * 1000\r\n\r\nconst cookies = parseCookies().admintoken\r\n\r\n// Set authentication context\r\nconst AuthContext = React.createContext<AuthContextProps>({\r\n\tuserData: null,\r\n\tsetUserData: () => {},\r\n})\r\n\r\nexport type AuthUserData = any | null\r\n\r\nexport interface AuthContextProps {\r\n\tuserData: AuthUserData\r\n\tsetUserData: (dir: AuthUserData) => void\r\n}\r\n\r\n// Set authentication provider\r\nexport const AuthProvider: React.FC = ({ children }) => {\r\n\tconst [userData, setUserData] = React.useState<AuthUserData>(null)\r\n\tconst headers = {\"Authorization\": cookies} \r\n\t\r\n\tReact.useEffect(() => {\r\n\t\tif(headers.Authorization !== undefined){\r\n\t\t\taxios.get(Admin_Verify, {headers})\r\n\t\t\t\t.then(res => {\r\n\t\t\t\t\tsetUserData(res.data)\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\tconsole.log(err)\r\n\t\t\t\t})\r\n\t\t\t}\t\r\n\t}, [])\r\n\t// React.useEffect(() => {\r\n\t// \t// Set timer for refreshing user token\r\n\t// \tconst interval = setInterval(async () => {\r\n\t// \t\tconst user = firebaseAuth.currentUser\r\n\r\n\t// \t\t// Forced refresh user token\r\n\t// \t\tif (user) await user.getIdToken(true)\r\n\t// \t}, refreshTokenIn)\r\n\r\n\t// \t// Clear timer\r\n\t// \treturn () => clearInterval(interval)\r\n\t// }, [])\r\n\r\n\treturn <AuthContext.Provider value={{ userData, setUserData }}>{children}</AuthContext.Provider>\r\n}\r\n\r\n// Set authentication hook\r\nexport const useAuth = () => {\r\n\treturn React.useContext(AuthContext)\r\n}\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\authVerifyCookie.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\withAdminAuth.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\withAdminGuest.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\withAuth.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\auth\\withGuest.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\firebase\\firebaseAdmin.ts",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\firebase\\firebaseClient.ts",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\aside\\Aside.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\aside\\AsideNavigationMenu.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\aside\\AsideNavigationMenuLink.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\aside\\AsideNavigationMenuSection.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\aside\\AsideNavigationMenuSubmenu.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\floating-button\\FloatingButton.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\footer\\Footer.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\getLayout.ts",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\Header.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderAction.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderActionFullscreen.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderActionToggle.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderAdminUser.tsx",["1024"],"import React from 'react'\r\nimport { Avatar, Dropdown, Portlet, RichList, Button, Badge, GridNav, Widget13 } from '@blueupcode/components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n\tfaAddressCard,\r\n\tfaCalendarTimes,\r\n} from '@fortawesome/free-regular-svg-icons'\r\nimport { faLanguage, faUserAlt, } from '@fortawesome/free-solid-svg-icons'\r\nimport { useAuth } from 'components/auth/authContext'\r\nimport Router from 'next/router'\r\nimport PAGE from 'config/page.config'\r\nimport type { ButtonVariant } from '@blueupcode/components/types'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { logoutUser } from 'store/actions'\r\nimport Image from 'next/image'\r\nimport { useRouter } from 'next/router';\r\n\r\nconst isEmpty = require('utils/is-empty')\r\n\r\nconst LayoutHeaderAdminUser: React.FC<LayoutHeaderAdminUserProps> = ({ variant }) => {\r\n\tconst dispatch = useDispatch()\r\n    const router = useRouter()\r\n\tconst userDataFromStore = useSelector((state: any) => state.auth.user)\r\n    const [email, setEmail] = React.useState('')\r\n    const [firstname, setFirstname] = React.useState('')\r\n    const [profile_image, setProfile_image] = React.useState('')\r\n    const [id, setId] = React.useState('')\r\n\tconst { userData } = useAuth()\r\n\tReact.useEffect(() => {\r\n\t\tif(userDataFromStore.email !== undefined){\r\n\t\t\tsetEmail(userDataFromStore.email)\r\n\t\t\tsetFirstname(userDataFromStore.firstname)\r\n\t\t\tsetProfile_image(userDataFromStore.profile_image)\r\n\t\t\tsetId(userDataFromStore._id)\r\n\t\t}else{\r\n\t\t\tsetEmail(userData?.email)\r\n\t\t\tsetFirstname(userData?.firstname)\r\n\t\t\tsetProfile_image(userData?.profile_image)\r\n\t\t\tsetId(userData?._id)\r\n\t\t}\r\n\t}, [userData])\r\n\t\r\n\tconst handleClick = (data: any) => {\r\n\t\tif(data.title == 'Profile')\r\n\t\t{\r\n\t\t\trouter.push({pathname : '/admin/profile', query: {id: id}})\r\n\t\t}\r\n\t}\r\n\tconst DisplayImage = (props: any) => {\r\n\t\tconst profile_image = props.image\r\n        const src = '/uploads/profile_images/' + profile_image\r\n        if(profile_image === undefined || isEmpty(profile_image)){\r\n            return (<FontAwesomeIcon icon={faUserAlt} />)\r\n        } else{\r\n            return (\r\n                <div style={{position: \"relative\", width:\"31px\", height: \"31px\"}}>                \r\n                    <Image src={src} layout=\"fill\" alt=\"Avatar image\" />\r\n                </div>\r\n\t\t\t)\r\n        }\r\n    }\r\n\t\r\n\tconst handleLogout = async () => {\r\n\t\t// Sign out with Firebase\r\n\t\tawait dispatch(logoutUser())\r\n\r\n\t\t// Redirect to login page\r\n\t\tRouter.push(PAGE.AdminloginPagePath)\r\n\t}\r\n\r\n\tconst [navigationData] = React.useState([\r\n\t\t[\r\n\t\t\t{\r\n\t\t\t\ticon: <FontAwesomeIcon icon={faAddressCard} />,\r\n\t\t\t\ttitle: 'Profile',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ticon: <FontAwesomeIcon icon={faCalendarTimes} />,\r\n\t\t\t\ttitle: 'Timesheets',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ticon: <FontAwesomeIcon icon={faLanguage} />,\r\n\t\t\t\ttitle: 'Language',\r\n\t\t\t},\r\n\t\t]\r\n\t])\r\n\r\n\treturn (\r\n\t\t<Dropdown>\r\n\t\t\t<Widget13 variant={variant} noCaret>\r\n\t\t\t\t<Widget13.Text>\r\n\t\t\t\t\tHi <strong>{firstname}</strong>\r\n\t\t\t\t</Widget13.Text>\r\n\t\t\t\t{/* BEGIN Avatar */}\r\n\t\t\t\t<Widget13.Avatar variant=\"info\" display>\r\n\t\t\t\t\t{/* <div style={displayImage}> */}\r\n\t\t\t\t\t\t<DisplayImage image={profile_image}/>\r\n\t\t\t\t\t{/* </div> */}\r\n\t\t\t\t</Widget13.Avatar>\r\n\t\t\t\t{/* END Avatar */}\r\n\t\t\t</Widget13>\r\n\t\t\t<Dropdown.Menu wide animated align=\"end\" className=\"overflow-hidden py-0\">\r\n\t\t\t\t{/* BEGIN Portlet */}\r\n\t\t\t\t<Portlet scroll className=\"border-0\">\r\n\t\t\t\t\t<Portlet.Header className=\"bg-primary rounded-0\">\r\n\t\t\t\t\t\t{/* BEGIN Rich List */}\r\n\t\t\t\t\t\t<RichList.Item className=\"w-100 p-0\">\r\n\t\t\t\t\t\t\t<RichList.Addon addonType=\"prepend\">\r\n\t\t\t\t\t\t\t\t<Avatar variant=\"label-light\" display circle>\r\n\t\t\t\t\t\t\t\t\t<DisplayImage image={profile_image}/>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t</RichList.Addon>\r\n\t\t\t\t\t\t\t<RichList.Content>\r\n\t\t\t\t\t\t\t\t<RichList.Title className=\"text-white\">{firstname ?? 'Guest'}</RichList.Title>\r\n\t\t\t\t\t\t\t\t<RichList.Subtitle className=\"text-white\">{email ?? 'No email'}</RichList.Subtitle>\r\n\t\t\t\t\t\t\t</RichList.Content>\r\n\t\t\t\t\t\t\t{/* <RichList.Addon addonType=\"append\">\r\n\t\t\t\t\t\t\t\t<Badge variant=\"label-light\" className=\"fs-6\">\r\n\t\t\t\t\t\t\t\t\t9+\r\n\t\t\t\t\t\t\t\t</Badge>\r\n\t\t\t\t\t\t\t</RichList.Addon> */}\r\n\t\t\t\t\t\t</RichList.Item>\r\n\t\t\t\t\t\t{/* END Rich List */}\r\n\t\t\t\t\t</Portlet.Header>\r\n\t\t\t\t\t<Portlet.Body className=\"p-0\">\r\n\t\t\t\t\t\t{/* BEGIN Grid Nav */}\r\n\t\t\t\t\t\t<GridNav flush action noRounded>\r\n\t\t\t\t\t\t\t{navigationData.map((navigationRow, index) => (\r\n\t\t\t\t\t\t\t\t<GridNav.Row key={index}>\r\n\t\t\t\t\t\t\t\t\t{navigationRow.map((nativationItem, index) => {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<GridNav.Item key={index} icon={nativationItem.icon} onClick={() => handleClick(nativationItem)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{nativationItem.title}\r\n\t\t\t\t\t\t\t\t\t\t\t</GridNav.Item>\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</GridNav.Row>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</GridNav>\r\n\t\t\t\t\t\t{/* END Grid Nav */}\r\n\t\t\t\t\t</Portlet.Body>\r\n\t\t\t\t\t<Portlet.Footer bordered className=\"rounded-0\" onClick={handleLogout}>\r\n\t\t\t\t\t\t<Button variant=\"label-danger\">Sign out</Button>\r\n\t\t\t\t\t</Portlet.Footer>\r\n\t\t\t\t</Portlet>\r\n\t\t\t\t{/* END Portlet */}\r\n\t\t\t</Dropdown.Menu>\r\n\t\t</Dropdown>\r\n\t)\r\n}\r\n\r\ninterface LayoutHeaderAdminUserProps {\r\n\tvariant: ButtonVariant\r\n}\r\n\r\nexport default LayoutHeaderAdminUser\r\n","F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderBreadcrumb.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderChat.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderNav.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderNotification.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\header\\HeaderUser.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\offcanvas\\agenda\\OffcanvasAgenda.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\offcanvas\\setting\\OffcanvasSetting.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\template\\BackgroundLayout.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\template\\BlankLayout.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\template\\DefaultLayout.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\widget\\WidgetContacts.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\widget\\WidgetOptions.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\widget\\WidgetPerformance.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\widget\\WidgetTimeline.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\layout\\widget\\WidgetUserThumbnail.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\sweetalert2\\instance.ts",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\Table\\index.ts",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\Table\\Table.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\Table\\TableHeader.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget1.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget10.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget11.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget12.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget13.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget14.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget15.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget16.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget17.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget18.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget19.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget2.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget20.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget21.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget22.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget23.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget24.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget25.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget26.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget27.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget28.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget29.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget3.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget30.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget31.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget32.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget33.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget34.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget35.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget4.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget5.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget6.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget7.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget8.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\components\\widgets\\Widget9.tsx",[],"F:\\ourso\\panel.vlblum\\frontend\\src\\pages\\admin\\register.tsx",[],{"ruleId":"1025","severity":1,"message":"1026","line":46,"column":4,"nodeType":"1027","endLine":46,"endColumn":18,"suggestions":"1028"},{"ruleId":"1025","severity":1,"message":"1029","line":69,"column":8,"nodeType":"1027","endLine":69,"endColumn":16,"suggestions":"1030"},{"ruleId":"1025","severity":1,"message":"1031","line":76,"column":5,"nodeType":"1027","endLine":76,"endColumn":9,"suggestions":"1032"},{"ruleId":"1033","severity":1,"message":"1034","line":13,"column":1,"nodeType":"1035","endLine":35,"endColumn":2},{"ruleId":"1033","severity":1,"message":"1034","line":13,"column":1,"nodeType":"1035","endLine":35,"endColumn":2},{"ruleId":"1033","severity":1,"message":"1034","line":13,"column":1,"nodeType":"1035","endLine":30,"endColumn":2},{"ruleId":"1033","severity":1,"message":"1034","line":13,"column":1,"nodeType":"1035","endLine":30,"endColumn":2},{"ruleId":"1025","severity":1,"message":"1026","line":39,"column":8,"nodeType":"1027","endLine":39,"endColumn":46,"suggestions":"1036"},{"ruleId":"1025","severity":1,"message":"1026","line":50,"column":8,"nodeType":"1027","endLine":50,"endColumn":19,"suggestions":"1037"},{"ruleId":"1025","severity":1,"message":"1026","line":64,"column":8,"nodeType":"1027","endLine":64,"endColumn":10,"suggestions":"1038"},{"ruleId":"1025","severity":1,"message":"1039","line":56,"column":8,"nodeType":"1027","endLine":56,"endColumn":10,"suggestions":"1040"},{"ruleId":"1025","severity":1,"message":"1026","line":78,"column":8,"nodeType":"1027","endLine":78,"endColumn":10,"suggestions":"1041"},{"ruleId":"1025","severity":1,"message":"1026","line":40,"column":8,"nodeType":"1027","endLine":40,"endColumn":46,"suggestions":"1042"},{"ruleId":"1025","severity":1,"message":"1026","line":51,"column":8,"nodeType":"1027","endLine":51,"endColumn":19,"suggestions":"1043"},{"ruleId":"1025","severity":1,"message":"1039","line":39,"column":8,"nodeType":"1027","endLine":39,"endColumn":10,"suggestions":"1044"},{"ruleId":"1025","severity":1,"message":"1026","line":43,"column":8,"nodeType":"1027","endLine":43,"endColumn":50,"suggestions":"1045"},{"ruleId":"1025","severity":1,"message":"1026","line":54,"column":8,"nodeType":"1027","endLine":54,"endColumn":20,"suggestions":"1046"},{"ruleId":"1025","severity":1,"message":"1026","line":40,"column":8,"nodeType":"1027","endLine":40,"endColumn":46,"suggestions":"1047"},{"ruleId":"1025","severity":1,"message":"1026","line":51,"column":8,"nodeType":"1027","endLine":51,"endColumn":19,"suggestions":"1048"},{"ruleId":"1025","severity":1,"message":"1039","line":43,"column":8,"nodeType":"1027","endLine":43,"endColumn":10,"suggestions":"1049"},{"ruleId":"1025","severity":1,"message":"1039","line":53,"column":8,"nodeType":"1027","endLine":53,"endColumn":58,"suggestions":"1050"},{"ruleId":"1025","severity":1,"message":"1026","line":64,"column":8,"nodeType":"1027","endLine":64,"endColumn":19,"suggestions":"1051"},{"ruleId":"1025","severity":1,"message":"1052","line":278,"column":12,"nodeType":"1027","endLine":278,"endColumn":14,"suggestions":"1053"},{"ruleId":"1025","severity":1,"message":"1026","line":43,"column":8,"nodeType":"1027","endLine":43,"endColumn":60,"suggestions":"1054"},{"ruleId":"1025","severity":1,"message":"1026","line":54,"column":8,"nodeType":"1027","endLine":54,"endColumn":19,"suggestions":"1055"},{"ruleId":"1025","severity":1,"message":"1039","line":55,"column":8,"nodeType":"1027","endLine":55,"endColumn":10,"suggestions":"1056"},{"ruleId":"1025","severity":1,"message":"1026","line":43,"column":8,"nodeType":"1027","endLine":43,"endColumn":60,"suggestions":"1057"},{"ruleId":"1025","severity":1,"message":"1026","line":54,"column":8,"nodeType":"1027","endLine":54,"endColumn":22,"suggestions":"1058"},{"ruleId":"1025","severity":1,"message":"1059","line":11,"column":8,"nodeType":"1027","endLine":11,"endColumn":16,"suggestions":"1060"},{"ruleId":"1025","severity":1,"message":"1026","line":56,"column":8,"nodeType":"1027","endLine":56,"endColumn":10,"suggestions":"1061"},{"ruleId":"1025","severity":1,"message":"1026","line":66,"column":8,"nodeType":"1027","endLine":66,"endColumn":10,"suggestions":"1062"},{"ruleId":"1025","severity":1,"message":"1026","line":74,"column":8,"nodeType":"1027","endLine":74,"endColumn":10,"suggestions":"1063"},{"ruleId":"1025","severity":1,"message":"1064","line":78,"column":8,"nodeType":"1027","endLine":78,"endColumn":300,"suggestions":"1065"},{"ruleId":"1025","severity":1,"message":"1039","line":88,"column":8,"nodeType":"1027","endLine":88,"endColumn":10,"suggestions":"1066"},{"ruleId":"1025","severity":1,"message":"1026","line":96,"column":8,"nodeType":"1027","endLine":96,"endColumn":10,"suggestions":"1067"},{"ruleId":"1025","severity":1,"message":"1026","line":106,"column":8,"nodeType":"1027","endLine":106,"endColumn":10,"suggestions":"1068"},{"ruleId":"1025","severity":1,"message":"1026","line":114,"column":8,"nodeType":"1027","endLine":114,"endColumn":10,"suggestions":"1069"},{"ruleId":"1025","severity":1,"message":"1064","line":118,"column":8,"nodeType":"1027","endLine":118,"endColumn":300,"suggestions":"1070"},{"ruleId":"1025","severity":1,"message":"1026","line":49,"column":8,"nodeType":"1027","endLine":49,"endColumn":46,"suggestions":"1071"},{"ruleId":"1025","severity":1,"message":"1026","line":71,"column":8,"nodeType":"1027","endLine":71,"endColumn":10,"suggestions":"1072"},{"ruleId":"1025","severity":1,"message":"1026","line":82,"column":8,"nodeType":"1027","endLine":82,"endColumn":24,"suggestions":"1073"},{"ruleId":"1025","severity":1,"message":"1074","line":138,"column":8,"nodeType":"1027","endLine":138,"endColumn":53,"suggestions":"1075"},{"ruleId":"1025","severity":1,"message":"1026","line":44,"column":8,"nodeType":"1027","endLine":44,"endColumn":10,"suggestions":"1076"},{"ruleId":"1025","severity":1,"message":"1026","line":53,"column":8,"nodeType":"1027","endLine":53,"endColumn":10,"suggestions":"1077"},{"ruleId":"1025","severity":1,"message":"1039","line":48,"column":8,"nodeType":"1027","endLine":48,"endColumn":10,"suggestions":"1078"},{"ruleId":"1025","severity":1,"message":"1026","line":56,"column":8,"nodeType":"1027","endLine":56,"endColumn":10,"suggestions":"1079"},{"ruleId":"1025","severity":1,"message":"1026","line":64,"column":8,"nodeType":"1027","endLine":64,"endColumn":10,"suggestions":"1080"},{"ruleId":"1025","severity":1,"message":"1026","line":72,"column":8,"nodeType":"1027","endLine":72,"endColumn":10,"suggestions":"1081"},{"ruleId":"1025","severity":1,"message":"1039","line":77,"column":8,"nodeType":"1027","endLine":77,"endColumn":10,"suggestions":"1082"},{"ruleId":"1025","severity":1,"message":"1026","line":89,"column":8,"nodeType":"1027","endLine":89,"endColumn":10,"suggestions":"1083"},{"ruleId":"1025","severity":1,"message":"1084","line":93,"column":8,"nodeType":"1027","endLine":93,"endColumn":144,"suggestions":"1085"},{"ruleId":"1025","severity":1,"message":"1026","line":38,"column":8,"nodeType":"1027","endLine":38,"endColumn":46,"suggestions":"1086"},{"ruleId":"1025","severity":1,"message":"1026","line":49,"column":8,"nodeType":"1027","endLine":49,"endColumn":23,"suggestions":"1087"},{"ruleId":"1025","severity":1,"message":"1026","line":61,"column":8,"nodeType":"1027","endLine":61,"endColumn":10,"suggestions":"1088"},{"ruleId":"1025","severity":1,"message":"1026","line":74,"column":8,"nodeType":"1027","endLine":74,"endColumn":10,"suggestions":"1089"},{"ruleId":"1025","severity":1,"message":"1090","line":78,"column":8,"nodeType":"1027","endLine":78,"endColumn":125,"suggestions":"1091"},{"ruleId":"1025","severity":1,"message":"1039","line":76,"column":8,"nodeType":"1027","endLine":76,"endColumn":10,"suggestions":"1092"},{"ruleId":"1025","severity":1,"message":"1026","line":90,"column":8,"nodeType":"1027","endLine":90,"endColumn":10,"suggestions":"1093"},{"ruleId":"1025","severity":1,"message":"1026","line":103,"column":8,"nodeType":"1027","endLine":103,"endColumn":10,"suggestions":"1094"},{"ruleId":"1025","severity":1,"message":"1090","line":107,"column":8,"nodeType":"1027","endLine":107,"endColumn":125,"suggestions":"1095"},{"ruleId":"1025","severity":1,"message":"1026","line":40,"column":8,"nodeType":"1027","endLine":40,"endColumn":46,"suggestions":"1096"},{"ruleId":"1025","severity":1,"message":"1026","line":51,"column":8,"nodeType":"1027","endLine":51,"endColumn":19,"suggestions":"1097"},{"ruleId":"1025","severity":1,"message":"1026","line":40,"column":8,"nodeType":"1027","endLine":40,"endColumn":46,"suggestions":"1098"},{"ruleId":"1025","severity":1,"message":"1026","line":51,"column":8,"nodeType":"1027","endLine":51,"endColumn":19,"suggestions":"1099"},{"ruleId":"1025","severity":1,"message":"1026","line":40,"column":8,"nodeType":"1027","endLine":40,"endColumn":46,"suggestions":"1100"},{"ruleId":"1025","severity":1,"message":"1026","line":51,"column":8,"nodeType":"1027","endLine":51,"endColumn":19,"suggestions":"1101"},{"ruleId":"1025","severity":1,"message":"1026","line":42,"column":8,"nodeType":"1027","endLine":42,"endColumn":61,"suggestions":"1102"},{"ruleId":"1025","severity":1,"message":"1026","line":53,"column":8,"nodeType":"1027","endLine":53,"endColumn":19,"suggestions":"1103"},{"ruleId":"1025","severity":1,"message":"1026","line":64,"column":8,"nodeType":"1027","endLine":64,"endColumn":20,"suggestions":"1104"},{"ruleId":"1025","severity":1,"message":"1105","line":31,"column":8,"nodeType":"1027","endLine":31,"endColumn":64,"suggestions":"1106"},{"ruleId":"1025","severity":1,"message":"1039","line":47,"column":8,"nodeType":"1027","endLine":47,"endColumn":10,"suggestions":"1107"},{"ruleId":"1025","severity":1,"message":"1105","line":51,"column":8,"nodeType":"1027","endLine":51,"endColumn":64,"suggestions":"1108"},{"ruleId":"1025","severity":1,"message":"1026","line":40,"column":8,"nodeType":"1027","endLine":40,"endColumn":46,"suggestions":"1109"},{"ruleId":"1025","severity":1,"message":"1026","line":51,"column":8,"nodeType":"1027","endLine":51,"endColumn":19,"suggestions":"1110"},{"ruleId":"1025","severity":1,"message":"1039","line":41,"column":8,"nodeType":"1027","endLine":41,"endColumn":10,"suggestions":"1111"},{"ruleId":"1025","severity":1,"message":"1026","line":40,"column":8,"nodeType":"1027","endLine":40,"endColumn":46,"suggestions":"1112"},{"ruleId":"1025","severity":1,"message":"1026","line":51,"column":8,"nodeType":"1027","endLine":51,"endColumn":19,"suggestions":"1113"},{"ruleId":"1025","severity":1,"message":"1026","line":40,"column":8,"nodeType":"1027","endLine":40,"endColumn":46,"suggestions":"1114"},{"ruleId":"1025","severity":1,"message":"1026","line":51,"column":8,"nodeType":"1027","endLine":51,"endColumn":19,"suggestions":"1115"},{"ruleId":"1025","severity":1,"message":"1039","line":38,"column":8,"nodeType":"1027","endLine":38,"endColumn":10,"suggestions":"1116"},{"ruleId":"1025","severity":1,"message":"1026","line":40,"column":8,"nodeType":"1027","endLine":40,"endColumn":46,"suggestions":"1117"},{"ruleId":"1025","severity":1,"message":"1026","line":51,"column":8,"nodeType":"1027","endLine":51,"endColumn":19,"suggestions":"1118"},{"ruleId":"1025","severity":1,"message":"1039","line":47,"column":8,"nodeType":"1027","endLine":47,"endColumn":10,"suggestions":"1119"},{"ruleId":"1025","severity":1,"message":"1026","line":40,"column":8,"nodeType":"1027","endLine":40,"endColumn":46,"suggestions":"1120"},{"ruleId":"1025","severity":1,"message":"1026","line":51,"column":8,"nodeType":"1027","endLine":51,"endColumn":19,"suggestions":"1121"},{"ruleId":"1025","severity":1,"message":"1122","line":35,"column":8,"nodeType":"1027","endLine":35,"endColumn":43,"suggestions":"1123"},{"ruleId":"1025","severity":1,"message":"1039","line":43,"column":8,"nodeType":"1027","endLine":43,"endColumn":10,"suggestions":"1124"},{"ruleId":"1025","severity":1,"message":"1122","line":47,"column":8,"nodeType":"1027","endLine":47,"endColumn":37,"suggestions":"1125"},{"ruleId":"1025","severity":1,"message":"1026","line":45,"column":8,"nodeType":"1027","endLine":45,"endColumn":66,"suggestions":"1126"},{"ruleId":"1025","severity":1,"message":"1026","line":56,"column":8,"nodeType":"1027","endLine":56,"endColumn":21,"suggestions":"1127"},{"ruleId":"1025","severity":1,"message":"1026","line":69,"column":8,"nodeType":"1027","endLine":69,"endColumn":10,"suggestions":"1128"},{"ruleId":"1025","severity":1,"message":"1026","line":82,"column":8,"nodeType":"1027","endLine":82,"endColumn":10,"suggestions":"1129"},{"ruleId":"1025","severity":1,"message":"1084","line":86,"column":8,"nodeType":"1027","endLine":86,"endColumn":158,"suggestions":"1130"},{"ruleId":"1025","severity":1,"message":"1039","line":80,"column":8,"nodeType":"1027","endLine":80,"endColumn":10,"suggestions":"1131"},{"ruleId":"1025","severity":1,"message":"1026","line":92,"column":8,"nodeType":"1027","endLine":92,"endColumn":10,"suggestions":"1132"},{"ruleId":"1025","severity":1,"message":"1026","line":105,"column":8,"nodeType":"1027","endLine":105,"endColumn":10,"suggestions":"1133"},{"ruleId":"1025","severity":1,"message":"1084","line":114,"column":8,"nodeType":"1027","endLine":114,"endColumn":149,"suggestions":"1134"},{"ruleId":"1025","severity":1,"message":"1135","line":118,"column":8,"nodeType":"1027","endLine":118,"endColumn":18,"suggestions":"1136"},{"ruleId":"1025","severity":1,"message":"1026","line":40,"column":8,"nodeType":"1027","endLine":40,"endColumn":46,"suggestions":"1137"},{"ruleId":"1025","severity":1,"message":"1026","line":51,"column":8,"nodeType":"1027","endLine":51,"endColumn":19,"suggestions":"1138"},{"ruleId":"1025","severity":1,"message":"1039","line":40,"column":8,"nodeType":"1027","endLine":40,"endColumn":10,"suggestions":"1139"},{"ruleId":"1025","severity":1,"message":"1140","line":50,"column":6,"nodeType":"1027","endLine":50,"endColumn":20,"suggestions":"1141"},{"ruleId":"1025","severity":1,"message":"1142","line":48,"column":6,"nodeType":"1027","endLine":48,"endColumn":14,"suggestions":"1143"},{"ruleId":"1025","severity":1,"message":"1144","line":42,"column":6,"nodeType":"1027","endLine":42,"endColumn":15,"suggestions":"1145"},{"ruleId":"1025","severity":1,"message":"1146","line":46,"column":6,"nodeType":"1027","endLine":46,"endColumn":14,"suggestions":"1147"},{"ruleId":"1025","severity":1,"message":"1148","line":80,"column":6,"nodeType":"1027","endLine":80,"endColumn":51,"suggestions":"1149"},{"ruleId":"1025","severity":1,"message":"1150","line":47,"column":6,"nodeType":"1027","endLine":47,"endColumn":13,"suggestions":"1151"},{"ruleId":"1025","severity":1,"message":"1152","line":51,"column":6,"nodeType":"1027","endLine":51,"endColumn":36,"suggestions":"1153"},{"ruleId":"1025","severity":1,"message":"1026","line":103,"column":6,"nodeType":"1027","endLine":103,"endColumn":17,"suggestions":"1154"},{"ruleId":"1025","severity":1,"message":"1155","line":250,"column":8,"nodeType":"1027","endLine":250,"endColumn":29,"suggestions":"1156"},{"ruleId":"1025","severity":1,"message":"1157","line":43,"column":6,"nodeType":"1027","endLine":43,"endColumn":20,"suggestions":"1158"},{"ruleId":"1025","severity":1,"message":"1148","line":80,"column":6,"nodeType":"1027","endLine":80,"endColumn":64,"suggestions":"1159"},{"ruleId":"1025","severity":1,"message":"1160","line":37,"column":6,"nodeType":"1027","endLine":37,"endColumn":19,"suggestions":"1161"},{"ruleId":"1025","severity":1,"message":"1026","line":144,"column":6,"nodeType":"1027","endLine":144,"endColumn":74,"suggestions":"1162"},{"ruleId":"1025","severity":1,"message":"1163","line":230,"column":8,"nodeType":"1027","endLine":238,"endColumn":6,"suggestions":"1164"},{"ruleId":"1025","severity":1,"message":"1155","line":424,"column":8,"nodeType":"1027","endLine":424,"endColumn":27,"suggestions":"1165"},{"ruleId":"1025","severity":1,"message":"1144","line":41,"column":6,"nodeType":"1027","endLine":41,"endColumn":15,"suggestions":"1166"},{"ruleId":"1025","severity":1,"message":"1146","line":45,"column":6,"nodeType":"1027","endLine":45,"endColumn":14,"suggestions":"1167"},{"ruleId":"1025","severity":1,"message":"1026","line":41,"column":5,"nodeType":"1027","endLine":41,"endColumn":7,"suggestions":"1168"},{"ruleId":"1025","severity":1,"message":"1169","line":41,"column":5,"nodeType":"1027","endLine":41,"endColumn":15,"suggestions":"1170"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'headers'. Either include it or remove the dependency array.","ArrayExpression",["1171"],"React Hook React.useEffect has missing dependencies: 'contact', 'profile', and 'router.query'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setView' needs the current value of 'profile'.",["1172"],"React Hook React.useEffect has a missing dependency: 'profile'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setView' needs the current value of 'profile'.",["1173"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["1174"],["1175"],["1176"],"React Hook React.useEffect has missing dependencies: 'headers' and 'id'. Either include them or remove the dependency array.",["1177"],["1178"],["1179"],["1180"],["1181"],["1182"],["1183"],["1184"],["1185"],["1186"],["1187"],["1188"],"React Hook React.useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["1189"],["1190"],["1191"],["1192"],["1193"],["1194"],"React Hook React.useEffect has a missing dependency: 'props.layoutProps'. Either include it or remove the dependency array.",["1195"],["1196"],["1197"],["1198"],"React Hook React.useEffect has missing dependencies: 'fieldvalues' and 'groups'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setNewOne' needs the current value of 'groups'.",["1199"],["1200"],["1201"],["1202"],["1203"],["1204"],["1205"],["1206"],["1207"],"React Hook React.useEffect has missing dependencies: 'contract_type_ids', 'contract_type_nums', 'contract_type_values', and 'contracts'. Either include them or remove the dependency array.",["1208"],["1209"],["1210"],["1211"],["1212"],["1213"],["1214"],["1215"],["1216"],"React Hook React.useEffect has a missing dependency: 'departments'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setNewOne' needs the current value of 'departments'.",["1217"],["1218"],["1219"],["1220"],["1221"],"React Hook React.useEffect has a missing dependency: 'staffs'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setNewOne' needs the current value of 'staffs'.",["1222"],["1223"],["1224"],["1225"],["1226"],["1227"],["1228"],["1229"],["1230"],["1231"],["1232"],["1233"],["1234"],["1235"],"React Hook React.useEffect has a missing dependency: 'decimal_separator'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setNewOne' needs the current value of 'decimal_separator'.",["1236"],["1237"],["1238"],["1239"],["1240"],["1241"],["1242"],["1243"],["1244"],["1245"],["1246"],["1247"],["1248"],["1249"],["1250"],["1251"],"React Hook React.useEffect has missing dependencies: 'contract' and 'staff'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPermissions' needs the current value of 'contract'.",["1252"],["1253"],["1254"],["1255"],["1256"],["1257"],["1258"],["1259"],["1260"],["1261"],["1262"],["1263"],"React Hook React.useEffect has missing dependencies: 'default_language', 'departments', 'direction', 'email', 'email_signature', 'facebook', 'firstname', 'hourly_rate', 'lastname', 'linkedin', 'phonenumber', 'role', and 'skype'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setNewOne' needs the current value of 'email'.",["1264"],["1265"],["1266"],["1267"],"React Hook useEffect has a missing dependency: 'goodId'. Either include it or remove the dependency array.",["1268"],"React Hook useEffect has a missing dependency: 'getAllReports'. Either include it or remove the dependency array.",["1269"],"React Hook useEffect has a missing dependency: 'onChangeSort'. Either include it or remove the dependency array. If 'onChangeSort' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1270"],"React Hook useEffect has a missing dependency: 'onChangeFilter'. Either include it or remove the dependency array. If 'onChangeFilter' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1271"],"React Hook useEffect has a missing dependency: 'handleGetProducts'. Either include it or remove the dependency array.",["1272"],"React Hook React.useEffect has a missing dependency: 'warehouse_ID'. Either include it or remove the dependency array.",["1273"],"React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.",["1274"],["1275"],"React Hook React.useEffect has a missing dependency: 'id.id'. Either include it or remove the dependency array.",["1276"],"React Hook useEffect has a missing dependency: 'productId'. Either include it or remove the dependency array.",["1277"],["1278"],"React Hook React.useEffect has a missing dependency: 'warehouseName'. Either include it or remove the dependency array. If 'setWarehouse_Name' needs the current value of 'warehouseName', you can also switch to useReducer instead of useState and read 'warehouseName' in the reducer.",["1279"],["1280"],"React Hook React.useEffect has an unnecessary dependency: 'warehouse_ID'. Either exclude it or remove the dependency array. Outer scope values like 'warehouse_ID' aren't valid dependencies because mutating them doesn't re-render the component.",["1281"],["1282"],["1283"],["1284"],["1285"],"React Hook React.useEffect has missing dependencies: 'userDataFromStore._id', 'userDataFromStore.email', 'userDataFromStore.firstname', and 'userDataFromStore.profile_image'. Either include them or remove the dependency array.",["1286"],{"desc":"1287","fix":"1288"},{"desc":"1289","fix":"1290"},{"desc":"1291","fix":"1292"},{"desc":"1293","fix":"1294"},{"desc":"1295","fix":"1296"},{"desc":"1297","fix":"1298"},{"desc":"1299","fix":"1300"},{"desc":"1297","fix":"1301"},{"desc":"1293","fix":"1302"},{"desc":"1295","fix":"1303"},{"desc":"1299","fix":"1304"},{"desc":"1305","fix":"1306"},{"desc":"1307","fix":"1308"},{"desc":"1293","fix":"1309"},{"desc":"1295","fix":"1310"},{"desc":"1299","fix":"1311"},{"desc":"1312","fix":"1313"},{"desc":"1295","fix":"1314"},{"desc":"1315","fix":"1316"},{"desc":"1317","fix":"1318"},{"desc":"1319","fix":"1320"},{"desc":"1299","fix":"1321"},{"desc":"1317","fix":"1322"},{"desc":"1323","fix":"1324"},{"desc":"1325","fix":"1326"},{"desc":"1297","fix":"1327"},{"desc":"1297","fix":"1328"},{"desc":"1297","fix":"1329"},{"desc":"1330","fix":"1331"},{"desc":"1299","fix":"1332"},{"desc":"1297","fix":"1333"},{"desc":"1297","fix":"1334"},{"desc":"1297","fix":"1335"},{"desc":"1330","fix":"1336"},{"desc":"1293","fix":"1337"},{"desc":"1297","fix":"1338"},{"desc":"1339","fix":"1340"},{"desc":"1341","fix":"1342"},{"desc":"1297","fix":"1343"},{"desc":"1297","fix":"1344"},{"desc":"1299","fix":"1345"},{"desc":"1297","fix":"1346"},{"desc":"1297","fix":"1347"},{"desc":"1297","fix":"1348"},{"desc":"1299","fix":"1349"},{"desc":"1297","fix":"1350"},{"desc":"1351","fix":"1352"},{"desc":"1293","fix":"1353"},{"desc":"1354","fix":"1355"},{"desc":"1297","fix":"1356"},{"desc":"1297","fix":"1357"},{"desc":"1358","fix":"1359"},{"desc":"1299","fix":"1360"},{"desc":"1297","fix":"1361"},{"desc":"1297","fix":"1362"},{"desc":"1358","fix":"1363"},{"desc":"1293","fix":"1364"},{"desc":"1295","fix":"1365"},{"desc":"1293","fix":"1366"},{"desc":"1295","fix":"1367"},{"desc":"1293","fix":"1368"},{"desc":"1295","fix":"1369"},{"desc":"1370","fix":"1371"},{"desc":"1295","fix":"1372"},{"desc":"1373","fix":"1374"},{"desc":"1375","fix":"1376"},{"desc":"1299","fix":"1377"},{"desc":"1375","fix":"1378"},{"desc":"1293","fix":"1379"},{"desc":"1295","fix":"1380"},{"desc":"1299","fix":"1381"},{"desc":"1293","fix":"1382"},{"desc":"1295","fix":"1383"},{"desc":"1293","fix":"1384"},{"desc":"1295","fix":"1385"},{"desc":"1299","fix":"1386"},{"desc":"1293","fix":"1387"},{"desc":"1295","fix":"1388"},{"desc":"1299","fix":"1389"},{"desc":"1293","fix":"1390"},{"desc":"1295","fix":"1391"},{"desc":"1392","fix":"1393"},{"desc":"1299","fix":"1394"},{"desc":"1395","fix":"1396"},{"desc":"1397","fix":"1398"},{"desc":"1399","fix":"1400"},{"desc":"1297","fix":"1401"},{"desc":"1297","fix":"1402"},{"desc":"1403","fix":"1404"},{"desc":"1299","fix":"1405"},{"desc":"1297","fix":"1406"},{"desc":"1297","fix":"1407"},{"desc":"1408","fix":"1409"},{"desc":"1410","fix":"1411"},{"desc":"1293","fix":"1412"},{"desc":"1295","fix":"1413"},{"desc":"1299","fix":"1414"},{"desc":"1415","fix":"1416"},{"desc":"1417","fix":"1418"},{"desc":"1419","fix":"1420"},{"desc":"1421","fix":"1422"},{"desc":"1423","fix":"1424"},{"desc":"1425","fix":"1426"},{"desc":"1427","fix":"1428"},{"desc":"1429","fix":"1430"},{"desc":"1431","fix":"1432"},{"desc":"1433","fix":"1434"},{"desc":"1435","fix":"1436"},{"desc":"1437","fix":"1438"},{"desc":"1439","fix":"1440"},{"desc":"1441","fix":"1442"},{"desc":"1443","fix":"1444"},{"desc":"1419","fix":"1445"},{"desc":"1421","fix":"1446"},{"desc":"1297","fix":"1447"},{"desc":"1448","fix":"1449"},"Update the dependencies array to be: [headers, router.query]",{"range":"1450","text":"1451"},"Update the dependencies array to be: [contact, layout, profile, router.query]",{"range":"1452","text":"1453"},"Update the dependencies array to be: [id, profile]",{"range":"1454","text":"1455"},"Update the dependencies array to be: [size, activeLinkNumber, deletesucess, headers]",{"range":"1456","text":"1457"},"Update the dependencies array to be: [deleteOne, headers]",{"range":"1458","text":"1459"},"Update the dependencies array to be: [headers]",{"range":"1460","text":"1461"},"Update the dependencies array to be: [headers, id]",{"range":"1462","text":"1463"},{"range":"1464","text":"1461"},{"range":"1465","text":"1457"},{"range":"1466","text":"1459"},{"range":"1467","text":"1463"},"Update the dependencies array to be: [size, activeLinkNumber, deleteBankSucess, headers]",{"range":"1468","text":"1469"},"Update the dependencies array to be: [deleteBank, headers]",{"range":"1470","text":"1471"},{"range":"1472","text":"1457"},{"range":"1473","text":"1459"},{"range":"1474","text":"1463"},"Update the dependencies array to be: [size, activeLinkNumber, deletesucess, addsuccess, id, headers]",{"range":"1475","text":"1476"},{"range":"1477","text":"1459"},"Update the dependencies array to be: [id]",{"range":"1478","text":"1479"},"Update the dependencies array to be: [size, search, activeLinkNumber, sort, deletesucess, headers]",{"range":"1480","text":"1481"},"Update the dependencies array to be: [deleteone, headers]",{"range":"1482","text":"1483"},{"range":"1484","text":"1463"},{"range":"1485","text":"1481"},"Update the dependencies array to be: [deleteclient, headers]",{"range":"1486","text":"1487"},"Update the dependencies array to be: [layout, props.layoutProps]",{"range":"1488","text":"1489"},{"range":"1490","text":"1461"},{"range":"1491","text":"1461"},{"range":"1492","text":"1461"},"Update the dependencies array to be: [company, phonenumber, billing_street, billing_city, billing_state, billing_zip, billing_country, shipping_street, shipping_city, shipping_state, shipping_zip, shipping_country, website, country, city, default_currency, default_language, state, zip, groups.length, changefieldvalues, address, groups, fieldvalues]",{"range":"1493","text":"1494"},{"range":"1495","text":"1463"},{"range":"1496","text":"1461"},{"range":"1497","text":"1461"},{"range":"1498","text":"1461"},{"range":"1499","text":"1494"},{"range":"1500","text":"1457"},{"range":"1501","text":"1461"},"Update the dependencies array to be: [deletecontract, headers]",{"range":"1502","text":"1503"},"Update the dependencies array to be: [contracts.length, contract_type_ids_length, contract_type_ids, contracts, contract_type_values, contract_type_nums]",{"range":"1504","text":"1505"},{"range":"1506","text":"1461"},{"range":"1507","text":"1461"},{"range":"1508","text":"1463"},{"range":"1509","text":"1461"},{"range":"1510","text":"1461"},{"range":"1511","text":"1461"},{"range":"1512","text":"1463"},{"range":"1513","text":"1461"},"Update the dependencies array to be: [email, firstname, lastname, hourly_rate, phonenumber, facebook, linkedin, skype, default_language, email_signature, direction, departments.length, departments]",{"range":"1514","text":"1515"},{"range":"1516","text":"1457"},"Update the dependencies array to be: [deleteproject, headers]",{"range":"1517","text":"1518"},{"range":"1519","text":"1461"},{"range":"1520","text":"1461"},"Update the dependencies array to be: [name, client, start_date, deadline, billing_type, status, project_cost, estimated_hours, staffs.length, description, staffs]",{"range":"1521","text":"1522"},{"range":"1523","text":"1463"},{"range":"1524","text":"1461"},{"range":"1525","text":"1461"},{"range":"1526","text":"1522"},{"range":"1527","text":"1457"},{"range":"1528","text":"1459"},{"range":"1529","text":"1457"},{"range":"1530","text":"1459"},{"range":"1531","text":"1457"},{"range":"1532","text":"1459"},"Update the dependencies array to be: [size, activeLinkNumber, deletesucess, defaultsucess, headers]",{"range":"1533","text":"1534"},{"range":"1535","text":"1459"},"Update the dependencies array to be: [defaultOne, headers]",{"range":"1536","text":"1537"},"Update the dependencies array to be: [name, placement, thousand_separator, symbol, decimal_separator]",{"range":"1538","text":"1539"},{"range":"1540","text":"1463"},{"range":"1541","text":"1539"},{"range":"1542","text":"1457"},{"range":"1543","text":"1459"},{"range":"1544","text":"1463"},{"range":"1545","text":"1457"},{"range":"1546","text":"1459"},{"range":"1547","text":"1457"},{"range":"1548","text":"1459"},{"range":"1549","text":"1463"},{"range":"1550","text":"1457"},{"range":"1551","text":"1459"},{"range":"1552","text":"1463"},{"range":"1553","text":"1457"},{"range":"1554","text":"1459"},"Update the dependencies array to be: [name, contractChange, staffChange, contract, staff]",{"range":"1555","text":"1556"},{"range":"1557","text":"1463"},"Update the dependencies array to be: [contract, contractChange, staff, staffChange]",{"range":"1558","text":"1559"},"Update the dependencies array to be: [size, search_staff, activeLinkNumber, sort, deletesucess, headers]",{"range":"1560","text":"1561"},"Update the dependencies array to be: [deletestaff, headers]",{"range":"1562","text":"1563"},{"range":"1564","text":"1461"},{"range":"1565","text":"1461"},"Update the dependencies array to be: [email, firstname, lastname, hourly_rate, phonenumber, facebook, linkedin, skype, default_language, email_signature, direction, password, departments.length, role, departments]",{"range":"1566","text":"1567"},{"range":"1568","text":"1463"},{"range":"1569","text":"1461"},{"range":"1570","text":"1461"},"Update the dependencies array to be: [email, firstname, lastname, hourly_rate, phonenumber, facebook, linkedin, skype, default_language, email_signature, direction, departments.length, role, departments]",{"range":"1571","text":"1572"},"Update the dependencies array to be: [default_language, departments, direction, email, email_signature, facebook, firstname, hourly_rate, lastname, linkedin, password, phonenumber, role, skype]",{"range":"1573","text":"1574"},{"range":"1575","text":"1457"},{"range":"1576","text":"1459"},{"range":"1577","text":"1463"},"Update the dependencies array to be: [goodId, openAddModal]",{"range":"1578","text":"1579"},"Update the dependencies array to be: [getAllReports, goodId]",{"range":"1580","text":"1581"},"Update the dependencies array to be: [onChangeSort, sortKey]",{"range":"1582","text":"1583"},"Update the dependencies array to be: [filter, onChangeFilter]",{"range":"1584","text":"1585"},"Update the dependencies array to be: [activeLinkNumber, pageSize, sortKey, filter, handleGetProducts]",{"range":"1586","text":"1587"},"Update the dependencies array to be: [lists, warehouse_ID]",{"range":"1588","text":"1589"},"Update the dependencies array to be: [props, warehouse_ID, warehouse_Name]",{"range":"1590","text":"1591"},"Update the dependencies array to be: [headers, wa_change]",{"range":"1592","text":"1593"},"Update the dependencies array to be: [id.id, show_Edit_Warehouse]",{"range":"1594","text":"1595"},"Update the dependencies array to be: [openAddModal, productId]",{"range":"1596","text":"1597"},"Update the dependencies array to be: [activeLinkNumber, pageSize, sortKey, filter, warehouseID, handleGetProducts]",{"range":"1598","text":"1599"},"Update the dependencies array to be: [warehouseID, warehouseName]",{"range":"1600","text":"1601"},"Update the dependencies array to be: [size, warehouse_ID, search, value, activeLinkNumber, sort, success, headers]",{"range":"1602","text":"1603"},"Update the dependencies array to be: [code, name, bin_location, expiration_date, initial_stock, comment]",{"range":"1604","text":"1605"},"Update the dependencies array to be: [id.id, show_Edit_Product]",{"range":"1606","text":"1607"},{"range":"1608","text":"1583"},{"range":"1609","text":"1585"},{"range":"1610","text":"1461"},"Update the dependencies array to be: [userData, userDataFromStore._id, userDataFromStore.email, userDataFromStore.firstname, userDataFromStore.profile_image]",{"range":"1611","text":"1612"},[1563,1577],"[headers, router.query]",[1986,1994],"[contact, layout, profile, router.query]",[2100,2104],"[id, profile]",[1681,1719],"[size, activeLinkNumber, deletesucess, headers]",[2058,2069],"[deleteOne, headers]",[2314,2316],"[headers]",[2216,2218],"[headers, id]",[2958,2960],[1608,1646],[1992,2003],[1470,1472],[1810,1852],"[size, activeLinkNumber, deleteBankSucess, headers]",[2208,2220],"[deleteBank, headers]",[1581,1619],[1961,1972],[1761,1763],[2225,2275],"[size, activeLinkNumber, deletesucess, addsuccess, id, headers]",[2605,2616],[12457,12459],"[id]",[1909,1961],"[size, search, activeLinkNumber, sort, deletesucess, headers]",[2291,2302],"[deleteone, headers]",[2189,2191],[1918,1970],[2305,2319],"[deleteclient, headers]",[364,372],"[layout, props.layoutProps]",[2605,2607],[2857,2859],[3096,3098],[3443,3735],"[company, phonenumber, billing_street, billing_city, billing_state, billing_zip, billing_country, shipping_street, shipping_city, shipping_state, shipping_zip, shipping_country, website, country, city, default_currency, default_language, state, zip, groups.length, changefieldvalues, address, groups, fieldvalues]",[4060,4062],[4299,4301],[4551,4553],[4794,4796],[5137,5429],[2146,2184],[3029,3031],[3368,3384],"[deletecontract, headers]",[5417,5462],"[contracts.length, contract_type_ids_length, contract_type_ids, contracts, contract_type_values, contract_type_nums]",[1712,1714],[2015,2017],[2062,2064],[2285,2287],[2521,2523],[2769,2771],[3472,3474],[3993,3995],[4186,4322],"[email, firstname, lastname, hourly_rate, phonenumber, facebook, linkedin, skype, default_language, email_signature, direction, departments.length, departments]",[1552,1590],[1928,1943],"[deleteproject, headers]",[2277,2279],[2745,2747],[2923,3040],"[name, client, start_date, deadline, billing_type, status, project_cost, estimated_hours, staffs.length, description, staffs]",[3076,3078],[3570,3572],[4038,4040],[4216,4333],[1604,1642],[1977,1988],[1552,1590],[1925,1936],[1552,1590],[1926,1937],[1703,1756],"[size, activeLinkNumber, deletesucess, defaultsucess, headers]",[2087,2098],[2426,2438],"[defaultOne, headers]",[1156,1212],"[name, placement, thousand_separator, symbol, decimal_separator]",[1892,1894],[2020,2076],[1561,1599],[1932,1943],[1516,1518],[1583,1621],[1960,1971],[1590,1628],[1961,1972],[1342,1344],[1583,1621],[1956,1967],[1964,1966],[1525,1563],[1890,1901],[1357,1392],"[name, contractChange, staffChange, contract, staff]",[1827,1829],[1929,1958],"[contract, contractChange, staff, staffChange]",[1953,2011],"[size, search_staff, activeLinkNumber, sort, deletesucess, headers]",[2343,2356],"[deletestaff, headers]",[3014,3016],[3499,3501],[3710,3860],"[email, firstname, lastname, hourly_rate, phonenumber, facebook, linkedin, skype, default_language, email_signature, direction, password, departments.length, role, departments]",[3522,3524],[4011,4013],[4509,4511],[4842,4983],"[email, firstname, lastname, hourly_rate, phonenumber, facebook, linkedin, skype, default_language, email_signature, direction, departments.length, role, departments]",[5188,5198],"[default_language, departments, direction, email, email_signature, facebook, firstname, hourly_rate, lastname, linkedin, password, phonenumber, role, skype]",[1529,1567],[1893,1904],[1385,1387],[1671,1685],"[goodId, openAddModal]",[1211,1219],"[getAllReports, goodId]",[1310,1319],"[onChangeSort, sortKey]",[1380,1388],"[filter, onChangeFilter]",[2434,2479],"[activeLinkNumber, pageSize, sortKey, filter, handleGetProducts]",[1395,1402],"[lists, warehouse_ID]",[1489,1519],"[props, warehouse_ID, warehouse_Name]",[2911,2922],"[headers, wa_change]",[7915,7936],"[id.id, show_Edit_Warehouse]",[1454,1468],"[openAddModal, productId]",[2522,2580],"[activeLinkNumber, pageSize, sortKey, filter, warehouseID, handleGetProducts]",[1189,1202],"[warehouseID, warehouseName]",[4346,4414],"[size, warehouse_ID, search, value, activeLinkNumber, sort, success, headers]",[6843,6980],"[code, name, bin_location, expiration_date, initial_stock, comment]",[13250,13269],"[id.id, show_Edit_Product]",[1303,1312],[1373,1381],[1061,1063],[1667,1677],"[userData, userDataFromStore._id, userDataFromStore.email, userDataFromStore.firstname, userDataFromStore.profile_image]"]